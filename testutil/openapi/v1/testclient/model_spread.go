/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// Spread struct for Spread
type Spread struct {
	Attribute *string `json:"Attribute,omitempty"`
	SpreadTarget *[]SpreadTarget `json:"SpreadTarget,omitempty"`
	Weight *int32 `json:"Weight,omitempty"`
}

// NewSpread instantiates a new Spread object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpread() *Spread {
	this := Spread{}
	return &this
}

// NewSpreadWithDefaults instantiates a new Spread object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpreadWithDefaults() *Spread {
	this := Spread{}
	return &this
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *Spread) GetAttribute() string {
	if o == nil || o.Attribute == nil {
		var ret string
		return ret
	}
	return *o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spread) GetAttributeOk() (*string, bool) {
	if o == nil || o.Attribute == nil {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *Spread) HasAttribute() bool {
	if o != nil && o.Attribute != nil {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given string and assigns it to the Attribute field.
func (o *Spread) SetAttribute(v string) {
	o.Attribute = &v
}

// GetSpreadTarget returns the SpreadTarget field value if set, zero value otherwise.
func (o *Spread) GetSpreadTarget() []SpreadTarget {
	if o == nil || o.SpreadTarget == nil {
		var ret []SpreadTarget
		return ret
	}
	return *o.SpreadTarget
}

// GetSpreadTargetOk returns a tuple with the SpreadTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spread) GetSpreadTargetOk() (*[]SpreadTarget, bool) {
	if o == nil || o.SpreadTarget == nil {
		return nil, false
	}
	return o.SpreadTarget, true
}

// HasSpreadTarget returns a boolean if a field has been set.
func (o *Spread) HasSpreadTarget() bool {
	if o != nil && o.SpreadTarget != nil {
		return true
	}

	return false
}

// SetSpreadTarget gets a reference to the given []SpreadTarget and assigns it to the SpreadTarget field.
func (o *Spread) SetSpreadTarget(v []SpreadTarget) {
	o.SpreadTarget = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *Spread) GetWeight() int32 {
	if o == nil || o.Weight == nil {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spread) GetWeightOk() (*int32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *Spread) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *Spread) SetWeight(v int32) {
	o.Weight = &v
}

func (o Spread) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attribute != nil {
		toSerialize["Attribute"] = o.Attribute
	}
	if o.SpreadTarget != nil {
		toSerialize["SpreadTarget"] = o.SpreadTarget
	}
	if o.Weight != nil {
		toSerialize["Weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableSpread struct {
	value *Spread
	isSet bool
}

func (v NullableSpread) Get() *Spread {
	return v.value
}

func (v *NullableSpread) Set(val *Spread) {
	v.value = val
	v.isSet = true
}

func (v NullableSpread) IsSet() bool {
	return v.isSet
}

func (v *NullableSpread) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpread(val *Spread) *NullableSpread {
	return &NullableSpread{value: val, isSet: true}
}

func (v NullableSpread) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpread) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


