syntax = "proto3";
package proto;
import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";

message Port {
  string label = 1;
  uint32 value = 2;
}

message Networks {
  string device = 1;
  string cidr = 2;
  string ip = 3;
  uint64 mbits = 4;
  Port reserved_ports = 5;
  Port dynamic_ports = 6;
}

message Resources {
  uint64 cpu = 1;
  uint64 memory_mb = 2;
  uint64 disk_mb = 3;
  uint64 iops = 4;
  Networks networks = 5;
}

message LogConfig {
  uint32 max_files = 1;
  uint64 max_file_size_mb = 2;
}

message TaskInfo {
  Resources resources = 1;
  LogConfig log_config = 2;
  //Struct config = 3;
  // example: https://gist.github.com/jsmouret/2bc876e8def6c63410556350eca3e43d
  google.protobuf.Struct config = 3;
}

message TaskDir {
  string directory = 1;
  string shared_alloc_dir = 2;
  string shared_task_dir = 3;
  string local_dir = 4;
  string log_dir = 5;
  string secrets_dir = 6;
  string log_level = 7;
}

message TaskEnv {
  map<string, string> node_attrs = 1;
  map<string, string> env_map = 2;
}

message ExecContext {
  TaskDir task_dir = 1;
  TaskEnv task_env = 2;
}

message StartRequest {
  ExecContext exec_context = 1;
  TaskInfo task_info = 2;
}

message DriverNetwork {
  map<string, uint32> port_map = 1;
  string ip = 2;
  bool auto_advertise = 3;
}

message Empty {}

message StartResponse {
  DriverNetwork driver_network = 1;
  TaskState taskState = 2;
}

message TaskState {
    string task_id = 1;
    PluginReattachInfo reattach_info = 2;
    // TODO(preetha): these fields starting from below are needed to create an executor for reattachment
    // figure out if we can get rid of them
    google.protobuf.Duration kill_timeout = 3;
    google.protobuf.Duration max_kill_timeout = 4;
    google.protobuf.Struct reattach_meta = 5;
    string task_dir = 6;
    string log_dir = 7;
    string log_level = 8;
    uint32 min_port = 9;
    uint32 max_port = 10;
}

message StopRequest {
  TaskState taskState = 1;
}

message StopResponse {
  uint32 Pid = 1;
}

message PluginReattachInfo {
	uint32 pid = 1;
	string address_network = 2;
	string address_name = 3;
}

message RestoreRequest {
    repeated TaskState task_states = 1;
}

message TaskRestoreResponse {
    string task_id = 1;
    string errorMessage = 2;
}

message RestoreResponse {
    repeated TaskRestoreResponse restore_results = 1;
}

service RawExec {
    rpc Start(StartRequest) returns (StartResponse);
    rpc Stop(StopRequest) returns (StopResponse);
    rpc Restore(RestoreRequest) returns (RestoreResponse);
}

