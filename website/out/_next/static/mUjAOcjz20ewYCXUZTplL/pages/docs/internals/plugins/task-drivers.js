(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{loEB:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return p}));var n=a("wx14"),i=a("Ff2n"),r=a("q1tI"),s=a.n(r),o=a("7ljp"),c=a("j1un"),l=(s.a.createElement,{}),b=Object(c.a)({layout:"docs",page_title:"Task Driver Plugins",sidebar_title:"Task Drivers",description:"Learn how to author a Nomad task driver plugin.",__resourcePath:"docs/internals/plugins/task-drivers.mdx",__scans:{}});function p(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)(b,Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{className:"g-type-display-2"},Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__permalink-h",href:"#task-drivers","aria-label":"task drivers permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__target-h",id:"task-drivers","aria-hidden":""})),"Task Drivers"),Object(o.b)("p",null,"Task drivers in Nomad are the runtime components that execute workloads. For\na real world example of a Nomad task driver plugin implementation, see the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad-driver-lxc"}),"LXC\ndriver source"),"."),Object(o.b)("h2",{className:"g-type-display-3"},Object(o.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#authoring-task-driver-plugins","aria-label":"authoring task driver plugins permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"authoring-task-driver-plugins","aria-hidden":""})),"Authoring Task Driver Plugins"),Object(o.b)("p",null,"Authoring a task driver (shortened to driver in this documentation) in Nomad\nconsists of implementing the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad/blob/v0.9.0/plugins/drivers/driver.go#L39-L57"}),"DriverPlugin")," interface and adding\na main package to launch the plugin. A driver plugin is long-lived and its\nlifetime is not bound to the Nomad client. This means that the Nomad client can\nbe restarted without restarting the driver. Nomad will ensure that one\ninstance of the driver is running, meaning if the driver crashes or otherwise\nterminates, Nomad will launch another instance of it."),Object(o.b)("p",null,"Drivers should maintain as little state as possible. State for a task is stored\nby the Nomad client on task creation. This enables a pattern where the driver\ncan maintain an in-memory state of the running tasks, and if necessary the\nNomad client can recover tasks into the driver state."),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad-skeleton-driver-plugin"}),"driver plugin skeleton project")," exists to help bootstrap\nthe development of new driver plugins. It provides most of the boilerplate\nnecessary for a driver plugin, along with detailed comments."),Object(o.b)("h2",{className:"g-type-display-3"},Object(o.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#task-driver-plugin-api","aria-label":"task driver plugin api permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"task-driver-plugin-api","aria-hidden":""})),"Task Driver Plugin API"),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/internals/plugins/base"}),"base plugin")," must be implemented in addition to the following\nfunctions."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#taskconfigschema-hclspec-spec-error","aria-label":"taskconfigschema hclspec spec error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"taskconfigschema-hclspec-spec-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"TaskConfigSchema() (*hclspec.Spec, error)")),Object(o.b)("p",null,"This function returns the schema for the driver configuration of the task. For\nmore information on ",Object(o.b)("inlineCode",{parentName:"p"},"hclspec.Spec")," see the HCL section in the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/internals/plugins/base"}),"base\nplugin")," documentation."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#capabilities-capabilities-error","aria-label":"capabilities capabilities error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"capabilities-capabilities-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"Capabilities() (*Capabilities, error)")),Object(o.b)("p",null,"Capabilities define what features the driver implements. Example:"),Object(o.b)("pre",{className:"language-go"},Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-go"}),"Capabilities ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// Does the driver support sending OS signals to the task? This capability"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// is used by 'nomad alloc signal'."),"\n    SendSignals",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),":")," ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token boolean"}),"true"),Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// Does the driver support executing a command within the task execution"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// environment? This capability is used by 'nomad alloc exec'."),"\n    Exec",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),":"),"        ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token boolean"}),"true"),Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// What filesystem isolation is supported by the driver. Options include"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// FSIsolationImage, FSIsolationChroot, and FSIsolationNone. See below for"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// more details."),"\n    FSIsolation",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),":")," FSIsolationImage",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),","),"\n\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// NetIsolationModes lists the set of isolation modes supported by the"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// driver.  Options include NetIsolationModeHost, NetIsolationModeGroup,"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// NetIsolationModeTask, and NetIsolationModeNone. See below for more"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// details."),"\n    NetIsolationModes ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"]"),"NetIsolationMode\n\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// MustInitiateNetwork tells Nomad that the driver must create the network"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// namespace and that the CreateNetwork and DestroyNetwork RPCs are"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// implemented."),"\n    MustInitiateNetwork ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token builtin"}),"bool"),"\n\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// MountConfigs tells Nomad which mounting config options the driver"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// supports. This is used to check whether mounting host volumes or CSI"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// volumes is allowed. Options include MountConfigSupportAll (default), or"),"\n    ",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token comment"}),"// MountConfigSupportNone."),"\n    MountConfigs MountConfigSupport\n",Object(o.b)("span",Object(n.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.b)("p",null,"The file system isolation options are:"),Object(o.b)("ul",null,Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"fsisolationimage",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#fsisolationimage","aria-label":"fsisolationimage permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"FSIsolationImage")),": The task driver isolates tasks as machine images."),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"fsisolationchroot",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#fsisolationchroot","aria-label":"fsisolationchroot permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"FSIsolationChroot")),": The task driver isolates tasks with ",Object(o.b)("inlineCode",{parentName:"li"},"chroot")," or\n",Object(o.b)("inlineCode",{parentName:"li"},"pivot_root"),"."),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"fsisolationnone",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#fsisolationnone","aria-label":"fsisolationnone permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"FSIsolationNone")),": The task driver has no filesystem isolation.")),Object(o.b)("p",null,"The network isolation modes are:"),Object(o.b)("ul",null,Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"netisolationmodehost",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#netisolationmodehost","aria-label":"netisolationmodehost permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"NetIsolationModeHost")),": The task driver supports disabling network isolation\nand using thre host network."),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"netisolationmodegroup",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#netisolationmodegroup","aria-label":"netisolationmodegroup permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"NetIsolationModeGroup")),": The task driver supports using the task group\nnetwork namespace."),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"netisolationmodetask",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#netisolationmodetask","aria-label":"netisolationmodetask permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"NetIsolationModeTask")),": The task driver supports isolating the network to\njust the task."),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"netisolationmodenone",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#netisolationmodenone","aria-label":"netisolationmodenone permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"NetIsolationModeNone")),": There is no network to isolate. This is used for\ntask that the client manages remotely.")),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#fingerprint-context-context-chan-fingerprint-error","aria-label":"fingerprint context context chan fingerprint error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"fingerprint-context-context-chan-fingerprint-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"Fingerprint(context.Context) (<-chan *Fingerprint, error)")),Object(o.b)("p",null,"This function is called by the client when the plugin is started. It allows the\ndriver to indicate its health to the client. The channel returned should\nimmediately send an initial Fingerprint, then send periodic updates at an\ninterval that is appropriate for the driver until the context is canceled."),Object(o.b)("p",null,"The fingerprint consists of a ",Object(o.b)("inlineCode",{parentName:"p"},"HealthState")," and ",Object(o.b)("inlineCode",{parentName:"p"},"HealthDescription")," to inform\nthe client about its health. Additionally an ",Object(o.b)("inlineCode",{parentName:"p"},"Attributes")," field is available\nfor the driver to add additional attributes to the client node. The fingerprint\n",Object(o.b)("inlineCode",{parentName:"p"},"HealthState")," can be one of three states."),Object(o.b)("ul",null,Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"healthstateundetected",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#healthstateundetected","aria-label":"healthstateundetected permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"HealthStateUndetected")),": Indicates that the necessary dependencies for the\ndriver are not detected on the system. Ex. java runtime for the java driver"),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"healthstateunhealthy",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#healthstateunhealthy","aria-label":"healthstateunhealthy permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"HealthStateUnhealthy")),": Indicates that something is wrong with the driver\nruntime. Ex. docker daemon stopped for the Docker driver"),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(n.a)({parentName:"li"},{id:"healthstatehealthy",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"#healthstatehealthy","aria-label":"healthstatehealthy permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"HealthStateHealthy")),": All systems go")),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#starttask-taskconfig-taskhandle-drivernetwork-error","aria-label":"starttask taskconfig taskhandle drivernetwork error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"starttask-taskconfig-taskhandle-drivernetwork-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"StartTask(*TaskConfig) (*TaskHandle, *DriverNetwork, error)")),Object(o.b)("p",null,"This function takes a ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://godoc.org/github.com/hashicorp/nomad/plugins/drivers#TaskConfig"}),Object(o.b)("inlineCode",{parentName:"a"},"TaskConfig"))," which includes all of the configuration\nneeded to launch the task. Additionally the driver configuration can be decoded\nfrom the ",Object(o.b)("inlineCode",{parentName:"p"},"TaskConfig")," by calling ",Object(o.b)("inlineCode",{parentName:"p"},"*TaskConfig.DecodeDriverConfig(t interface{})"),"\npassing in a pointer to the driver specific configuration struct. The\n",Object(o.b)("inlineCode",{parentName:"p"},"TaskConfig")," includes an ",Object(o.b)("inlineCode",{parentName:"p"},"ID")," field which future operations on the task will be\nreferenced by."),Object(o.b)("p",null,"Drivers return a ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://godoc.org/github.com/hashicorp/nomad/plugins/drivers#TaskHandle"}),Object(o.b)("inlineCode",{parentName:"a"},"*TaskHandle"))," which contains\nthe required information for the driver to reattach to the running task in the\ncase of plugin crashes or restarts. Some of this required state\nwill be specific to the driver implementation, thus a ",Object(o.b)("inlineCode",{parentName:"p"},"DriverState")," field\nexists to allow the driver to encode custom state into the struct. Helper\nfields exist on the ",Object(o.b)("inlineCode",{parentName:"p"},"TaskHandle")," to ",Object(o.b)("inlineCode",{parentName:"p"},"GetDriverState")," and ",Object(o.b)("inlineCode",{parentName:"p"},"SetDriverState"),"\nremoving the need for the driver to handle serialization."),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"*DriverNetwork")," can optionally be returned to describe the network of the\ntask if it is modified by the driver. An example of this is in the Docker\ndriver where tasks can be attached to a specific Docker network."),Object(o.b)("p",null,"If an error occurs, it is expected that the driver will cleanup any created\nresources prior to returning the error."),Object(o.b)("h4",{className:"g-type-display-5"},Object(o.b)("a",Object(n.a)({parentName:"h4"},{className:"__permalink-h",href:"#logging","aria-label":"logging permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h4"},{className:"__target-h",id:"logging","aria-hidden":""})),"Logging"),Object(o.b)("p",null,"Nomad handles all rotation and plumbing of task logs. In order for task stdout\nand stderr to be received by Nomad, they must be written to the correct\nlocation. Prior to starting the task through the driver, the Nomad client\ncreates FIFOs for stdout and stderr. These paths are given to the driver in the\n",Object(o.b)("inlineCode",{parentName:"p"},"TaskConfig"),". The ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://godoc.org/github.com/hashicorp/nomad/client/lib/fifo"}),Object(o.b)("inlineCode",{parentName:"a"},"fifo")," package")," can be used to support\ncross platform writing to these paths."),Object(o.b)("h4",{className:"g-type-display-5"},Object(o.b)("a",Object(n.a)({parentName:"h4"},{className:"__permalink-h",href:"#taskhandle-schema-versioning","aria-label":"taskhandle schema versioning permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h4"},{className:"__target-h",id:"taskhandle-schema-versioning","aria-hidden":""})),"TaskHandle Schema Versioning"),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"Version")," field is available on the TaskHandle struct to facilitate backwards\ncompatible recovery of tasks. This field is opaque to Nomad, but allows the\ndriver to handle recover tasks that were created by an older version of the\nplugin."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#recovertask-taskhandle-error","aria-label":"recovertask taskhandle error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"recovertask-taskhandle-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"RecoverTask(*TaskHandle) error")),Object(o.b)("p",null,"When a driver is restarted it is not expected to persist any internal state to\ndisk. To support this, Nomad will attempt to recover a task that was\npreviously started if the driver does not recognize the task ID. During task\nrecovery, Nomad calls ",Object(o.b)("inlineCode",{parentName:"p"},"RecoverTask")," passing the ",Object(o.b)("inlineCode",{parentName:"p"},"TaskHandle")," that was\nreturned by the ",Object(o.b)("inlineCode",{parentName:"p"},"StartTask")," function. If no error was returned, it is\nexpected that the driver can now operate on the task by referencing the task\nID. If an error occurs, the Nomad client will mark the task as ",Object(o.b)("inlineCode",{parentName:"p"},"lost"),"."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#waittask-context-context-id-string-chan-exitresult-error","aria-label":"waittask context context id string chan exitresult error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"waittask-context-context-id-string-chan-exitresult-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"WaitTask(context.Context, id string) (<-chan *ExitResult, error)")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"WaitTask")," function is expected to return a channel that will send an\n",Object(o.b)("inlineCode",{parentName:"p"},"*ExitResult")," when the task exits or close the channel when the context is\ncanceled. It is also expected that calling ",Object(o.b)("inlineCode",{parentName:"p"},"WaitTask")," on an exited task will\nimmediately send an ",Object(o.b)("inlineCode",{parentName:"p"},"*ExitResult")," on the returned channel."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#stoptask-taskid-string-timeout-time-duration-signal-string-error","aria-label":"stoptask taskid string timeout time duration signal string error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"stoptask-taskid-string-timeout-time-duration-signal-string-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"StopTask(taskID string, timeout time.Duration, signal string) error")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"StopTask")," function is expected to stop a running task by sending the given\nsignal to it. If the task does not stop during the given timeout, the driver\nmust forcefully kill the task."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"StopTask")," does not clean up resources of the task or remove it from the\ndriver's internal state. A call to ",Object(o.b)("inlineCode",{parentName:"p"},"WaitTask")," after ",Object(o.b)("inlineCode",{parentName:"p"},"StopTask")," is valid and\nshould be handled."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#destroytask-taskid-string-force-bool-error","aria-label":"destroytask taskid string force bool error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"destroytask-taskid-string-force-bool-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"DestroyTask(taskID string, force bool) error")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"DestroyTask")," function cleans up and removes a task that has terminated. If\nforce is set to true, the driver must destroy the task even if it is still\nrunning. If ",Object(o.b)("inlineCode",{parentName:"p"},"WaitTask")," is called after ",Object(o.b)("inlineCode",{parentName:"p"},"DestroyTask"),", it should return\n",Object(o.b)("inlineCode",{parentName:"p"},"drivers.ErrTaskNotFound")," as no task state should exist after ",Object(o.b)("inlineCode",{parentName:"p"},"DestroyTask")," is\ncalled."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#inspecttask-taskid-string-taskstatus-error","aria-label":"inspecttask taskid string taskstatus error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"inspecttask-taskid-string-taskstatus-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"InspectTask(taskID string) (*TaskStatus, error)")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"InspectTask")," function returns detailed status information for the\nreferenced ",Object(o.b)("inlineCode",{parentName:"p"},"taskID"),"."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#taskstats-context-context-id-string-time-duration-chan-cstructs-taskresourceusage-error","aria-label":"taskstats context context id string time duration chan cstructs taskresourceusage error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"taskstats-context-context-id-string-time-duration-chan-cstructs-taskresourceusage-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"TaskStats(context.Context, id string, time.Duration) (<-chan *cstructs.TaskResourceUsage, error)")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"TaskStats")," function returns a channel which the driver should send stats\nto at the given interval. The driver must send stats at the given interval\nuntil the given context is canceled or the task terminates."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#taskevents-context-context-chan-taskevent-error","aria-label":"taskevents context context chan taskevent error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"taskevents-context-context-chan-taskevent-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"TaskEvents(context.Context) (<-chan *TaskEvent, error)")),Object(o.b)("p",null,"The Nomad client publishes events associated with an allocation. The\n",Object(o.b)("inlineCode",{parentName:"p"},"TaskEvents")," function allows the driver to publish driver specific events about\ntasks and the Nomad client will associate them with the correct allocation."),Object(o.b)("p",null,"An ",Object(o.b)("inlineCode",{parentName:"p"},"Eventer")," utility is available in the\n",Object(o.b)("inlineCode",{parentName:"p"},"github.com/hashicorp/nomad/drivers/shared/eventer")," package implements an\nevent loop and publishing mechanism for use in the ",Object(o.b)("inlineCode",{parentName:"p"},"TaskEvents")," function."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#signaltask-taskid-string-signal-string-error","aria-label":"signaltask taskid string signal string error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"signaltask-taskid-string-signal-string-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"SignalTask(taskID string, signal string) error")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Optional - can be skipped by embedding ",Object(o.b)("inlineCode",{parentName:"p"},"drivers.DriverSignalTaskNotSupported"))),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"SignalTask")," function is used by drivers which support sending OS signals\n(",Object(o.b)("inlineCode",{parentName:"p"},"SIGHUP"),", ",Object(o.b)("inlineCode",{parentName:"p"},"SIGKILL"),", ",Object(o.b)("inlineCode",{parentName:"p"},"SIGUSR1")," etc.) to the task. It is an optional function\nand is listed as a capability in the driver ",Object(o.b)("inlineCode",{parentName:"p"},"Capabilities")," struct."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#exectask-taskid-string-cmd-string-timeout-time-duration-exectaskresult-error","aria-label":"exectask taskid string cmd string timeout time duration exectaskresult error permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"exectask-taskid-string-cmd-string-timeout-time-duration-exectaskresult-error","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h3"},"ExecTask(taskID string, cmd []string, timeout time.Duration) (*ExecTaskResult, error)")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Optional - can be skipped by embedding ",Object(o.b)("inlineCode",{parentName:"p"},"drivers.DriverExecTaskNotSupported"))),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"ExecTask")," function is used by the Nomad client to execute commands inside\nthe task execution context. For example, the Docker driver executes commands\ninside the running container. ",Object(o.b)("inlineCode",{parentName:"p"},"ExecTask")," is called for Consul script checks."))}p.isMDXComponent=!0},m86y:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/internals/plugins/task-drivers",function(){return a("loEB")}])}},[["m86y",0,1,2,4,3,5,6]]]);