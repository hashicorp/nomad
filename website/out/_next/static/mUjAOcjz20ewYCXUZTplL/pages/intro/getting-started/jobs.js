(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{"0owL":function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Web UI","sidebar_title":"Web UI","description":"Visit the Nomad Web UI to inspect jobs, allocations, and more.","__resourcePath":"intro/getting-started/ui.mdx"}')},"8Bhu":function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Introduction","sidebar_title":"What is Nomad?","description":"Welcome to the intro guide to Nomad! This guide is the best place to start with Nomad. We cover what Nomad is, what problems it can solve, how it compares to existing software, and a quick start for using Nomad.","__resourcePath":"intro/index.mdx"}')},"9UVK":function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Next Steps","sidebar_title":"Next Steps","description":"After completing the getting started guide, learn about what to do next with Nomad.","__resourcePath":"intro/getting-started/next-steps.mdx"}')},ES6J:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Install Nomad","sidebar_title":"Getting Started","description":"The first step to using Nomad is to get it installed.","__resourcePath":"intro/getting-started/index.mdx"}')},FcFI:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/intro/getting-started/jobs",function(){return t("Talo")}])},I4gp:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Nomad vs. Terraform","sidebar_title":"Terraform","description":"Comparison between Nomad and Terraform","__resourcePath":"intro/vs/terraform.mdx"}')},Talo:function(e,a,t){"use strict";t.r(a),t.d(a,"default",(function(){return p}));var n=t("wx14"),o=t("Ff2n"),s=t("q1tI"),i=t.n(s),c=t("7ljp"),r=t("x5xN"),l=(i.a.createElement,{}),b=Object(r.a)({layout:"intro",page_title:"Jobs",sidebar_title:"Jobs",description:"Learn how to submit, modify and stop jobs in Nomad.",__resourcePath:"intro/getting-started/jobs.mdx",__scans:{}});function p(e){var a=e.components,t=Object(o.a)(e,["components"]);return Object(c.b)(b,Object(n.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("h1",{className:"g-type-display-2"},Object(c.b)("a",Object(n.a)({parentName:"h1"},{className:"__permalink-h",href:"#jobs","aria-label":"jobs permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h1"},{className:"__target-h",id:"jobs","aria-hidden":""})),"Jobs"),Object(c.b)("p",null,"Jobs are the primary configuration that users interact with when using\nNomad. A job is a declarative specification of tasks that Nomad should run.\nJobs have a globally unique name, one or many task groups, which are themselves\ncollections of one or many tasks."),Object(c.b)("p",null,"The format of the jobs is documented in the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/job-specification",title:"Nomad Job Specification"}),"job specification"),". They\ncan either be specified in ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/hcl",title:"HashiCorp Configuration Language"}),"HashiCorp Configuration Language")," or JSON,\nhowever we recommend only using JSON when the configuration is generated by a machine."),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#running-a-job","aria-label":"running a job permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"running-a-job","aria-hidden":""})),"Running a Job"),Object(c.b)("p",null,"To get started, we will use the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/commands/job/init"}),Object(c.b)("inlineCode",{parentName:"a"},"job init")," command")," which\ngenerates a skeleton job file:"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job init")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),"Example job file written to example.nomad\n"))),Object(c.b)("p",null,"You can view the contents of this file by running ",Object(c.b)("inlineCode",{parentName:"p"},"cat example.nomad"),". In this\nexample job file, we have declared a single task 'redis' which is using\nthe Docker driver to run the task. The primary way you interact with Nomad\nis with the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/commands/job/run"}),Object(c.b)("inlineCode",{parentName:"a"},"job run")," command"),". The ",Object(c.b)("inlineCode",{parentName:"p"},"run")," command takes\na job file and registers it with Nomad. This is used both to register new\njobs and to update existing jobs."),Object(c.b)("p",null,"We can register our example job now:"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job run example.nomad")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),'==> Monitoring evaluation "13ebb66d"\n    Evaluation triggered by job "example"\n    Allocation "883269bf" created: node "e42d6f19", group "cache"\n    Evaluation within deployment: "b0a84e74"\n    Evaluation status changed: "pending" -> "complete"\n==> Evaluation "13ebb66d" finished with status "complete"\n'))),Object(c.b)("p",null,"Anytime a job is updated, Nomad creates an evaluation to determine what\nactions need to take place. In this case, because this is a new job, Nomad has\ndetermined that an allocation should be created and has scheduled it on our\nlocal agent."),Object(c.b)("p",null,"To inspect the status of our job we use the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/commands/status"}),Object(c.b)("inlineCode",{parentName:"a"},"status")," command"),":"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad status example")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),"ID            = example\nName          = example\nSubmit Date   = 10/31/17 22:58:40 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = running\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         1        0       0         0\n\nLatest Deployment\nID          = b0a84e74\nStatus      = successful\nDescription = Deployment completed successfully\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       1        1       1        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created  Modified\n8ba85cef  171a583b  cache       0        run      running  5m ago   5m ago\n"))),Object(c.b)("p",null,"Here we can see that the result of our evaluation was the creation of an\nallocation that is now running on the local node."),Object(c.b)("p",null,"An allocation represents an instance of Task Group placed on a node. To inspect\nan allocation we use the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/commands/alloc/status"}),Object(c.b)("inlineCode",{parentName:"a"},"alloc status")," command"),":"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad alloc status 8ba85cef")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),'ID                  = 8ba85cef\nEval ID             = 13ebb66d\nName                = example.cache[0]\nNode ID             = e42d6f19\nJob ID              = example\nJob Version         = 0\nClient Status       = running\nClient Description  = <none>\nDesired Status      = run\nDesired Description = <none>\nCreated             = 5m ago\nModified            = 5m ago\nDeployment ID       = fa882a5b\nDeployment Health   = healthy\n\nTask "redis" is "running"\nTask Resources\nCPU        Memory           Disk     Addresses\n8/500 MHz  6.3 MiB/256 MiB  300 MiB  db: 127.0.0.1:22672\n\nTask Events:\nStarted At     = 10/31/17 22:58:49 UTC\nFinished At    = N/A\nTotal Restarts = 0\nLast Restart   = N/A\n\nRecent Events:\nTime                   Type        Description\n10/31/17 22:58:49 UTC  Started     Task started by client\n10/31/17 22:58:40 UTC  Driver      Downloading image redis:3.2\n10/31/17 22:58:40 UTC  Task Setup  Building Task Directory\n10/31/17 22:58:40 UTC  Received    Task received by client\n'))),Object(c.b)("p",null,"We can see that Nomad reports the state of the allocation as well as its\ncurrent resource usage. By supplying the ",Object(c.b)("inlineCode",{parentName:"p"},"-stats")," flag, more detailed resource\nusage statistics will be reported."),Object(c.b)("p",null,"To see the logs of a task, we can use the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/commands/alloc/logs"}),Object(c.b)("inlineCode",{parentName:"a"},"logs")," command"),":"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad alloc logs 8ba85cef redis")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),"                 _._\n            _.-``__ ''-._\n       _.-``    `.  `_.  ''-._           Redis 3.2.1 (00000000/0) 64 bit\n   .-`` .-```.  ```\\/    _.,_ ''-._\n  (    '      ,       .-`  | `,    )     Running in standalone mode\n  |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379\n  |    `-._   `._    /     _.-'    |     PID: 1\n   `-._    `-._  `-./  _.-'    _.-'\n  |`-._`-._    `-.__.-'    _.-'_.-'|\n  |    `-._`-._        _.-'_.-'    |           http://redis.io\n   `-._    `-._`-.__.-'_.-'    _.-'\n  |`-._`-._    `-.__.-'    _.-'_.-'|\n  |    `-._`-._        _.-'_.-'    |\n   `-._    `-._`-.__.-'_.-'    _.-'\n       `-._    `-.__.-'    _.-'\n           `-._        _.-'\n               `-.__.-'\n...\n"))),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#modifying-a-job","aria-label":"modifying a job permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"modifying-a-job","aria-hidden":""})),"Modifying a Job"),Object(c.b)("p",null,"The definition of a job is not static, and is meant to be updated over time.\nYou may update a job to change the docker container, to update the application version,\nor to change the count of a task group to scale with load."),Object(c.b)("p",null,"For now, edit the ",Object(c.b)("inlineCode",{parentName:"p"},"example.nomad")," file to update the count and set it to 3:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),'# The "count" parameter specifies the number of the task groups that should\n# be running under this group. This value must be non-negative and defaults\n# to 1.\ncount = 3\n')),Object(c.b)("p",null,"Once you have finished modifying the job specification, use the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/commands/job/plan"}),Object(c.b)("inlineCode",{parentName:"a"},"job plan"),"\ncommand")," to invoke a dry-run of the scheduler to see\nwhat would happen if you ran the updated job:"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job plan example.nomad")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),'+/- Job: "example"\n+/- Task Group: "cache" (2 create, 1 in-place update)\n  +/- Count: "1" => "3" (forces create)\n      Task: "redis"\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 7\nTo submit the job with version verification run:\n\nnomad job run -check-index 7 example.nomad\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan\'s results are\npotentially invalid.\n'))),Object(c.b)("p",null,"We can see that the scheduler detected the change in count and informs us that\nit will cause 2 new instances to be created. The in-place update that will\noccur is to push the updated job specification to the existing allocation and\nwill not cause any service interruption. We can then run the job with the run\ncommand the ",Object(c.b)("inlineCode",{parentName:"p"},"plan")," emitted."),Object(c.b)("p",null,"By running with the ",Object(c.b)("inlineCode",{parentName:"p"},"-check-index")," flag, Nomad checks that the job has not\nbeen modified since the plan was run. This is useful if multiple people are\ninteracting with the job at the same time to ensure the job hasn't changed\nbefore you apply your modifications."),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job run -check-index ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token number"}),"7")," example.nomad")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),'==> Monitoring evaluation "93d16471"\n    Evaluation triggered by job "example"\n    Evaluation within deployment: "0d06e1b6"\n    Allocation "3249e320" created: node "e42d6f19", group "cache"\n    Allocation "453b210f" created: node "e42d6f19", group "cache"\n    Allocation "883269bf" modified: node "e42d6f19", group "cache"\n    Evaluation status changed: "pending" -> "complete"\n==> Evaluation "93d16471" finished with status "complete"\n'))),Object(c.b)("p",null,"Because we set the count of the task group to three, Nomad created two\nadditional allocations to get to the desired state. It is idempotent to\nrun the same job specification again and no new allocations will be created."),Object(c.b)("p",null,"Now, let's try to do an application update. In this case, we will simply change\nthe version of redis we want to run. Edit the ",Object(c.b)("inlineCode",{parentName:"p"},"example.nomad"),' file and change\nthe Docker image from "redis:3.2" to "redis:4.0":'),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),'# Configure Docker driver with the image\nconfig {\n    image = "redis:4.0"\n}\n')),Object(c.b)("p",null,"We can run ",Object(c.b)("inlineCode",{parentName:"p"},"plan")," again to see what will happen if we submit this change:"),Object(c.b)("pre",{className:"language-text"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),'+/- Job: "example"\n+/- Task Group: "cache" (1 create/destroy update, 2 ignore)\n  +/- Task: "redis" (forces create/destroy update)\n    +/- Config {\n      +/- image:           "redis:3.2" => "redis:4.0"\n          port_map[0][db]: "6379"\n        }\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 1127\nTo submit the job with version verification run:\n\nnomad job run -check-index 1127 example.nomad\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan\'s results are\npotentially invalid.\n')),Object(c.b)("p",null,"The plan output shows us that one allocation will be updated and that the other\ntwo will be ignored. This is due to the ",Object(c.b)("inlineCode",{parentName:"p"},"max_parallel")," setting in the ",Object(c.b)("inlineCode",{parentName:"p"},"update"),"\nstanza, which is set to 1 to instruct Nomad to perform only a single change at\na time."),Object(c.b)("p",null,"Once ready, use ",Object(c.b)("inlineCode",{parentName:"p"},"run")," to push the updated specification:"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job run example.nomad")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),'==> Monitoring evaluation "293b313a"\n    Evaluation triggered by job "example"\n    Evaluation within deployment: "f4047b3a"\n    Allocation "27bd4a41" created: node "e42d6f19", group "cache"\n    Evaluation status changed: "pending" -> "complete"\n==> Evaluation "293b313a" finished with status "complete"\n'))),Object(c.b)("p",null,"After running, the rolling upgrade can be followed by running ",Object(c.b)("inlineCode",{parentName:"p"},"nomad status")," and\nwatching the deployed count."),Object(c.b)("p",null,"We can see that Nomad handled the update in three phases, only updating a single\nallocation in each phase and waiting for it to be healthy for ",Object(c.b)("inlineCode",{parentName:"p"},"min_healthy_time"),"\nof 10 seconds before moving on to the next. The update strategy can be\nconfigured, but rolling updates makes it easy to upgrade an application at large\nscale."),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#stopping-a-job","aria-label":"stopping a job permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"stopping-a-job","aria-hidden":""})),"Stopping a Job"),Object(c.b)("p",null,"So far we've created, run and modified a job. The final step in a job lifecycle\nis stopping the job. This is done with the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/commands/job/stop"}),Object(c.b)("inlineCode",{parentName:"a"},"job stop")," command"),":"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job stop example")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),'==> Monitoring evaluation "6d4cd6ca"\n    Evaluation triggered by job "example"\n    Evaluation within deployment: "f4047b3a"\n    Evaluation status changed: "pending" -> "complete"\n==> Evaluation "6d4cd6ca" finished with status "complete"\n'))),Object(c.b)("p",null,"When we stop a job, it creates an evaluation which is used to stop all\nthe existing allocations. If we now query the job status, we can see it is\nnow marked as ",Object(c.b)("inlineCode",{parentName:"p"},"dead (stopped)"),", indicating that the job has been stopped and\nNomad is no longer running it:"),Object(c.b)("pre",{className:"language-shell-session"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell-session"}),Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token command"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad status example")),"\n",Object(c.b)("span",Object(n.a)({parentName:"code"},{className:"token output"}),"ID            = example\nName          = example\nSubmit Date   = 11/01/17 17:30:40 UTC\nType          = service\nPriority      = 50\nDatacenters   = dc1\nStatus        = dead (stopped)\nPeriodic      = false\nParameterized = false\n\nSummary\nTask Group  Queued  Starting  Running  Failed  Complete  Lost\ncache       0       0         0        0       6         0\n\nLatest Deployment\nID          = f4047b3a\nStatus      = successful\nDescription = Deployment completed successfully\n\nDeployed\nTask Group  Desired  Placed  Healthy  Unhealthy\ncache       3        3       3        0\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status    Created    Modified\n8ace140d  2cfe061e  cache       2        stop     complete  5m ago     5m ago\n8af5330a  2cfe061e  cache       2        stop     complete  6m ago     6m ago\ndf50c3ae  2cfe061e  cache       2        stop     complete  6m ago     6m ago\n"))),Object(c.b)("p",null,"If we wanted to start the job again, we could simply ",Object(c.b)("inlineCode",{parentName:"p"},"run")," it again."),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#next-steps","aria-label":"next steps permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"next-steps","aria-hidden":""})),"Next Steps"),Object(c.b)("p",null,"Users of Nomad primarily interact with jobs, and we've now seen\nhow to create and scale our job, perform an application update,\nand do a job tear down. Next we will add another Nomad\nclient to ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/intro/getting-started/cluster"}),"create our first cluster")))}p.isMDXComponent=!0},VoyU:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Nomad vs. Mesos with Aurora, Marathon, etc","sidebar_title":"Mesos & Marathon","description":"Comparison between Nomad and Mesos with Marathon","__resourcePath":"intro/vs/mesos.mdx"}')},dVIr:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Nomad vs. AWS ECS","sidebar_title":"AWS ECS","description":"Comparison between Nomad and AWS ECS","__resourcePath":"intro/vs/ecs.mdx"}')},gSz6:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Use Cases","sidebar_title":"Use Cases","description":"This page lists some concrete use cases for Nomad, but the possible use cases\\nare much broader than what we cover.","__resourcePath":"intro/use-cases.mdx"}')},"i+aQ":function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Who Uses Nomad","sidebar_title":"Who Uses Nomad","description":"This page features many ways Nomad is used in production today across many industries to solve critical, real-world business objectives","__resourcePath":"intro/who-uses-nomad.mdx"}')},l4nd:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Running Nomad","sidebar_title":"Running Nomad","description":"Learn about the Nomad agent, and the lifecycle of running and stopping.","__resourcePath":"intro/getting-started/running.mdx"}')},mVx1:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Jobs","sidebar_title":"Jobs","description":"Learn how to submit, modify and stop jobs in Nomad.","__resourcePath":"intro/getting-started/jobs.mdx"}')},oySa:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Nomad vs. Other Software","sidebar_title":"Nomad vs. Other Software","description":"Comparisons between Nomad and other cluster managers.","__resourcePath":"intro/vs/index.mdx"}')},pdIF:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Nomad vs. Kubernetes","sidebar_title":"Kubernetes","description":"Comparison between Nomad and Kubernetes","__resourcePath":"intro/vs/kubernetes.mdx"}')},seji:function(e){e.exports=JSON.parse('{"layout":"intro","page_title":"Clustering","sidebar_title":"Clustering","description":"Join another Nomad client to create your first cluster.","__resourcePath":"intro/getting-started/cluster.mdx"}')},x5xN:function(e,a,t){"use strict";t.d(a,"a",(function(){return E}));var n=t("wx14"),o=t("Ff2n"),s=t("q1tI"),i=t.n(s),c=t("8Kt/"),r=t.n(c),l=t("YFqc"),b=t.n(l),p=t("JrEN"),d=t.n(p),m=t("ZrrF"),u=t("0XJD"),h=t("seji"),j=t("ES6J"),g=t("mVx1"),N=t("9UVK"),O=t("l4nd"),f=t("0owL"),_=t("8Bhu"),w=t("gSz6"),y=t("dVIr"),k=t("oySa"),x=t("pdIF"),v=t("VoyU"),T=t("I4gp"),C=t("i+aQ"),S=t("kw+s"),D=["use-cases","who-uses-nomad",{category:"vs",content:["kubernetes","ecs","mesos","terraform"]},{category:"getting-started",content:["running","jobs","cluster","ui","next-steps"]}],I=i.a.createElement,J=[h,j,g,N,O,f,_,w,y,k,x,v,T,C],P=Object(u.a)({product:"nomad"});function E(e){function a(a){var t=a.children,s=Object(o.a)(a,["children"]);return I(P,null,I(d.a,Object(n.a)({},s,{product:"nomad",head:{is:r.a,title:"".concat(e.page_title," | Nomad by HashiCorp"),description:e.description,siteName:"Nomad by HashiCorp"},sidenav:{Link:b.a,category:"intro",currentPage:a.path,data:J,order:D,disableFilter:!0},resourceURL:"https://github.com/hashicorp/nomad/blob/master/website/pages/".concat(e.__resourcePath)}),I(m.SearchProvider,null,I(S.a,null),t)))}return a.getInitialProps=function(e){return{path:e.asPath}},a}}},[["FcFI",0,1,2,4,3,5]]]);