(window.webpackJsonp=window.webpackJsonp||[]).push([[241],{g9T5:function(e,a,t){"use strict";t.r(a),t.d(a,"default",(function(){return j}));var n,c=t("wx14"),o=t("Ff2n"),s=t("q1tI"),b=t.n(s),r=t("7ljp"),p=t("j1un"),i=(b.a.createElement,n="Placement",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),Object(r.b)("div",e)}),l={},m=Object(p.a)({layout:"docs",page_title:"multiregion Stanza - Job Specification",sidebar_title:"multiregion <sup>Beta</sup>",description:'The "multiregion" stanza specifies that a job will be deployed to multiple federated\nregions.',__resourcePath:"docs/job-specification/multiregion.mdx",__scans:{}});function j(e){var a=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)(m,Object(c.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{className:"g-type-display-2"},Object(r.b)("a",Object(c.a)({parentName:"h1"},{className:"__permalink-h",href:"#multiregion-stanza","aria-label":"multiregion stanza permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h1"},{className:"__target-h",id:"multiregion-stanza","aria-hidden":""})),Object(r.b)("inlineCode",{parentName:"h1"},"multiregion")," Stanza"),Object(r.b)(i,{groups:[["job","multiregion"]],mdxType:"Placement"}),Object(r.b)("div",{className:"alert alert-warning g-type-body",role:"alert"},Object(r.b)("p",{parentName:"div"},"",Object(r.b)("strong",{parentName:"p"},"Enterprise Only!")," This functionality only exists in Nomad\nEnterprise. This is not present in the open source version of Nomad.")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"multiregion")," stanza specifies that a job will be deployed to multiple\n",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"https://learn.hashicorp.com/nomad/operating-nomad/federation"}),"federated regions"),". If omitted, the job will be deployed to a single region\n\u2014 the one specified by the ",Object(r.b)("inlineCode",{parentName:"p"},"region")," field or the ",Object(r.b)("inlineCode",{parentName:"p"},"-region")," command line\nflag to ",Object(r.b)("inlineCode",{parentName:"p"},"nomad job run"),"."),Object(r.b)("p",null,"Federated Nomad clusters are members of the same gossip cluster but not the\nsame raft cluster; they don't share their data stores. Each region in a\nmultiregion deployment gets an independent copy of the job, parameterized with\nthe values of the ",Object(r.b)("inlineCode",{parentName:"p"},"region")," stanza. Nomad regions coordinate to rollout each\nregion's deployment using rules determined by the ",Object(r.b)("inlineCode",{parentName:"p"},"strategy")," stanza."),Object(r.b)("pre",{className:"language-hcl"},Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),"job ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"docs"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"multiregion")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"strategy")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"1"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"on_failure"),"   ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"fail_all"'),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n    region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"west"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"count")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"2"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"datacenters")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"west-1"'),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"]"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"meta")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"my-key")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"my-value-west"'),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n    region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"east"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"count")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"5"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"datacenters")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"["),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"east-1"'),", ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"east-2"'),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"]"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"meta")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"my-key")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"my-value-east"'),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(r.b)("h2",{className:"g-type-display-3"},Object(r.b)("a",Object(c.a)({parentName:"h2"},{className:"__permalink-h",href:"#multiregion-deployment-states","aria-label":"multiregion deployment states permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h2"},{className:"__target-h",id:"multiregion-deployment-states","aria-hidden":""})),"Multiregion Deployment States"),Object(r.b)("p",null,"A single region deployment using one of the various ",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"https://learn.hashicorp.com/nomad?track=update-strategies#update-strategies"}),"upgrade strategies"),"\nbegins in the ",Object(r.b)("inlineCode",{parentName:"p"},"running")," state, and ends in the ",Object(r.b)("inlineCode",{parentName:"p"},"successful")," state, the\n",Object(r.b)("inlineCode",{parentName:"p"},"canceled")," state (if another deployment supersedes it before it it's\ncomplete), or the ",Object(r.b)("inlineCode",{parentName:"p"},"failed")," state. A failed single region deployment may\nautomatically revert to the previous version of the job if its ",Object(r.b)("inlineCode",{parentName:"p"},"update"),"\nstanza has the ",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"/docs/job-specification/update#auto_revert"}),Object(r.b)("inlineCode",{parentName:"a"},"auto_revert"))," setting."),Object(r.b)("p",null,"In a multiregion deployment, regions begin in the ",Object(r.b)("inlineCode",{parentName:"p"},"pending")," state. This allows\nNomad to determine that all regions have accepted the job before\ncontinuing. At this point up to ",Object(r.b)("inlineCode",{parentName:"p"},"max_parallel")," regions will enter ",Object(r.b)("inlineCode",{parentName:"p"},"running")," at\na time. When each region completes its local deployment, it enters a ",Object(r.b)("inlineCode",{parentName:"p"},"blocked"),"\nstate where it waits until the last region has completed the deployment. The\nfinal region will unblock the regions to mark them as ",Object(r.b)("inlineCode",{parentName:"p"},"successful"),"."),Object(r.b)("h2",{className:"g-type-display-3"},Object(r.b)("a",Object(c.a)({parentName:"h2"},{className:"__permalink-h",href:"#multiregion-parameters","aria-label":"multiregion parameters permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h2"},{className:"__target-h",id:"multiregion-parameters","aria-hidden":""})),Object(r.b)("inlineCode",{parentName:"h2"},"multiregion")," Parameters"),Object(r.b)("ul",null,Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(c.a)({parentName:"li"},{id:"strategy",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#strategy","aria-label":"strategy permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"strategy"))," ",Object(r.b)("code",null,"(",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#strategy-parameters"}),"Strategy"),": nil)")," - Specifies\na rollout strategy for the regions.")),Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(c.a)({parentName:"li"},{id:"region",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#region","aria-label":"region permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"region"))," ",Object(r.b)("code",null,"(",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#region-parameters"}),"Region"),": nil)")," - Specifies the\nparameters for a specific region. This can be specified multiple times to\ndefine the set of regions for the multiregion deployment. Regions are\nordered; depending on the rollout strategy Nomad may roll out to each region\nin order or to several at a time."))),Object(r.b)("div",{className:"alert alert-warning g-type-body",role:"alert"},Object(r.b)("p",{parentName:"div"},"",Object(r.b)("strong",{parentName:"p"},"Note:")," Regions can be added, but regions that are removed will not be\nstopped and will be ignored by the deployment. This behavior may change before\nmultiregion deployments are considered GA.")),Object(r.b)("h3",{className:"g-type-display-4"},Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#strategy-parameters","aria-label":"strategy parameters permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"strategy-parameters","aria-hidden":""})),Object(r.b)("inlineCode",{parentName:"h3"},"strategy")," Parameters"),Object(r.b)("ul",null,Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(c.a)({parentName:"li"},{id:"max_parallel",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#max_parallel","aria-label":"max_parallel permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"max_parallel"))," ",Object(r.b)("inlineCode",{parentName:"p"},"(int: <optional>)")," - Specifies the maximum number\nof region deployments that a multiregion will have in a running state at a\ntime. By default, Nomad will deploy all regions simultaneously.")),Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(c.a)({parentName:"li"},{id:"on_failure",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#on_failure","aria-label":"on_failure permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"on_failure"))," ",Object(r.b)("inlineCode",{parentName:"p"},"(string: <optional>)")," - Specifies the behavior when a region\ndeployment fails. Available options are ",Object(r.b)("inlineCode",{parentName:"p"},'"fail_all"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'"fail_local"'),", or\nthe default (empty ",Object(r.b)("inlineCode",{parentName:"p"},'""'),"). This field and its interactions with the job's\n",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"/docs/job-specification/update"}),Object(r.b)("inlineCode",{parentName:"a"},"update")," stanza")," is described in the ",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#multiregion-examples"}),"examples")," below."),Object(r.b)("p",{parentName:"li"},"Each region within a multiregion deployment follows the ",Object(r.b)("inlineCode",{parentName:"p"},"auto_revert"),"\nstrategy of its own ",Object(r.b)("inlineCode",{parentName:"p"},"update")," stanza (if any). The multiregion ",Object(r.b)("inlineCode",{parentName:"p"},"on_failure"),"\nfield tells Nomad how many other regions should be marked as failed when one\nregion's deployment fails:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("p",{parentName:"li"},"The default behavior is that the failed region and all regions that come\nafter it in order are marked as failed.")),Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("p",{parentName:"li"},"If ",Object(r.b)("inlineCode",{parentName:"p"},'on_failure: "fail_all"')," is set, all regions will be marked as\nfailed. If all regions have already completed their deployments, it's\npossible that a region may transition from ",Object(r.b)("inlineCode",{parentName:"p"},"blocked")," to ",Object(r.b)("inlineCode",{parentName:"p"},"successful")," while\nanother region is failing. This successful region cannot be rolled back.")),Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("p",{parentName:"li"},"If ",Object(r.b)("inlineCode",{parentName:"p"},'on_failure: "fail_local"')," is set, only the failed region will be marked\nas failed. The remaining regions will move on to ",Object(r.b)("inlineCode",{parentName:"p"},"blocked")," status. At this\npoint, you'll need to manually unblock regions to mark them successful\nwith the ",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"/docs/commands/deployment/unblock"}),Object(r.b)("inlineCode",{parentName:"a"},"nomad deployment unblock"))," command or correct the conditions\nthat led to the failure and resubmit the job."))))),Object(r.b)("div",{className:"alert alert-warning g-type-body",role:"alert"},Object(r.b)("p",{parentName:"div"},"For ",Object(r.b)("inlineCode",{parentName:"p"},"system")," jobs, only ",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#max_parallel"}),Object(r.b)("inlineCode",{parentName:"a"},"max_parallel"))," is enforced. The\n",Object(r.b)("inlineCode",{parentName:"p"},"system")," scheduler will be updated to support ",Object(r.b)("inlineCode",{parentName:"p"},"on_failure")," when the the\n",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"/docs/job-specification/update"}),Object(r.b)("inlineCode",{parentName:"a"},"update")," stanza")," is fully supported for system jobs in a future release.")),Object(r.b)("h3",{className:"g-type-display-4"},Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#region-parameters","aria-label":"region parameters permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"region-parameters","aria-hidden":""})),Object(r.b)("inlineCode",{parentName:"h3"},"region")," Parameters"),Object(r.b)("p",null,"The name of a region must match the name of one of the ",Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"https://learn.hashicorp.com/nomad/operating-nomad/federation"}),"federated regions"),"."),Object(r.b)("ul",null,Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(c.a)({parentName:"li"},{id:"count",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#count","aria-label":"count permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"count"))," ",Object(r.b)("inlineCode",{parentName:"p"},"(int: <optional>)")," - Specifies a count override for task groups in\nthe region. If a task group specifies a ",Object(r.b)("inlineCode",{parentName:"p"},"count = 0"),", its count will be\nreplaced with this value. If a task group specifies its own ",Object(r.b)("inlineCode",{parentName:"p"},"count")," or omits\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"count")," field, this value will be ignored. This value must be\nnon-negative.")),Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(c.a)({parentName:"li"},{id:"datacenters",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#datacenters","aria-label":"datacenters permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"datacenters"))," ",Object(r.b)("inlineCode",{parentName:"p"},"(array<string>: <optional>)")," - A list of\ndatacenters in the region which are eligible for task placement. If not\nprovided, the ",Object(r.b)("inlineCode",{parentName:"p"},"datacenters")," field of the job will be used.")),Object(r.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(c.a)({parentName:"li"},{id:"meta",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(c.a)({parentName:"p"},{href:"#meta","aria-label":"meta permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"meta"))," - ",Object(r.b)("inlineCode",{parentName:"p"},"Meta: nil")," - The meta stanza allows for user-defined arbitrary\nkey-value pairs. The meta specified for each region will be merged with the\nmeta stanza at the job level."))),Object(r.b)("p",null,"As described above, the parameters for each region replace the default values\nfor the field with the same name for each region."),Object(r.b)("h2",{className:"g-type-display-3"},Object(r.b)("a",Object(c.a)({parentName:"h2"},{className:"__permalink-h",href:"#multiregion-examples","aria-label":"multiregion examples permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h2"},{className:"__target-h",id:"multiregion-examples","aria-hidden":""})),Object(r.b)("inlineCode",{parentName:"h2"},"multiregion")," Examples"),Object(r.b)("p",null,"The following examples only show the ",Object(r.b)("inlineCode",{parentName:"p"},"multiregion")," stanza and the other\nstanzas it might be interacting with."),Object(r.b)("h3",{className:"g-type-display-4"},Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#max-parallel","aria-label":"max parallel permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"max-parallel","aria-hidden":""})),"Max Parallel"),Object(r.b)("p",null,"This example shows the use of ",Object(r.b)("inlineCode",{parentName:"p"},"max_parallel"),'. This job will deploy first to\nthe "north" and "south" regions. If either "north" finishes and enters the\n',Object(r.b)("inlineCode",{parentName:"p"},"blocked"),' state, then "east" will be next. At most 2 regions will be in a\n',Object(r.b)("inlineCode",{parentName:"p"},"running")," state at any given time."),Object(r.b)("pre",{className:"language-hcl"},Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"multiregion")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"strategy")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"2"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"north"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"south"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"east"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"west"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(r.b)("h3",{className:"g-type-display-4"},Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#rollback-regions","aria-label":"rollback regions permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"rollback-regions","aria-hidden":""})),"Rollback Regions"),Object(r.b)("p",null,"This example shows the default value of ",Object(r.b)("inlineCode",{parentName:"p"},"on_failure"),". Because ",Object(r.b)("inlineCode",{parentName:"p"},"max_parallel = 1"),',\nthe "north" region will deploy first, followed by "south", and so on. But\nsupposing the "east" region failed, both the "east" region and the "west"\nregion would be marked ',Object(r.b)("inlineCode",{parentName:"p"},"failed"),". Because the job has an ",Object(r.b)("inlineCode",{parentName:"p"},"update")," stanza with\n",Object(r.b)("inlineCode",{parentName:"p"},"auto_revert=true"),', both regions would then rollback to the previous job\nversion. The "north" and "south" regions would remain ',Object(r.b)("inlineCode",{parentName:"p"},"blocked")," until an\noperator intervenes."),Object(r.b)("pre",{className:"language-hcl"},Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"multiregion")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"strategy")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"on_failure")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'""'),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"1"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"north"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"south"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"east"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"west"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"auto_revert")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token boolean"}),"true"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(r.b)("h3",{className:"g-type-display-4"},Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#override-counts","aria-label":"override counts permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"override-counts","aria-hidden":""})),"Override Counts"),Object(r.b)("p",null,"This example shows how the ",Object(r.b)("inlineCode",{parentName:"p"},"count")," field override the default ",Object(r.b)("inlineCode",{parentName:"p"},"count"),' of the\ntask group. The job the deploys 2 "worker" and 1 "controller" allocations to\nthe "west" region, and 5 "worker" and 1 "controller" task groups to the "east"\nregion.'),Object(r.b)("pre",{className:"language-hcl"},Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"multiregion")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n\n    region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"west"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"count")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"2"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n    region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"east"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"count")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"5"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\ngroup ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"worker"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"count")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"0"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\ngroup ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"controller"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"count")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"1"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(r.b)("h3",{className:"g-type-display-4"},Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#merging-meta","aria-label":"merging meta permalink"}),"\xbb"),Object(r.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"merging-meta","aria-hidden":""})),"Merging Meta"),Object(r.b)("p",null,"This example shows how the ",Object(r.b)("inlineCode",{parentName:"p"},"meta")," is merged with the ",Object(r.b)("inlineCode",{parentName:"p"},"meta"),' field of the job,\ngroup, and task. A task in "west" will have the values\n',Object(r.b)("inlineCode",{parentName:"p"},'first-key="regional-west"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'second-key="group-level"'),', whereas a task in\n"east" will have the values ',Object(r.b)("inlineCode",{parentName:"p"},'first-key="job-level"'),",\n",Object(r.b)("inlineCode",{parentName:"p"},'second-key="group-level"'),"."),Object(r.b)("pre",{className:"language-hcl"},Object(r.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"multiregion")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n\n    region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"west"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"meta")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"first-key")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"regional-west"'),"\n        ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"second-key")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"regional-west"'),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n    region ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"east"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"meta")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"second-key")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"regional-east"'),"\n      ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"meta")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"first-key")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"job-level"'),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\ngroup ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"worker"')," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"meta")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"second-key")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"group-level"'),"\n  ",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(r.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")))}j.isMDXComponent=!0},r3TQ:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/job-specification/multiregion",function(){return t("g9T5")}])}},[["r3TQ",0,1,2,4,3,5,6]]]);