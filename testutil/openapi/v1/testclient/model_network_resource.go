/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// NetworkResource struct for NetworkResource
type NetworkResource struct {
	CIDR *string `json:"CIDR,omitempty"`
	DNS *DNSConfig `json:"DNS,omitempty"`
	Device *string `json:"Device,omitempty"`
	DynamicPorts *[]Port `json:"DynamicPorts,omitempty"`
	IP *string `json:"IP,omitempty"`
	MBits *int32 `json:"MBits,omitempty"`
	Mode *string `json:"Mode,omitempty"`
	ReservedPorts *[]Port `json:"ReservedPorts,omitempty"`
}

// NewNetworkResource instantiates a new NetworkResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkResource() *NetworkResource {
	this := NetworkResource{}
	return &this
}

// NewNetworkResourceWithDefaults instantiates a new NetworkResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkResourceWithDefaults() *NetworkResource {
	this := NetworkResource{}
	return &this
}

// GetCIDR returns the CIDR field value if set, zero value otherwise.
func (o *NetworkResource) GetCIDR() string {
	if o == nil || o.CIDR == nil {
		var ret string
		return ret
	}
	return *o.CIDR
}

// GetCIDROk returns a tuple with the CIDR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkResource) GetCIDROk() (*string, bool) {
	if o == nil || o.CIDR == nil {
		return nil, false
	}
	return o.CIDR, true
}

// HasCIDR returns a boolean if a field has been set.
func (o *NetworkResource) HasCIDR() bool {
	if o != nil && o.CIDR != nil {
		return true
	}

	return false
}

// SetCIDR gets a reference to the given string and assigns it to the CIDR field.
func (o *NetworkResource) SetCIDR(v string) {
	o.CIDR = &v
}

// GetDNS returns the DNS field value if set, zero value otherwise.
func (o *NetworkResource) GetDNS() DNSConfig {
	if o == nil || o.DNS == nil {
		var ret DNSConfig
		return ret
	}
	return *o.DNS
}

// GetDNSOk returns a tuple with the DNS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkResource) GetDNSOk() (*DNSConfig, bool) {
	if o == nil || o.DNS == nil {
		return nil, false
	}
	return o.DNS, true
}

// HasDNS returns a boolean if a field has been set.
func (o *NetworkResource) HasDNS() bool {
	if o != nil && o.DNS != nil {
		return true
	}

	return false
}

// SetDNS gets a reference to the given DNSConfig and assigns it to the DNS field.
func (o *NetworkResource) SetDNS(v DNSConfig) {
	o.DNS = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *NetworkResource) GetDevice() string {
	if o == nil || o.Device == nil {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkResource) GetDeviceOk() (*string, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *NetworkResource) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *NetworkResource) SetDevice(v string) {
	o.Device = &v
}

// GetDynamicPorts returns the DynamicPorts field value if set, zero value otherwise.
func (o *NetworkResource) GetDynamicPorts() []Port {
	if o == nil || o.DynamicPorts == nil {
		var ret []Port
		return ret
	}
	return *o.DynamicPorts
}

// GetDynamicPortsOk returns a tuple with the DynamicPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkResource) GetDynamicPortsOk() (*[]Port, bool) {
	if o == nil || o.DynamicPorts == nil {
		return nil, false
	}
	return o.DynamicPorts, true
}

// HasDynamicPorts returns a boolean if a field has been set.
func (o *NetworkResource) HasDynamicPorts() bool {
	if o != nil && o.DynamicPorts != nil {
		return true
	}

	return false
}

// SetDynamicPorts gets a reference to the given []Port and assigns it to the DynamicPorts field.
func (o *NetworkResource) SetDynamicPorts(v []Port) {
	o.DynamicPorts = &v
}

// GetIP returns the IP field value if set, zero value otherwise.
func (o *NetworkResource) GetIP() string {
	if o == nil || o.IP == nil {
		var ret string
		return ret
	}
	return *o.IP
}

// GetIPOk returns a tuple with the IP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkResource) GetIPOk() (*string, bool) {
	if o == nil || o.IP == nil {
		return nil, false
	}
	return o.IP, true
}

// HasIP returns a boolean if a field has been set.
func (o *NetworkResource) HasIP() bool {
	if o != nil && o.IP != nil {
		return true
	}

	return false
}

// SetIP gets a reference to the given string and assigns it to the IP field.
func (o *NetworkResource) SetIP(v string) {
	o.IP = &v
}

// GetMBits returns the MBits field value if set, zero value otherwise.
func (o *NetworkResource) GetMBits() int32 {
	if o == nil || o.MBits == nil {
		var ret int32
		return ret
	}
	return *o.MBits
}

// GetMBitsOk returns a tuple with the MBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkResource) GetMBitsOk() (*int32, bool) {
	if o == nil || o.MBits == nil {
		return nil, false
	}
	return o.MBits, true
}

// HasMBits returns a boolean if a field has been set.
func (o *NetworkResource) HasMBits() bool {
	if o != nil && o.MBits != nil {
		return true
	}

	return false
}

// SetMBits gets a reference to the given int32 and assigns it to the MBits field.
func (o *NetworkResource) SetMBits(v int32) {
	o.MBits = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *NetworkResource) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkResource) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *NetworkResource) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *NetworkResource) SetMode(v string) {
	o.Mode = &v
}

// GetReservedPorts returns the ReservedPorts field value if set, zero value otherwise.
func (o *NetworkResource) GetReservedPorts() []Port {
	if o == nil || o.ReservedPorts == nil {
		var ret []Port
		return ret
	}
	return *o.ReservedPorts
}

// GetReservedPortsOk returns a tuple with the ReservedPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkResource) GetReservedPortsOk() (*[]Port, bool) {
	if o == nil || o.ReservedPorts == nil {
		return nil, false
	}
	return o.ReservedPorts, true
}

// HasReservedPorts returns a boolean if a field has been set.
func (o *NetworkResource) HasReservedPorts() bool {
	if o != nil && o.ReservedPorts != nil {
		return true
	}

	return false
}

// SetReservedPorts gets a reference to the given []Port and assigns it to the ReservedPorts field.
func (o *NetworkResource) SetReservedPorts(v []Port) {
	o.ReservedPorts = &v
}

func (o NetworkResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CIDR != nil {
		toSerialize["CIDR"] = o.CIDR
	}
	if o.DNS != nil {
		toSerialize["DNS"] = o.DNS
	}
	if o.Device != nil {
		toSerialize["Device"] = o.Device
	}
	if o.DynamicPorts != nil {
		toSerialize["DynamicPorts"] = o.DynamicPorts
	}
	if o.IP != nil {
		toSerialize["IP"] = o.IP
	}
	if o.MBits != nil {
		toSerialize["MBits"] = o.MBits
	}
	if o.Mode != nil {
		toSerialize["Mode"] = o.Mode
	}
	if o.ReservedPorts != nil {
		toSerialize["ReservedPorts"] = o.ReservedPorts
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkResource struct {
	value *NetworkResource
	isSet bool
}

func (v NullableNetworkResource) Get() *NetworkResource {
	return v.value
}

func (v *NullableNetworkResource) Set(val *NetworkResource) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkResource) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkResource(val *NetworkResource) *NullableNetworkResource {
	return &NullableNetworkResource{value: val, isSet: true}
}

func (v NullableNetworkResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


