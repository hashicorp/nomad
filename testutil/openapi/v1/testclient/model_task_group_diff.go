/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// TaskGroupDiff struct for TaskGroupDiff
type TaskGroupDiff struct {
	Fields *[]FieldDiff `json:"Fields,omitempty"`
	Name *string `json:"Name,omitempty"`
	Objects *[]ObjectDiff `json:"Objects,omitempty"`
	Tasks *[]TaskDiff `json:"Tasks,omitempty"`
	Type *string `json:"Type,omitempty"`
	Updates *map[string]int32 `json:"Updates,omitempty"`
}

// NewTaskGroupDiff instantiates a new TaskGroupDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskGroupDiff() *TaskGroupDiff {
	this := TaskGroupDiff{}
	return &this
}

// NewTaskGroupDiffWithDefaults instantiates a new TaskGroupDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskGroupDiffWithDefaults() *TaskGroupDiff {
	this := TaskGroupDiff{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *TaskGroupDiff) GetFields() []FieldDiff {
	if o == nil || o.Fields == nil {
		var ret []FieldDiff
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupDiff) GetFieldsOk() (*[]FieldDiff, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *TaskGroupDiff) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []FieldDiff and assigns it to the Fields field.
func (o *TaskGroupDiff) SetFields(v []FieldDiff) {
	o.Fields = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaskGroupDiff) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupDiff) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaskGroupDiff) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaskGroupDiff) SetName(v string) {
	o.Name = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *TaskGroupDiff) GetObjects() []ObjectDiff {
	if o == nil || o.Objects == nil {
		var ret []ObjectDiff
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupDiff) GetObjectsOk() (*[]ObjectDiff, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *TaskGroupDiff) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []ObjectDiff and assigns it to the Objects field.
func (o *TaskGroupDiff) SetObjects(v []ObjectDiff) {
	o.Objects = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *TaskGroupDiff) GetTasks() []TaskDiff {
	if o == nil || o.Tasks == nil {
		var ret []TaskDiff
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupDiff) GetTasksOk() (*[]TaskDiff, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *TaskGroupDiff) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []TaskDiff and assigns it to the Tasks field.
func (o *TaskGroupDiff) SetTasks(v []TaskDiff) {
	o.Tasks = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TaskGroupDiff) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupDiff) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TaskGroupDiff) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TaskGroupDiff) SetType(v string) {
	o.Type = &v
}

// GetUpdates returns the Updates field value if set, zero value otherwise.
func (o *TaskGroupDiff) GetUpdates() map[string]int32 {
	if o == nil || o.Updates == nil {
		var ret map[string]int32
		return ret
	}
	return *o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroupDiff) GetUpdatesOk() (*map[string]int32, bool) {
	if o == nil || o.Updates == nil {
		return nil, false
	}
	return o.Updates, true
}

// HasUpdates returns a boolean if a field has been set.
func (o *TaskGroupDiff) HasUpdates() bool {
	if o != nil && o.Updates != nil {
		return true
	}

	return false
}

// SetUpdates gets a reference to the given map[string]int32 and assigns it to the Updates field.
func (o *TaskGroupDiff) SetUpdates(v map[string]int32) {
	o.Updates = &v
}

func (o TaskGroupDiff) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fields != nil {
		toSerialize["Fields"] = o.Fields
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Objects != nil {
		toSerialize["Objects"] = o.Objects
	}
	if o.Tasks != nil {
		toSerialize["Tasks"] = o.Tasks
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Updates != nil {
		toSerialize["Updates"] = o.Updates
	}
	return json.Marshal(toSerialize)
}

type NullableTaskGroupDiff struct {
	value *TaskGroupDiff
	isSet bool
}

func (v NullableTaskGroupDiff) Get() *TaskGroupDiff {
	return v.value
}

func (v *NullableTaskGroupDiff) Set(val *TaskGroupDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskGroupDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskGroupDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskGroupDiff(val *TaskGroupDiff) *NullableTaskGroupDiff {
	return &NullableTaskGroupDiff{value: val, isSet: true}
}

func (v NullableTaskGroupDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskGroupDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


