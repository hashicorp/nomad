/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// DNSConfig struct for DNSConfig
type DNSConfig struct {
	Options *[]string `json:"Options,omitempty"`
	Searches *[]string `json:"Searches,omitempty"`
	Servers *[]string `json:"Servers,omitempty"`
}

// NewDNSConfig instantiates a new DNSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSConfig() *DNSConfig {
	this := DNSConfig{}
	return &this
}

// NewDNSConfigWithDefaults instantiates a new DNSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSConfigWithDefaults() *DNSConfig {
	this := DNSConfig{}
	return &this
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DNSConfig) GetOptions() []string {
	if o == nil || o.Options == nil {
		var ret []string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetOptionsOk() (*[]string, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DNSConfig) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *DNSConfig) SetOptions(v []string) {
	o.Options = &v
}

// GetSearches returns the Searches field value if set, zero value otherwise.
func (o *DNSConfig) GetSearches() []string {
	if o == nil || o.Searches == nil {
		var ret []string
		return ret
	}
	return *o.Searches
}

// GetSearchesOk returns a tuple with the Searches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetSearchesOk() (*[]string, bool) {
	if o == nil || o.Searches == nil {
		return nil, false
	}
	return o.Searches, true
}

// HasSearches returns a boolean if a field has been set.
func (o *DNSConfig) HasSearches() bool {
	if o != nil && o.Searches != nil {
		return true
	}

	return false
}

// SetSearches gets a reference to the given []string and assigns it to the Searches field.
func (o *DNSConfig) SetSearches(v []string) {
	o.Searches = &v
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *DNSConfig) GetServers() []string {
	if o == nil || o.Servers == nil {
		var ret []string
		return ret
	}
	return *o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSConfig) GetServersOk() (*[]string, bool) {
	if o == nil || o.Servers == nil {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *DNSConfig) HasServers() bool {
	if o != nil && o.Servers != nil {
		return true
	}

	return false
}

// SetServers gets a reference to the given []string and assigns it to the Servers field.
func (o *DNSConfig) SetServers(v []string) {
	o.Servers = &v
}

func (o DNSConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Options != nil {
		toSerialize["Options"] = o.Options
	}
	if o.Searches != nil {
		toSerialize["Searches"] = o.Searches
	}
	if o.Servers != nil {
		toSerialize["Servers"] = o.Servers
	}
	return json.Marshal(toSerialize)
}

type NullableDNSConfig struct {
	value *DNSConfig
	isSet bool
}

func (v NullableDNSConfig) Get() *DNSConfig {
	return v.value
}

func (v *NullableDNSConfig) Set(val *DNSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSConfig(val *DNSConfig) *NullableDNSConfig {
	return &NullableDNSConfig{value: val, isSet: true}
}

func (v NullableDNSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


