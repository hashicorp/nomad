(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{i7RH:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return h}));var n=a("wx14"),i=a("Ff2n"),r=a("q1tI"),s=a.n(r),c=a("7ljp"),o=a("j1un"),l=(s.a.createElement,{}),p=Object(o.a)({layout:"docs",page_title:"Device Plugins",sidebar_title:"Devices",description:"Learn how to author a Nomad device plugin.",__resourcePath:"docs/internals/plugins/devices.mdx",__scans:{}});function h(e){var{components:t}=e,a=Object(i.a)(e,["components"]);return Object(c.b)(p,Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{className:"g-type-display-2"},Object(c.b)("a",Object(n.a)({parentName:"h1"},{className:"__permalink-h",href:"#devices","aria-label":"devices permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h1"},{className:"__target-h",id:"devices","aria-hidden":""})),"Devices"),Object(c.b)("p",null,"Nomad has built-in support for scheduling compute resources such as CPU, memory,\nand networking. Nomad device plugins are used to support scheduling tasks with\nother devices, such as GPUs. They are responsible for fingerprinting these\ndevices and working with the Nomad client to make them available to assigned\ntasks."),Object(c.b)("p",null,"For a real world example of a Nomad device plugin implementation, see the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad/tree/master/devices/gpu/nvidia"}),"Nvidia\nGPU plugin"),"."),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#authoring-device-plugins","aria-label":"authoring device plugins permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"authoring-device-plugins","aria-hidden":""})),"Authoring Device Plugins"),Object(c.b)("p",null,"Authoring a device plugin in Nomad consists of implementing the\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad/blob/v0.9.0/plugins/device/device.go#L20-L33"}),"DevicePlugin")," interface alongside\na main package to launch the plugin."),Object(c.b)("p",null,"The ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad-skeleton-device-plugin"}),"device plugin skeleton project")," exists to help bootstrap\nthe development of new device plugins. It provides most of the boilerplate\nnecessary for a device plugin, along with detailed comments."),Object(c.b)("h3",{className:"g-type-display-4"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#lifecycle-and-state","aria-label":"lifecycle and state permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"lifecycle-and-state","aria-hidden":""})),"Lifecycle and State"),Object(c.b)("p",null,"A device plugin is long-lived. Nomad will ensure that one instance of the plugin is\nrunning. If the plugin crashes or otherwise terminates, Nomad will launch another\ninstance of it."),Object(c.b)("p",null,"However, unlike ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/internals/plugins/task-drivers"}),"task drivers"),", device plugins do not currently\nhave an interface for persisting state to the Nomad client. Instead, the device\nplugin API emphasizes fingerprinting devices and reporting their status. After\nhelping to provision a task with a scheduled device, a device plugin does not\nhave any responsibility (or ability) to monitor the task."),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#device-plugin-api","aria-label":"device plugin api permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"device-plugin-api","aria-hidden":""})),"Device Plugin API"),Object(c.b)("p",null,"The ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/internals/plugins/base"}),"base plugin")," must be implemented in addition to the following\nfunctions."),Object(c.b)("h3",{className:"g-type-display-4"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#fingerprint-context-context-chan-fingerprintresponse-error","aria-label":"fingerprint context context chan fingerprintresponse error permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"fingerprint-context-context-chan-fingerprintresponse-error","aria-hidden":""})),Object(c.b)("inlineCode",{parentName:"h3"},"Fingerprint(context.Context) (<-chan *FingerprintResponse, error)")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"Fingerprint")," ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad-skeleton-device-plugin/blob/v0.1.0/device/device.go#L159-L165"}),"function")," is called by the client when the plugin is started.\nIt allows the plugin to provide Nomad with a list of discovered devices, along with their\nattributes, for the purpose of scheduling workloads using devices.\nThe channel returned should immediately send an initial\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad/blob/v0.9.0/plugins/device/device.go#L37-L43"}),Object(c.b)("inlineCode",{parentName:"a"},"FingerprintResponse")),", then send periodic updates at\nan appropriate interval until the context is canceled."),Object(c.b)("p",null,"Each fingerprint response consists of either an error or a list of device groups.\nA device group is a list of detected devices that are identical for the purpose of\nscheduling; that is, they will have identical attributes."),Object(c.b)("h3",{className:"g-type-display-4"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#stats-context-context-time-duration-chan-statsresponse-error","aria-label":"stats context context time duration chan statsresponse error permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"stats-context-context-time-duration-chan-statsresponse-error","aria-hidden":""})),Object(c.b)("inlineCode",{parentName:"h3"},"Stats(context.Context, time.Duration) (<-chan *StatsResponse, error)")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"Stats")," ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad-skeleton-device-plugin/blob/v0.1.0/device/device.go#L169-L176"}),"function")," returns a channel on which the plugin should\nemit device statistics, at the specified interval, until either an error is\nencountered or the specified context is cancelled. The ",Object(c.b)("inlineCode",{parentName:"p"},"StatsReponse")," object\nallows ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad/blob/v0.9.0/plugins/shared/structs/stats.go#L33-L34"}),"dimensioned")," statistics to be returned for each device in a device group."),Object(c.b)("h3",{className:"g-type-display-4"},Object(c.b)("a",Object(n.a)({parentName:"h3"},{className:"__permalink-h",href:"#reserve-deviceids-string-containerreservation-error","aria-label":"reserve deviceids string containerreservation error permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h3"},{className:"__target-h",id:"reserve-deviceids-string-containerreservation-error","aria-hidden":""})),Object(c.b)("inlineCode",{parentName:"h3"},"Reserve(deviceIDs []string) (*ContainerReservation, error)")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"Reserve")," ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/hashicorp/nomad-skeleton-device-plugin/blob/v0.1.0/device/device.go#L189-L245"}),"function")," accepts a list of device IDs and returns the information\nnecessary for the client to make those devices available to a task. Currently,\nthe ",Object(c.b)("inlineCode",{parentName:"p"},"ContainerReservation")," object allows the plugin to specify environment\nvariables for the task, as well as a list of host devices and files to be mounted\ninto the task's filesystem. Any orchestration required to prepare the device for\nuse should also be performed in this function."))}h.isMDXComponent=!0},l5BU:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/internals/plugins/devices",function(){return a("i7RH")}])}},[["l5BU",0,1,2,4,3,5,6]]]);