/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// PeriodicConfig struct for PeriodicConfig
type PeriodicConfig struct {
	Enabled *bool `json:"Enabled,omitempty"`
	ProhibitOverlap *bool `json:"ProhibitOverlap,omitempty"`
	Spec *string `json:"Spec,omitempty"`
	SpecType *string `json:"SpecType,omitempty"`
	TimeZone *string `json:"TimeZone,omitempty"`
}

// NewPeriodicConfig instantiates a new PeriodicConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriodicConfig() *PeriodicConfig {
	this := PeriodicConfig{}
	return &this
}

// NewPeriodicConfigWithDefaults instantiates a new PeriodicConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeriodicConfigWithDefaults() *PeriodicConfig {
	this := PeriodicConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PeriodicConfig) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PeriodicConfig) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PeriodicConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetProhibitOverlap returns the ProhibitOverlap field value if set, zero value otherwise.
func (o *PeriodicConfig) GetProhibitOverlap() bool {
	if o == nil || o.ProhibitOverlap == nil {
		var ret bool
		return ret
	}
	return *o.ProhibitOverlap
}

// GetProhibitOverlapOk returns a tuple with the ProhibitOverlap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicConfig) GetProhibitOverlapOk() (*bool, bool) {
	if o == nil || o.ProhibitOverlap == nil {
		return nil, false
	}
	return o.ProhibitOverlap, true
}

// HasProhibitOverlap returns a boolean if a field has been set.
func (o *PeriodicConfig) HasProhibitOverlap() bool {
	if o != nil && o.ProhibitOverlap != nil {
		return true
	}

	return false
}

// SetProhibitOverlap gets a reference to the given bool and assigns it to the ProhibitOverlap field.
func (o *PeriodicConfig) SetProhibitOverlap(v bool) {
	o.ProhibitOverlap = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *PeriodicConfig) GetSpec() string {
	if o == nil || o.Spec == nil {
		var ret string
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicConfig) GetSpecOk() (*string, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *PeriodicConfig) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given string and assigns it to the Spec field.
func (o *PeriodicConfig) SetSpec(v string) {
	o.Spec = &v
}

// GetSpecType returns the SpecType field value if set, zero value otherwise.
func (o *PeriodicConfig) GetSpecType() string {
	if o == nil || o.SpecType == nil {
		var ret string
		return ret
	}
	return *o.SpecType
}

// GetSpecTypeOk returns a tuple with the SpecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicConfig) GetSpecTypeOk() (*string, bool) {
	if o == nil || o.SpecType == nil {
		return nil, false
	}
	return o.SpecType, true
}

// HasSpecType returns a boolean if a field has been set.
func (o *PeriodicConfig) HasSpecType() bool {
	if o != nil && o.SpecType != nil {
		return true
	}

	return false
}

// SetSpecType gets a reference to the given string and assigns it to the SpecType field.
func (o *PeriodicConfig) SetSpecType(v string) {
	o.SpecType = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *PeriodicConfig) GetTimeZone() string {
	if o == nil || o.TimeZone == nil {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeriodicConfig) GetTimeZoneOk() (*string, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *PeriodicConfig) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *PeriodicConfig) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o PeriodicConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["Enabled"] = o.Enabled
	}
	if o.ProhibitOverlap != nil {
		toSerialize["ProhibitOverlap"] = o.ProhibitOverlap
	}
	if o.Spec != nil {
		toSerialize["Spec"] = o.Spec
	}
	if o.SpecType != nil {
		toSerialize["SpecType"] = o.SpecType
	}
	if o.TimeZone != nil {
		toSerialize["TimeZone"] = o.TimeZone
	}
	return json.Marshal(toSerialize)
}

type NullablePeriodicConfig struct {
	value *PeriodicConfig
	isSet bool
}

func (v NullablePeriodicConfig) Get() *PeriodicConfig {
	return v.value
}

func (v *NullablePeriodicConfig) Set(val *PeriodicConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodicConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodicConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodicConfig(val *PeriodicConfig) *NullablePeriodicConfig {
	return &NullablePeriodicConfig{value: val, isSet: true}
}

func (v NullablePeriodicConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodicConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


