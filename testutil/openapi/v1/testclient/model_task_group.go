/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// TaskGroup struct for TaskGroup
type TaskGroup struct {
	Affinities *[]Affinity `json:"Affinities,omitempty"`
	Constraints *[]Constraint `json:"Constraints,omitempty"`
	Consul *Consul `json:"Consul,omitempty"`
	Count *int32 `json:"Count,omitempty"`
	EphemeralDisk *EphemeralDisk `json:"EphemeralDisk,omitempty"`
	Meta *map[string]string `json:"Meta,omitempty"`
	Migrate *MigrateStrategy `json:"Migrate,omitempty"`
	Name *string `json:"Name,omitempty"`
	Networks *[]NetworkResource `json:"Networks,omitempty"`
	ReschedulePolicy *ReschedulePolicy `json:"ReschedulePolicy,omitempty"`
	RestartPolicy *RestartPolicy `json:"RestartPolicy,omitempty"`
	Scaling *ScalingPolicy `json:"Scaling,omitempty"`
	Services *[]Service `json:"Services,omitempty"`
	ShutdownDelay *int64 `json:"ShutdownDelay,omitempty"`
	Spreads *[]Spread `json:"Spreads,omitempty"`
	StopAfterClientDisconnect *int64 `json:"StopAfterClientDisconnect,omitempty"`
	Tasks *[]Task `json:"Tasks,omitempty"`
	Update *UpdateStrategy `json:"Update,omitempty"`
	Volumes *map[string]VolumeRequest `json:"Volumes,omitempty"`
}

// NewTaskGroup instantiates a new TaskGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskGroup() *TaskGroup {
	this := TaskGroup{}
	return &this
}

// NewTaskGroupWithDefaults instantiates a new TaskGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskGroupWithDefaults() *TaskGroup {
	this := TaskGroup{}
	return &this
}

// GetAffinities returns the Affinities field value if set, zero value otherwise.
func (o *TaskGroup) GetAffinities() []Affinity {
	if o == nil || o.Affinities == nil {
		var ret []Affinity
		return ret
	}
	return *o.Affinities
}

// GetAffinitiesOk returns a tuple with the Affinities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetAffinitiesOk() (*[]Affinity, bool) {
	if o == nil || o.Affinities == nil {
		return nil, false
	}
	return o.Affinities, true
}

// HasAffinities returns a boolean if a field has been set.
func (o *TaskGroup) HasAffinities() bool {
	if o != nil && o.Affinities != nil {
		return true
	}

	return false
}

// SetAffinities gets a reference to the given []Affinity and assigns it to the Affinities field.
func (o *TaskGroup) SetAffinities(v []Affinity) {
	o.Affinities = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *TaskGroup) GetConstraints() []Constraint {
	if o == nil || o.Constraints == nil {
		var ret []Constraint
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetConstraintsOk() (*[]Constraint, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *TaskGroup) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []Constraint and assigns it to the Constraints field.
func (o *TaskGroup) SetConstraints(v []Constraint) {
	o.Constraints = &v
}

// GetConsul returns the Consul field value if set, zero value otherwise.
func (o *TaskGroup) GetConsul() Consul {
	if o == nil || o.Consul == nil {
		var ret Consul
		return ret
	}
	return *o.Consul
}

// GetConsulOk returns a tuple with the Consul field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetConsulOk() (*Consul, bool) {
	if o == nil || o.Consul == nil {
		return nil, false
	}
	return o.Consul, true
}

// HasConsul returns a boolean if a field has been set.
func (o *TaskGroup) HasConsul() bool {
	if o != nil && o.Consul != nil {
		return true
	}

	return false
}

// SetConsul gets a reference to the given Consul and assigns it to the Consul field.
func (o *TaskGroup) SetConsul(v Consul) {
	o.Consul = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *TaskGroup) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *TaskGroup) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *TaskGroup) SetCount(v int32) {
	o.Count = &v
}

// GetEphemeralDisk returns the EphemeralDisk field value if set, zero value otherwise.
func (o *TaskGroup) GetEphemeralDisk() EphemeralDisk {
	if o == nil || o.EphemeralDisk == nil {
		var ret EphemeralDisk
		return ret
	}
	return *o.EphemeralDisk
}

// GetEphemeralDiskOk returns a tuple with the EphemeralDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetEphemeralDiskOk() (*EphemeralDisk, bool) {
	if o == nil || o.EphemeralDisk == nil {
		return nil, false
	}
	return o.EphemeralDisk, true
}

// HasEphemeralDisk returns a boolean if a field has been set.
func (o *TaskGroup) HasEphemeralDisk() bool {
	if o != nil && o.EphemeralDisk != nil {
		return true
	}

	return false
}

// SetEphemeralDisk gets a reference to the given EphemeralDisk and assigns it to the EphemeralDisk field.
func (o *TaskGroup) SetEphemeralDisk(v EphemeralDisk) {
	o.EphemeralDisk = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *TaskGroup) GetMeta() map[string]string {
	if o == nil || o.Meta == nil {
		var ret map[string]string
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetMetaOk() (*map[string]string, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *TaskGroup) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]string and assigns it to the Meta field.
func (o *TaskGroup) SetMeta(v map[string]string) {
	o.Meta = &v
}

// GetMigrate returns the Migrate field value if set, zero value otherwise.
func (o *TaskGroup) GetMigrate() MigrateStrategy {
	if o == nil || o.Migrate == nil {
		var ret MigrateStrategy
		return ret
	}
	return *o.Migrate
}

// GetMigrateOk returns a tuple with the Migrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetMigrateOk() (*MigrateStrategy, bool) {
	if o == nil || o.Migrate == nil {
		return nil, false
	}
	return o.Migrate, true
}

// HasMigrate returns a boolean if a field has been set.
func (o *TaskGroup) HasMigrate() bool {
	if o != nil && o.Migrate != nil {
		return true
	}

	return false
}

// SetMigrate gets a reference to the given MigrateStrategy and assigns it to the Migrate field.
func (o *TaskGroup) SetMigrate(v MigrateStrategy) {
	o.Migrate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TaskGroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TaskGroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TaskGroup) SetName(v string) {
	o.Name = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *TaskGroup) GetNetworks() []NetworkResource {
	if o == nil || o.Networks == nil {
		var ret []NetworkResource
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetNetworksOk() (*[]NetworkResource, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *TaskGroup) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []NetworkResource and assigns it to the Networks field.
func (o *TaskGroup) SetNetworks(v []NetworkResource) {
	o.Networks = &v
}

// GetReschedulePolicy returns the ReschedulePolicy field value if set, zero value otherwise.
func (o *TaskGroup) GetReschedulePolicy() ReschedulePolicy {
	if o == nil || o.ReschedulePolicy == nil {
		var ret ReschedulePolicy
		return ret
	}
	return *o.ReschedulePolicy
}

// GetReschedulePolicyOk returns a tuple with the ReschedulePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetReschedulePolicyOk() (*ReschedulePolicy, bool) {
	if o == nil || o.ReschedulePolicy == nil {
		return nil, false
	}
	return o.ReschedulePolicy, true
}

// HasReschedulePolicy returns a boolean if a field has been set.
func (o *TaskGroup) HasReschedulePolicy() bool {
	if o != nil && o.ReschedulePolicy != nil {
		return true
	}

	return false
}

// SetReschedulePolicy gets a reference to the given ReschedulePolicy and assigns it to the ReschedulePolicy field.
func (o *TaskGroup) SetReschedulePolicy(v ReschedulePolicy) {
	o.ReschedulePolicy = &v
}

// GetRestartPolicy returns the RestartPolicy field value if set, zero value otherwise.
func (o *TaskGroup) GetRestartPolicy() RestartPolicy {
	if o == nil || o.RestartPolicy == nil {
		var ret RestartPolicy
		return ret
	}
	return *o.RestartPolicy
}

// GetRestartPolicyOk returns a tuple with the RestartPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetRestartPolicyOk() (*RestartPolicy, bool) {
	if o == nil || o.RestartPolicy == nil {
		return nil, false
	}
	return o.RestartPolicy, true
}

// HasRestartPolicy returns a boolean if a field has been set.
func (o *TaskGroup) HasRestartPolicy() bool {
	if o != nil && o.RestartPolicy != nil {
		return true
	}

	return false
}

// SetRestartPolicy gets a reference to the given RestartPolicy and assigns it to the RestartPolicy field.
func (o *TaskGroup) SetRestartPolicy(v RestartPolicy) {
	o.RestartPolicy = &v
}

// GetScaling returns the Scaling field value if set, zero value otherwise.
func (o *TaskGroup) GetScaling() ScalingPolicy {
	if o == nil || o.Scaling == nil {
		var ret ScalingPolicy
		return ret
	}
	return *o.Scaling
}

// GetScalingOk returns a tuple with the Scaling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetScalingOk() (*ScalingPolicy, bool) {
	if o == nil || o.Scaling == nil {
		return nil, false
	}
	return o.Scaling, true
}

// HasScaling returns a boolean if a field has been set.
func (o *TaskGroup) HasScaling() bool {
	if o != nil && o.Scaling != nil {
		return true
	}

	return false
}

// SetScaling gets a reference to the given ScalingPolicy and assigns it to the Scaling field.
func (o *TaskGroup) SetScaling(v ScalingPolicy) {
	o.Scaling = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *TaskGroup) GetServices() []Service {
	if o == nil || o.Services == nil {
		var ret []Service
		return ret
	}
	return *o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetServicesOk() (*[]Service, bool) {
	if o == nil || o.Services == nil {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *TaskGroup) HasServices() bool {
	if o != nil && o.Services != nil {
		return true
	}

	return false
}

// SetServices gets a reference to the given []Service and assigns it to the Services field.
func (o *TaskGroup) SetServices(v []Service) {
	o.Services = &v
}

// GetShutdownDelay returns the ShutdownDelay field value if set, zero value otherwise.
func (o *TaskGroup) GetShutdownDelay() int64 {
	if o == nil || o.ShutdownDelay == nil {
		var ret int64
		return ret
	}
	return *o.ShutdownDelay
}

// GetShutdownDelayOk returns a tuple with the ShutdownDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetShutdownDelayOk() (*int64, bool) {
	if o == nil || o.ShutdownDelay == nil {
		return nil, false
	}
	return o.ShutdownDelay, true
}

// HasShutdownDelay returns a boolean if a field has been set.
func (o *TaskGroup) HasShutdownDelay() bool {
	if o != nil && o.ShutdownDelay != nil {
		return true
	}

	return false
}

// SetShutdownDelay gets a reference to the given int64 and assigns it to the ShutdownDelay field.
func (o *TaskGroup) SetShutdownDelay(v int64) {
	o.ShutdownDelay = &v
}

// GetSpreads returns the Spreads field value if set, zero value otherwise.
func (o *TaskGroup) GetSpreads() []Spread {
	if o == nil || o.Spreads == nil {
		var ret []Spread
		return ret
	}
	return *o.Spreads
}

// GetSpreadsOk returns a tuple with the Spreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetSpreadsOk() (*[]Spread, bool) {
	if o == nil || o.Spreads == nil {
		return nil, false
	}
	return o.Spreads, true
}

// HasSpreads returns a boolean if a field has been set.
func (o *TaskGroup) HasSpreads() bool {
	if o != nil && o.Spreads != nil {
		return true
	}

	return false
}

// SetSpreads gets a reference to the given []Spread and assigns it to the Spreads field.
func (o *TaskGroup) SetSpreads(v []Spread) {
	o.Spreads = &v
}

// GetStopAfterClientDisconnect returns the StopAfterClientDisconnect field value if set, zero value otherwise.
func (o *TaskGroup) GetStopAfterClientDisconnect() int64 {
	if o == nil || o.StopAfterClientDisconnect == nil {
		var ret int64
		return ret
	}
	return *o.StopAfterClientDisconnect
}

// GetStopAfterClientDisconnectOk returns a tuple with the StopAfterClientDisconnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetStopAfterClientDisconnectOk() (*int64, bool) {
	if o == nil || o.StopAfterClientDisconnect == nil {
		return nil, false
	}
	return o.StopAfterClientDisconnect, true
}

// HasStopAfterClientDisconnect returns a boolean if a field has been set.
func (o *TaskGroup) HasStopAfterClientDisconnect() bool {
	if o != nil && o.StopAfterClientDisconnect != nil {
		return true
	}

	return false
}

// SetStopAfterClientDisconnect gets a reference to the given int64 and assigns it to the StopAfterClientDisconnect field.
func (o *TaskGroup) SetStopAfterClientDisconnect(v int64) {
	o.StopAfterClientDisconnect = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *TaskGroup) GetTasks() []Task {
	if o == nil || o.Tasks == nil {
		var ret []Task
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetTasksOk() (*[]Task, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *TaskGroup) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []Task and assigns it to the Tasks field.
func (o *TaskGroup) SetTasks(v []Task) {
	o.Tasks = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *TaskGroup) GetUpdate() UpdateStrategy {
	if o == nil || o.Update == nil {
		var ret UpdateStrategy
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetUpdateOk() (*UpdateStrategy, bool) {
	if o == nil || o.Update == nil {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *TaskGroup) HasUpdate() bool {
	if o != nil && o.Update != nil {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given UpdateStrategy and assigns it to the Update field.
func (o *TaskGroup) SetUpdate(v UpdateStrategy) {
	o.Update = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *TaskGroup) GetVolumes() map[string]VolumeRequest {
	if o == nil || o.Volumes == nil {
		var ret map[string]VolumeRequest
		return ret
	}
	return *o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskGroup) GetVolumesOk() (*map[string]VolumeRequest, bool) {
	if o == nil || o.Volumes == nil {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *TaskGroup) HasVolumes() bool {
	if o != nil && o.Volumes != nil {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given map[string]VolumeRequest and assigns it to the Volumes field.
func (o *TaskGroup) SetVolumes(v map[string]VolumeRequest) {
	o.Volumes = &v
}

func (o TaskGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Affinities != nil {
		toSerialize["Affinities"] = o.Affinities
	}
	if o.Constraints != nil {
		toSerialize["Constraints"] = o.Constraints
	}
	if o.Consul != nil {
		toSerialize["Consul"] = o.Consul
	}
	if o.Count != nil {
		toSerialize["Count"] = o.Count
	}
	if o.EphemeralDisk != nil {
		toSerialize["EphemeralDisk"] = o.EphemeralDisk
	}
	if o.Meta != nil {
		toSerialize["Meta"] = o.Meta
	}
	if o.Migrate != nil {
		toSerialize["Migrate"] = o.Migrate
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Networks != nil {
		toSerialize["Networks"] = o.Networks
	}
	if o.ReschedulePolicy != nil {
		toSerialize["ReschedulePolicy"] = o.ReschedulePolicy
	}
	if o.RestartPolicy != nil {
		toSerialize["RestartPolicy"] = o.RestartPolicy
	}
	if o.Scaling != nil {
		toSerialize["Scaling"] = o.Scaling
	}
	if o.Services != nil {
		toSerialize["Services"] = o.Services
	}
	if o.ShutdownDelay != nil {
		toSerialize["ShutdownDelay"] = o.ShutdownDelay
	}
	if o.Spreads != nil {
		toSerialize["Spreads"] = o.Spreads
	}
	if o.StopAfterClientDisconnect != nil {
		toSerialize["StopAfterClientDisconnect"] = o.StopAfterClientDisconnect
	}
	if o.Tasks != nil {
		toSerialize["Tasks"] = o.Tasks
	}
	if o.Update != nil {
		toSerialize["Update"] = o.Update
	}
	if o.Volumes != nil {
		toSerialize["Volumes"] = o.Volumes
	}
	return json.Marshal(toSerialize)
}

type NullableTaskGroup struct {
	value *TaskGroup
	isSet bool
}

func (v NullableTaskGroup) Get() *TaskGroup {
	return v.value
}

func (v *NullableTaskGroup) Set(val *TaskGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskGroup(val *TaskGroup) *NullableTaskGroup {
	return &NullableTaskGroup{value: val, isSet: true}
}

func (v NullableTaskGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


