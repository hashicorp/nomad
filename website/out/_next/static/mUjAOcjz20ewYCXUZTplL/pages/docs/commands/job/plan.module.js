(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{mAp0:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/commands/job/plan",function(){return n("wIv+")}])},"wIv+":function(e,a,n){"use strict";n.r(a),n.d(a,"default",(function(){return p}));var t=n("wx14"),i=n("Ff2n"),l=n("q1tI"),c=n.n(l),r=n("7ljp"),s=n("j1un"),b=(c.a.createElement,{}),o=Object(s.a)({layout:"docs",page_title:"Commands: job plan",sidebar_title:"plan",description:"The job plan command is used to dry-run a job update to determine its effects.\n",__resourcePath:"docs/commands/job/plan.mdx",__scans:{}});function p(e){var{components:a}=e,n=Object(i.a)(e,["components"]);return Object(r.b)(o,Object(t.a)({},b,n,{components:a,mdxType:"MDXLayout"}),Object(r.b)("h1",{className:"g-type-display-2"},Object(r.b)("a",Object(t.a)({parentName:"h1"},{className:"__permalink-h",href:"#command-job-plan","aria-label":"command job plan permalink"}),"\xbb"),Object(r.b)("a",Object(t.a)({parentName:"h1"},{className:"__target-h",id:"command-job-plan","aria-hidden":""})),"Command: job plan"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Alias: ",Object(r.b)("inlineCode",{parentName:"strong"},"nomad plan"))),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"job plan")," command can be used to invoke the scheduler in a dry-run mode\nwith new jobs or when updating existing jobs to determine what would happen if\nthe job is submitted. Job files must conform to the ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/job-specification"}),"job specification")," format."),Object(r.b)("h2",{className:"g-type-display-3"},Object(r.b)("a",Object(t.a)({parentName:"h2"},{className:"__permalink-h",href:"#usage","aria-label":"usage permalink"}),"\xbb"),Object(r.b)("a",Object(t.a)({parentName:"h2"},{className:"__target-h",id:"usage","aria-hidden":""})),"Usage"),Object(r.b)("pre",{className:"language-plaintext"},Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-plaintext"}),"nomad job plan [options] <path>\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"job plan")," command requires a single argument, specifying the path to a file\ncontaining an HCL ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/job-specification"}),"job specification"),'. This file will be read and the resulting\nparsed job will be validated. If the supplied path is "-", the job file is read\nfrom STDIN. Otherwise it is read from the file at the supplied path or\ndownloaded and read from URL specified. Nomad downloads the job file using\n',Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/hashicorp/go-getter"}),Object(r.b)("inlineCode",{parentName:"a"},"go-getter"))," and supports ",Object(r.b)("inlineCode",{parentName:"p"},"go-getter")," syntax."),Object(r.b)("p",null,"Plan invokes a dry-run of the scheduler to determine the effects of submitting\neither a new or updated version of a job. The plan will not result in any\nchanges to the cluster but gives insight into whether the job could be run\nsuccessfully and how it would affect existing allocations."),Object(r.b)("p",null,"A job modify index is returned with the plan. This value can be used when\nsubmitting the job using ",Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/commands/job/run#check-index"}),Object(r.b)("inlineCode",{parentName:"a"},"nomad job run -check-index")),", which will check that\nthe job was not modified between the plan and run command before invoking the\nscheduler. This ensures the job has not been modified since the plan."),Object(r.b)("p",null,"A structured diff between the local and remote job is displayed to\ngive insight into what the scheduler will attempt to do and why."),Object(r.b)("p",null,"If the job has specified the region, the ",Object(r.b)("inlineCode",{parentName:"p"},"-region")," flag and ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_REGION"),"\nenvironment variable are overridden and the job's region is used."),Object(r.b)("p",null,"Plan will return one of the following exit codes:"),Object(r.b)("ul",null,Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),"0: No allocations created or destroyed."),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),"1: Allocations created or destroyed."),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),"255: Error determining plan results.")),Object(r.b)("h2",{className:"g-type-display-3"},Object(r.b)("a",Object(t.a)({parentName:"h2"},{className:"__permalink-h",href:"#general-options","aria-label":"general options permalink"}),"\xbb"),Object(r.b)("a",Object(t.a)({parentName:"h2"},{className:"__target-h",id:"general-options","aria-hidden":""})),"General Options"),Object(r.b)("ul",null,Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"address",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#address","aria-label":"address permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-address=<addr>")),": The address of the Nomad server. Overrides the ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_ADDR"),"\nenvironment variable if set. Defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"http://127.0.0.1:4646"),".")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"region",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#region","aria-label":"region permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-region=<region>")),": The region of the Nomad server to forward commands to.\nOverrides the ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_REGION")," environment variable if set. Defaults to the\nAgent's local region.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"namespace",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#namespace","aria-label":"namespace permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-namespace=<namespace>")),": The target namespace for queries and actions bound\nto a namespace. Overrides the NOMAD_NAMESPACE environment variable if set.\nIf set to '*', job and alloc subcommands query all namespacecs authorized to\nuser. Defaults to the \"default\" namespace.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"no-color",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#no-color","aria-label":"no color permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-no-color")),": Disables colored command output. Alternatively,\n",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_CLI_NO_COLOR")," may be set.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"ca-cert",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#ca-cert","aria-label":"ca cert permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-ca-cert=<path>")),": Path to a PEM encoded CA cert file to use to verify the\nNomad server SSL certificate. Overrides the ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_CACERT")," environment\nvariable if set.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"ca-path",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#ca-path","aria-label":"ca path permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-ca-path=<path>")),": Path to a directory of PEM encoded CA cert files to verify\nthe Nomad server SSL certificate. If both ",Object(r.b)("inlineCode",{parentName:"p"},"-ca-cert")," and ",Object(r.b)("inlineCode",{parentName:"p"},"-ca-path")," are\nspecified, ",Object(r.b)("inlineCode",{parentName:"p"},"-ca-cert")," is used. Overrides the ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_CAPATH")," environment\nvariable if set.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"client-cert",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#client-cert","aria-label":"client cert permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-client-cert=<path>")),": Path to a PEM encoded client certificate for TLS\nauthentication to the Nomad server. Must also specify ",Object(r.b)("inlineCode",{parentName:"p"},"-client-key"),". Overrides\nthe ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_CLIENT_CERT")," environment variable if set.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"client-key",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#client-key","aria-label":"client key permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-client-key=<path>")),": Path to an unencrypted PEM encoded private key matching\nthe client certificate from ",Object(r.b)("inlineCode",{parentName:"p"},"-client-cert"),". Overrides the ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_CLIENT_KEY"),"\nenvironment variable if set.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"tls-server-name",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#tls-server-name","aria-label":"tls server name permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-tls-server-name=<value>")),": The server name to use as the SNI host when connecting\nvia TLS. Overrides the ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_TLS_SERVER_NAME")," environment variable if set.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"tls-skip-verify",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#tls-skip-verify","aria-label":"tls skip verify permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-tls-skip-verify")),": Do not verify TLS certificate. This is highly not\nrecommended. Verification will also be skipped if ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_SKIP_VERIFY")," is set.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"token",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#token","aria-label":"token permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-token")),": The SecretID of an ACL token to use to authenticate API requests with.\nOverrides the ",Object(r.b)("inlineCode",{parentName:"p"},"NOMAD_TOKEN")," environment variable if set."))),Object(r.b)("h2",{className:"g-type-display-3"},Object(r.b)("a",Object(t.a)({parentName:"h2"},{className:"__permalink-h",href:"#plan-options","aria-label":"plan options permalink"}),"\xbb"),Object(r.b)("a",Object(t.a)({parentName:"h2"},{className:"__target-h",id:"plan-options","aria-hidden":""})),"Plan Options"),Object(r.b)("ul",null,Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"diff",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#diff","aria-label":"diff permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-diff")),": Determines whether the diff between the remote job and planned job is\nshown. Defaults to true.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"policy-override",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#policy-override","aria-label":"policy override permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-policy-override")),": Sets the flag to force override any soft mandatory\nSentinel policies.")),Object(r.b)("li",Object(t.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(r.b)("a",Object(t.a)({parentName:"li"},{id:"verbose",className:"__target-lic","aria-hidden":""})),Object(r.b)("p",{parentName:"li"},Object(r.b)("a",Object(t.a)({parentName:"p"},{href:"#verbose","aria-label":"verbose permalink",className:"__permalink-lic"}),Object(r.b)("inlineCode",{parentName:"a"},"-verbose")),": Increase diff verbosity."))),Object(r.b)("h2",{className:"g-type-display-3"},Object(r.b)("a",Object(t.a)({parentName:"h2"},{className:"__permalink-h",href:"#examples","aria-label":"examples permalink"}),"\xbb"),Object(r.b)("a",Object(t.a)({parentName:"h2"},{className:"__target-h",id:"examples","aria-hidden":""})),"Examples"),Object(r.b)("p",null,"Plan a new job that has not been previously submitted:"),Object(r.b)("pre",{className:"language-shell-session"},Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-shell-session"}),Object(r.b)("span",Object(t.a)({parentName:"code"},{className:"token command"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job plan job1.nomad")),"\n",Object(r.b)("span",Object(t.a)({parentName:"code"},{className:"token output"}),'nomad job plan example.nomad\n+ Job: "example"\n+ Task Group: "cache" (1 create)\n  + Task: "redis" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 example.nomad\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan\'s results are\npotentially invalid.\n'))),Object(r.b)("p",null,"Increase the count of an existing without sufficient cluster capacity:"),Object(r.b)("pre",{className:"language-shell-session"},Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-shell-session"}),Object(r.b)("span",Object(t.a)({parentName:"code"},{className:"token command"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job plan example.nomad")),"\n",Object(r.b)("span",Object(t.a)({parentName:"code"},{className:"token output"}),'+/- Job: "example"\n+/- Task Group: "cache" (7 create, 1 in-place update)\n  +/- Count: "1" => "8" (forces create)\n      Task: "redis"\n\nScheduler dry-run:\n- WARNING: Failed to place all allocations.\n  Task Group "cache" (failed to place 3 allocations):\n    * Resources exhausted on 1 nodes\n    * Dimension "cpu" exhausted on 1 nodes\n\nJob Modify Index: 15\nTo submit the job with version verification run:\n\nnomad job run -check-index 15 example.nomad\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan\'s results are\npotentially invalid.\n'))),Object(r.b)("p",null,"Update an existing job such that it would cause a rolling update:"),Object(r.b)("pre",{className:"language-shell-session"},Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-shell-session"}),Object(r.b)("span",Object(t.a)({parentName:"code"},{className:"token command"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job plan example.nomad")),"\n",Object(r.b)("span",Object(t.a)({parentName:"code"},{className:"token output"}),'+/- Job: "example"\n+/- Task Group: "cache" (3 create/destroy update)\n  +/- Task: "redis" (forces create/destroy update)\n    +/- Config {\n      +/- image:           "redis:2.8" => "redis:3.2"\n          port_map[0][db]: "6379"\n    }\n\nScheduler dry-run:\n- All tasks successfully allocated.\n- Rolling update, next evaluation will be in 10s.\n\nJob Modify Index: 7\nTo submit the job with version verification run:\n\nnomad job run -check-index 7 example.nomad\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan\'s results are\npotentially invalid.\n'))),Object(r.b)("p",null,"Add a task to the task group using verbose mode:"),Object(r.b)("pre",{className:"language-shell-session"},Object(r.b)("code",Object(t.a)({parentName:"pre"},{className:"language-shell-session"}),Object(r.b)("span",Object(t.a)({parentName:"code"},{className:"token command"}),Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(r.b)("span",Object(t.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad job plan -verbose example.nomad")),"\n",Object(r.b)("span",Object(t.a)({parentName:"code"},{className:"token output"}),'+/- Job: "example"\n+/- Task Group: "cache" (3 create/destroy update)\n  + Task: "my-website" (forces create/destroy update)\n    + Driver:      "docker"\n    + KillTimeout: "5000000000"\n    + Config {\n      + image:            "node:6.2"\n      + port_map[0][web]: "80"\n    }\n    + Resources {\n      + CPU:      "500"\n      + DiskMB:   "300"\n      + MemoryMB: "256"\n      + Network {\n        + MBits: "10"\n        + Dynamic Port {\n          + Label: "web"\n        }\n      }\n    }\n    + LogConfig {\n      + MaxFileSizeMB: "10"\n      + MaxFiles:      "10"\n    }\n    + Service {\n      + Name:      "website"\n      + PortLabel: "web"\n      + Check {\n          Command:  ""\n        + Interval: "10000000000"\n        + Name:     "alive"\n          Path:     ""\n          Protocol: ""\n        + Timeout:  "2000000000"\n        + Type:     "tcp"\n      }\n    }\n    Task: "redis"\n\nScheduler dry-run:\n- All tasks successfully allocated.\n- Rolling update, next evaluation will be in 10s.\n\nJob Modify Index: 7\nTo submit the job with version verification run:\n\nnomad job run -check-index 7 example.nomad\n\nWhen running the job with the check-index flag, the job will only be run if the\njob modify index given matches the server-side version. If the index has\nchanged, another user has modified the job and the plan\'s results are\npotentially invalid.\n'))))}p.isMDXComponent=!0}},[["mAp0",0,1,2,4,3,5,6]]]);