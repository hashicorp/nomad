/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// Affinity struct for Affinity
type Affinity struct {
	LTarget *string `json:"LTarget,omitempty"`
	Operand *string `json:"Operand,omitempty"`
	RTarget *string `json:"RTarget,omitempty"`
	Weight *int32 `json:"Weight,omitempty"`
}

// NewAffinity instantiates a new Affinity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAffinity() *Affinity {
	this := Affinity{}
	return &this
}

// NewAffinityWithDefaults instantiates a new Affinity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAffinityWithDefaults() *Affinity {
	this := Affinity{}
	return &this
}

// GetLTarget returns the LTarget field value if set, zero value otherwise.
func (o *Affinity) GetLTarget() string {
	if o == nil || o.LTarget == nil {
		var ret string
		return ret
	}
	return *o.LTarget
}

// GetLTargetOk returns a tuple with the LTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Affinity) GetLTargetOk() (*string, bool) {
	if o == nil || o.LTarget == nil {
		return nil, false
	}
	return o.LTarget, true
}

// HasLTarget returns a boolean if a field has been set.
func (o *Affinity) HasLTarget() bool {
	if o != nil && o.LTarget != nil {
		return true
	}

	return false
}

// SetLTarget gets a reference to the given string and assigns it to the LTarget field.
func (o *Affinity) SetLTarget(v string) {
	o.LTarget = &v
}

// GetOperand returns the Operand field value if set, zero value otherwise.
func (o *Affinity) GetOperand() string {
	if o == nil || o.Operand == nil {
		var ret string
		return ret
	}
	return *o.Operand
}

// GetOperandOk returns a tuple with the Operand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Affinity) GetOperandOk() (*string, bool) {
	if o == nil || o.Operand == nil {
		return nil, false
	}
	return o.Operand, true
}

// HasOperand returns a boolean if a field has been set.
func (o *Affinity) HasOperand() bool {
	if o != nil && o.Operand != nil {
		return true
	}

	return false
}

// SetOperand gets a reference to the given string and assigns it to the Operand field.
func (o *Affinity) SetOperand(v string) {
	o.Operand = &v
}

// GetRTarget returns the RTarget field value if set, zero value otherwise.
func (o *Affinity) GetRTarget() string {
	if o == nil || o.RTarget == nil {
		var ret string
		return ret
	}
	return *o.RTarget
}

// GetRTargetOk returns a tuple with the RTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Affinity) GetRTargetOk() (*string, bool) {
	if o == nil || o.RTarget == nil {
		return nil, false
	}
	return o.RTarget, true
}

// HasRTarget returns a boolean if a field has been set.
func (o *Affinity) HasRTarget() bool {
	if o != nil && o.RTarget != nil {
		return true
	}

	return false
}

// SetRTarget gets a reference to the given string and assigns it to the RTarget field.
func (o *Affinity) SetRTarget(v string) {
	o.RTarget = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *Affinity) GetWeight() int32 {
	if o == nil || o.Weight == nil {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Affinity) GetWeightOk() (*int32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *Affinity) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *Affinity) SetWeight(v int32) {
	o.Weight = &v
}

func (o Affinity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LTarget != nil {
		toSerialize["LTarget"] = o.LTarget
	}
	if o.Operand != nil {
		toSerialize["Operand"] = o.Operand
	}
	if o.RTarget != nil {
		toSerialize["RTarget"] = o.RTarget
	}
	if o.Weight != nil {
		toSerialize["Weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableAffinity struct {
	value *Affinity
	isSet bool
}

func (v NullableAffinity) Get() *Affinity {
	return v.value
}

func (v *NullableAffinity) Set(val *Affinity) {
	v.value = val
	v.isSet = true
}

func (v NullableAffinity) IsSet() bool {
	return v.isSet
}

func (v *NullableAffinity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAffinity(val *Affinity) *NullableAffinity {
	return &NullableAffinity{value: val, isSet: true}
}

func (v NullableAffinity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAffinity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


