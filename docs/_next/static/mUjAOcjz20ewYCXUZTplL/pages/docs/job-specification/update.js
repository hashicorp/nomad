(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{HY1p:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/job-specification/update",function(){return t("f0ZX")}])},f0ZX:function(e,a,t){"use strict";t.r(a),t.d(a,"default",(function(){return d}));var n,c=t("wx14"),s=t("Ff2n"),p=t("q1tI"),b=t.n(p),o=t("7ljp"),l=t("j1un"),r=(b.a.createElement,n="Placement",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),Object(o.b)("div",e)}),m={},i=Object(l.a)({layout:"docs",page_title:"update Stanza - Job Specification",sidebar_title:"update",description:'The "update" stanza specifies the group\'s update strategy. The update strategy\nis used to control things like rolling upgrades and canary deployments. If\nomitted, rolling updates and canaries are disabled.',__resourcePath:"docs/job-specification/update.mdx",__scans:{}});function d(e){var a=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)(i,Object(c.a)({},m,t,{components:a,mdxType:"MDXLayout"}),Object(o.b)("h1",{className:"g-type-display-2"},Object(o.b)("a",Object(c.a)({parentName:"h1"},{className:"__permalink-h",href:"#update-stanza","aria-label":"update stanza permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h1"},{className:"__target-h",id:"update-stanza","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h1"},"update")," Stanza"),Object(o.b)(r,{groups:[["job","update"],["job","group","update"]],mdxType:"Placement"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"update")," stanza specifies the group's update strategy. The update strategy\nis used to control things like ",Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"https://learn.hashicorp.com/nomad/update-strategies/rolling-upgrades",title:"Nomad Rolling Upgrades"}),"rolling upgrades")," and ",Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"https://learn.hashicorp.com/nomad/update-strategies/blue-green-and-canary-deployments",title:"Nomad Canary Deployments"}),"canary\ndeployments"),". If omitted, rolling updates and canaries are disabled. If\nspecified at the job level, the configuration will apply to all groups within\nthe job. If multiple ",Object(o.b)("inlineCode",{parentName:"p"},"update")," stanzas are specified, they are merged with the\ngroup stanza taking the highest precedence and then the job."),Object(o.b)("pre",{className:"language-hcl"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),"job ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"docs"')," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel"),"      ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"3"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"health_check"),"      ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"checks"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"min_healthy_time"),"  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"10s"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"healthy_deadline"),"  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"5m"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"progress_deadline")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"10m"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"auto_revert"),"       ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token boolean"}),"true"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"auto_promote"),"      ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token boolean"}),"true"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"canary"),"            ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"1"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"stagger"),"           ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"30s"'),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.b)("div",{className:"alert alert-warning g-type-body",role:"alert"},Object(o.b)("p",{parentName:"div"},"For ",Object(o.b)("inlineCode",{parentName:"p"},"system")," jobs, only ",Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#max_parallel"}),Object(o.b)("inlineCode",{parentName:"a"},"max_parallel"))," and\n",Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#stagger"}),Object(o.b)("inlineCode",{parentName:"a"},"stagger"))," are enforced. The job is updated at a rate of\n",Object(o.b)("inlineCode",{parentName:"p"},"max_parallel"),", waiting ",Object(o.b)("inlineCode",{parentName:"p"},"stagger")," duration before the next set of updates.\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"system")," scheduler will be updated to support the new ",Object(o.b)("inlineCode",{parentName:"p"},"update")," stanza in\na future release.")),Object(o.b)("h2",{className:"g-type-display-3"},Object(o.b)("a",Object(c.a)({parentName:"h2"},{className:"__permalink-h",href:"#update-parameters","aria-label":"update parameters permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h2"},{className:"__target-h",id:"update-parameters","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h2"},"update")," Parameters"),Object(o.b)("ul",null,Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"max_parallel",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#max_parallel","aria-label":"max_parallel permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"max_parallel"))," ",Object(o.b)("inlineCode",{parentName:"p"},"(int: 1)")," - Specifies the number of allocations within a task group that can be\nupdated at the same time. The task groups themselves are updated in parallel."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"max_parallel-0",className:"__target-lic","aria-hidden":""})),Object(o.b)("a",Object(c.a)({parentName:"li"},{href:"#max_parallel-0","aria-label":"max_parallel 0 permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"max_parallel = 0"))," - Specifies that the allocation should use forced updates instead of deployments"))),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"health_check",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#health_check","aria-label":"health_check permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"health_check"))," ",Object(o.b)("inlineCode",{parentName:"p"},'(string: "checks")')," - Specifies the mechanism in which\nallocations health is determined. The potential values are:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},'"checks" - Specifies that the allocation should be considered healthy when\nall of its tasks are running and their associated ',Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"/docs/job-specification/service#check-parameters",title:"Nomad check Job Specification"}),"checks"),' are healthy,\nand unhealthy if any of the tasks fail or not all checks become healthy.\nThis is a superset of "task_states" mode.')),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},'"task_states" - Specifies that the allocation should be considered healthy when\nall its tasks are running and unhealthy if tasks fail.')),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},'"manual" - Specifies that Nomad should not automatically determine health\nand that the operator will specify allocation health using the ',Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"/api-docs/deployments#set-allocation-health-in-deployment"}),"HTTP\nAPI"),".")))),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"min_healthy_time",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#min_healthy_time","aria-label":"min_healthy_time permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"min_healthy_time"))," ",Object(o.b)("inlineCode",{parentName:"p"},'(string: "10s")'),' - Specifies the minimum time the\nallocation must be in the healthy state before it is marked as healthy and\nunblocks further allocations from being updated. This is specified using a\nlabel suffix like "30s" or "15m".')),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"healthy_deadline",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#healthy_deadline","aria-label":"healthy_deadline permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"healthy_deadline"))," ",Object(o.b)("inlineCode",{parentName:"p"},'(string: "5m")'),' - Specifies the deadline in which the\nallocation must be marked as healthy after which the allocation is\nautomatically transitioned to unhealthy. This is specified using a label suffix\nlike "2m" or "1h". If ',Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#progress_deadline"}),Object(o.b)("inlineCode",{parentName:"a"},"progress_deadline"))," is non-zero, it\nmust be greater than ",Object(o.b)("inlineCode",{parentName:"p"},"healthy_deadline"),". Otherwise the ",Object(o.b)("inlineCode",{parentName:"p"},"progress_deadline")," may\nfail a deployment before an allocation reaches its ",Object(o.b)("inlineCode",{parentName:"p"},"healthy_deadline"),".")),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"progress_deadline",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#progress_deadline","aria-label":"progress_deadline permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"progress_deadline"))," ",Object(o.b)("inlineCode",{parentName:"p"},'(string: "10m")')," - Specifies the deadline in which an\nallocation must be marked as healthy. The deadline begins when the first\nallocation for the deployment is created and is reset whenever an allocation\nas part of the deployment transitions to a healthy state. If no allocation\ntransitions to the healthy state before the progress deadline, the deployment\nis marked as failed. If the ",Object(o.b)("inlineCode",{parentName:"p"},"progress_deadline")," is set to ",Object(o.b)("inlineCode",{parentName:"p"},"0"),', the first\nallocation to be marked as unhealthy causes the deployment to fail. This is\nspecified using a label suffix like "2m" or "1h".')),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"auto_revert",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#auto_revert","aria-label":"auto_revert permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"auto_revert"))," ",Object(o.b)("inlineCode",{parentName:"p"},"(bool: false)")," - Specifies if the job should auto-revert to the\nlast stable job on deployment failure. A job is marked as stable if all the\nallocations as part of its deployment were marked healthy.")),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"auto_promote",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#auto_promote","aria-label":"auto_promote permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"auto_promote"))," ",Object(o.b)("inlineCode",{parentName:"p"},"(bool: false)")," - Specifies if the job should auto-promote to the\ncanary version when all canaries become healthy during a deployment. Defaults to\nfalse which means canaries must be manually updated with the ",Object(o.b)("inlineCode",{parentName:"p"},"nomad deployment promote"),"\ncommand.")),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"canary",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#canary","aria-label":"canary permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"canary"))," ",Object(o.b)("inlineCode",{parentName:"p"},"(int: 0)")," - Specifies that changes to the job that would result in\ndestructive updates should create the specified number of canaries without\nstopping any previous allocations. Once the operator determines the canaries\nare healthy, they can be promoted which unblocks a rolling update of the\nremaining allocations at a rate of ",Object(o.b)("inlineCode",{parentName:"p"},"max_parallel"),".")),Object(o.b)("li",Object(c.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("a",Object(c.a)({parentName:"li"},{id:"stagger",className:"__target-lic","aria-hidden":""})),Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#stagger","aria-label":"stagger permalink",className:"__permalink-lic"}),Object(o.b)("inlineCode",{parentName:"a"},"stagger"))," ",Object(o.b)("inlineCode",{parentName:"p"},'(string: "30s")')," - Specifies the delay between each set of\n",Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"#max_parallel"}),Object(o.b)("inlineCode",{parentName:"a"},"max_parallel"))," updates when updating system jobs. This\nsetting no longer applies to service jobs which use\n",Object(o.b)("a",Object(c.a)({parentName:"p"},{href:"https://learn.hashicorp.com/nomad/update-strategies",title:"Nomad Update Strategies"}),"deployments.")))),Object(o.b)("h2",{className:"g-type-display-3"},Object(o.b)("a",Object(c.a)({parentName:"h2"},{className:"__permalink-h",href:"#update-examples","aria-label":"update examples permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h2"},{className:"__target-h",id:"update-examples","aria-hidden":""})),Object(o.b)("inlineCode",{parentName:"h2"},"update")," Examples"),Object(o.b)("p",null,"The following examples only show the ",Object(o.b)("inlineCode",{parentName:"p"},"update")," stanzas. Remember that the\n",Object(o.b)("inlineCode",{parentName:"p"},"update")," stanza is only valid in the placements listed above."),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#parallel-upgrades-based-on-checks","aria-label":"parallel upgrades based on checks permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"parallel-upgrades-based-on-checks","aria-hidden":""})),"Parallel Upgrades Based on Checks"),Object(o.b)("p",null,"This example performs 3 upgrades at a time and requires the allocations be\nhealthy for a minimum of 30 seconds before continuing the rolling upgrade. Each\nallocation is given at most 2 minutes to determine its health before it is\nautomatically marked unhealthy and the deployment is failed."),Object(o.b)("pre",{className:"language-hcl"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"3"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"min_healthy_time")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"30s"'),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"healthy_deadline")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"2m"'),"\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#parallel-upgrades-based-on-task-state","aria-label":"parallel upgrades based on task state permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"parallel-upgrades-based-on-task-state","aria-hidden":""})),"Parallel Upgrades Based on Task State"),Object(o.b)("p",null,"This example is the same as the last but only requires the tasks to be healthy\nand does not require registered service checks to be healthy."),Object(o.b)("pre",{className:"language-hcl"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"3"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"min_healthy_time")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"30s"'),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"healthy_deadline")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"2m"'),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"health_check"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"task_states"'),"\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#canary-upgrades","aria-label":"canary upgrades permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"canary-upgrades","aria-hidden":""})),"Canary Upgrades"),Object(o.b)("p",null,"This example creates a canary allocation when the job is updated. The canary is\ncreated without stopping any previous allocations from the job and allows\noperators to determine if the new version of the job should be rolled out."),Object(o.b)("pre",{className:"language-hcl"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"canary"),"       ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"1"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"3"),"\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.b)("p",null,"Once the operator has determined the new job should be deployed, the deployment\ncan be promoted and a rolling update will occur performing 3 updates at a time\nuntil the remainder of the groups allocations have been rolled to the new\nversion."),Object(o.b)("pre",{className:"language-text"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-text"}),"# Promote the canaries for the job.\n$ nomad job promote <job-id>\n")),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#blue-green-upgrades","aria-label":"blue green upgrades permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"blue-green-upgrades","aria-hidden":""})),"Blue/Green Upgrades"),Object(o.b)("p",null,"By setting the canary count equal to that of the task group, blue/green\ndeployments can be achieved. When a new version of the job is submitted, instead\nof doing a rolling upgrade of the existing allocations, the new version of the\ngroup is deployed along side the existing set. While this duplicates the\nresources required during the upgrade process, it allows very safe deployments\nas the original version of the group is untouched."),Object(o.b)("pre",{className:"language-hcl"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),"group ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"api-server"')," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"count")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"3"),"\n\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"canary"),"       ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"3"),"\n      ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"3"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n    ...\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.b)("p",null,"Once the operator is satisfied that the new version of the group is stable, the\ngroup can be promoted which will result in all allocations for the old versions\nof the group to be shutdown. This completes the upgrade from blue to green, or\nold to new version."),Object(o.b)("pre",{className:"language-text"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-text"}),"# Promote the canaries for the job.\n$ nomad job promote <job-id>\n")),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#serial-upgrades","aria-label":"serial upgrades permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"serial-upgrades","aria-hidden":""})),"Serial Upgrades"),Object(o.b)("p",null,"This example uses a serial upgrade strategy, meaning exactly one task group will\nbe updated at a time. The allocation must be healthy for the default\n",Object(o.b)("inlineCode",{parentName:"p"},"min_healthy_time")," of 10 seconds."),Object(o.b)("pre",{className:"language-hcl"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"1"),"\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.b)("h3",{className:"g-type-display-4"},Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__permalink-h",href:"#update-stanza-inheritance","aria-label":"update stanza inheritance permalink"}),"\xbb"),Object(o.b)("a",Object(c.a)({parentName:"h3"},{className:"__target-h",id:"update-stanza-inheritance","aria-hidden":""})),"Update Stanza Inheritance"),Object(o.b)("p",null,"This example shows how inheritance can simplify the job when there are multiple\ntask groups."),Object(o.b)("pre",{className:"language-hcl"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),"job ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"example"')," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ...\n\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"2"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"health_check"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"task_states"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"healthy_deadline")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"10m"'),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  group ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"one"')," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ...\n\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"canary")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"1"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n  group ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"two"')," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ...\n\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n      ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"min_healthy_time")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"3m"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")),Object(o.b)("p",null,"By placing the shared parameters in the job's update stanza, each groups update\nstanza may be kept to a minimum. The merged update stanzas for each group\nbecomes:"),Object(o.b)("pre",{className:"language-hcl"},Object(o.b)("code",Object(c.a)({parentName:"pre"},{className:"language-hcl"}),"group ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"one"')," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"canary"),"           ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"1"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"2"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"health_check"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"task_states"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"healthy_deadline")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"10m"'),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n\ngroup ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"two"')," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token keyword"}),"update")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"min_healthy_time")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"3m"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"max_parallel"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token number"}),"2"),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"health_check"),"     ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"task_states"'),"\n    ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token property"}),"healthy_deadline")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"=")," ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token string"}),'"10m"'),"\n  ",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(o.b)("span",Object(c.a)({parentName:"code"},{className:"token punctuation"}),"}"),"\n")))}d.isMDXComponent=!0}},[["HY1p",0,1,2,4,3,5,6]]]);