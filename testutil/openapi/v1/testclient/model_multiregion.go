/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// Multiregion struct for Multiregion
type Multiregion struct {
	Regions *[]MultiregionRegion `json:"Regions,omitempty"`
	Strategy *MultiregionStrategy `json:"Strategy,omitempty"`
}

// NewMultiregion instantiates a new Multiregion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiregion() *Multiregion {
	this := Multiregion{}
	return &this
}

// NewMultiregionWithDefaults instantiates a new Multiregion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiregionWithDefaults() *Multiregion {
	this := Multiregion{}
	return &this
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Multiregion) GetRegions() []MultiregionRegion {
	if o == nil || o.Regions == nil {
		var ret []MultiregionRegion
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Multiregion) GetRegionsOk() (*[]MultiregionRegion, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Multiregion) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []MultiregionRegion and assigns it to the Regions field.
func (o *Multiregion) SetRegions(v []MultiregionRegion) {
	o.Regions = &v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *Multiregion) GetStrategy() MultiregionStrategy {
	if o == nil || o.Strategy == nil {
		var ret MultiregionStrategy
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Multiregion) GetStrategyOk() (*MultiregionStrategy, bool) {
	if o == nil || o.Strategy == nil {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *Multiregion) HasStrategy() bool {
	if o != nil && o.Strategy != nil {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given MultiregionStrategy and assigns it to the Strategy field.
func (o *Multiregion) SetStrategy(v MultiregionStrategy) {
	o.Strategy = &v
}

func (o Multiregion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Regions != nil {
		toSerialize["Regions"] = o.Regions
	}
	if o.Strategy != nil {
		toSerialize["Strategy"] = o.Strategy
	}
	return json.Marshal(toSerialize)
}

type NullableMultiregion struct {
	value *Multiregion
	isSet bool
}

func (v NullableMultiregion) Get() *Multiregion {
	return v.value
}

func (v *NullableMultiregion) Set(val *Multiregion) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiregion) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiregion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiregion(val *Multiregion) *NullableMultiregion {
	return &NullableMultiregion{value: val, isSet: true}
}

func (v NullableMultiregion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiregion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


