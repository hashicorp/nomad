/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// AllocationMetric struct for AllocationMetric
type AllocationMetric struct {
	AllocationTime *int64 `json:"AllocationTime,omitempty"`
	ClassExhausted *map[string]int32 `json:"ClassExhausted,omitempty"`
	ClassFiltered *map[string]int32 `json:"ClassFiltered,omitempty"`
	CoalescedFailures *int32 `json:"CoalescedFailures,omitempty"`
	ConstraintFiltered *map[string]int32 `json:"ConstraintFiltered,omitempty"`
	DimensionExhausted *map[string]int32 `json:"DimensionExhausted,omitempty"`
	NodesAvailable *map[string]int32 `json:"NodesAvailable,omitempty"`
	NodesEvaluated *int32 `json:"NodesEvaluated,omitempty"`
	NodesExhausted *int32 `json:"NodesExhausted,omitempty"`
	NodesFiltered *int32 `json:"NodesFiltered,omitempty"`
	QuotaExhausted *[]string `json:"QuotaExhausted,omitempty"`
	ResourcesExhausted *map[string]Resources `json:"ResourcesExhausted,omitempty"`
	ScoreMetaData *[]NodeScoreMeta `json:"ScoreMetaData,omitempty"`
	Scores *map[string]float64 `json:"Scores,omitempty"`
}

// NewAllocationMetric instantiates a new AllocationMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationMetric() *AllocationMetric {
	this := AllocationMetric{}
	return &this
}

// NewAllocationMetricWithDefaults instantiates a new AllocationMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationMetricWithDefaults() *AllocationMetric {
	this := AllocationMetric{}
	return &this
}

// GetAllocationTime returns the AllocationTime field value if set, zero value otherwise.
func (o *AllocationMetric) GetAllocationTime() int64 {
	if o == nil || o.AllocationTime == nil {
		var ret int64
		return ret
	}
	return *o.AllocationTime
}

// GetAllocationTimeOk returns a tuple with the AllocationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetAllocationTimeOk() (*int64, bool) {
	if o == nil || o.AllocationTime == nil {
		return nil, false
	}
	return o.AllocationTime, true
}

// HasAllocationTime returns a boolean if a field has been set.
func (o *AllocationMetric) HasAllocationTime() bool {
	if o != nil && o.AllocationTime != nil {
		return true
	}

	return false
}

// SetAllocationTime gets a reference to the given int64 and assigns it to the AllocationTime field.
func (o *AllocationMetric) SetAllocationTime(v int64) {
	o.AllocationTime = &v
}

// GetClassExhausted returns the ClassExhausted field value if set, zero value otherwise.
func (o *AllocationMetric) GetClassExhausted() map[string]int32 {
	if o == nil || o.ClassExhausted == nil {
		var ret map[string]int32
		return ret
	}
	return *o.ClassExhausted
}

// GetClassExhaustedOk returns a tuple with the ClassExhausted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetClassExhaustedOk() (*map[string]int32, bool) {
	if o == nil || o.ClassExhausted == nil {
		return nil, false
	}
	return o.ClassExhausted, true
}

// HasClassExhausted returns a boolean if a field has been set.
func (o *AllocationMetric) HasClassExhausted() bool {
	if o != nil && o.ClassExhausted != nil {
		return true
	}

	return false
}

// SetClassExhausted gets a reference to the given map[string]int32 and assigns it to the ClassExhausted field.
func (o *AllocationMetric) SetClassExhausted(v map[string]int32) {
	o.ClassExhausted = &v
}

// GetClassFiltered returns the ClassFiltered field value if set, zero value otherwise.
func (o *AllocationMetric) GetClassFiltered() map[string]int32 {
	if o == nil || o.ClassFiltered == nil {
		var ret map[string]int32
		return ret
	}
	return *o.ClassFiltered
}

// GetClassFilteredOk returns a tuple with the ClassFiltered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetClassFilteredOk() (*map[string]int32, bool) {
	if o == nil || o.ClassFiltered == nil {
		return nil, false
	}
	return o.ClassFiltered, true
}

// HasClassFiltered returns a boolean if a field has been set.
func (o *AllocationMetric) HasClassFiltered() bool {
	if o != nil && o.ClassFiltered != nil {
		return true
	}

	return false
}

// SetClassFiltered gets a reference to the given map[string]int32 and assigns it to the ClassFiltered field.
func (o *AllocationMetric) SetClassFiltered(v map[string]int32) {
	o.ClassFiltered = &v
}

// GetCoalescedFailures returns the CoalescedFailures field value if set, zero value otherwise.
func (o *AllocationMetric) GetCoalescedFailures() int32 {
	if o == nil || o.CoalescedFailures == nil {
		var ret int32
		return ret
	}
	return *o.CoalescedFailures
}

// GetCoalescedFailuresOk returns a tuple with the CoalescedFailures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetCoalescedFailuresOk() (*int32, bool) {
	if o == nil || o.CoalescedFailures == nil {
		return nil, false
	}
	return o.CoalescedFailures, true
}

// HasCoalescedFailures returns a boolean if a field has been set.
func (o *AllocationMetric) HasCoalescedFailures() bool {
	if o != nil && o.CoalescedFailures != nil {
		return true
	}

	return false
}

// SetCoalescedFailures gets a reference to the given int32 and assigns it to the CoalescedFailures field.
func (o *AllocationMetric) SetCoalescedFailures(v int32) {
	o.CoalescedFailures = &v
}

// GetConstraintFiltered returns the ConstraintFiltered field value if set, zero value otherwise.
func (o *AllocationMetric) GetConstraintFiltered() map[string]int32 {
	if o == nil || o.ConstraintFiltered == nil {
		var ret map[string]int32
		return ret
	}
	return *o.ConstraintFiltered
}

// GetConstraintFilteredOk returns a tuple with the ConstraintFiltered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetConstraintFilteredOk() (*map[string]int32, bool) {
	if o == nil || o.ConstraintFiltered == nil {
		return nil, false
	}
	return o.ConstraintFiltered, true
}

// HasConstraintFiltered returns a boolean if a field has been set.
func (o *AllocationMetric) HasConstraintFiltered() bool {
	if o != nil && o.ConstraintFiltered != nil {
		return true
	}

	return false
}

// SetConstraintFiltered gets a reference to the given map[string]int32 and assigns it to the ConstraintFiltered field.
func (o *AllocationMetric) SetConstraintFiltered(v map[string]int32) {
	o.ConstraintFiltered = &v
}

// GetDimensionExhausted returns the DimensionExhausted field value if set, zero value otherwise.
func (o *AllocationMetric) GetDimensionExhausted() map[string]int32 {
	if o == nil || o.DimensionExhausted == nil {
		var ret map[string]int32
		return ret
	}
	return *o.DimensionExhausted
}

// GetDimensionExhaustedOk returns a tuple with the DimensionExhausted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetDimensionExhaustedOk() (*map[string]int32, bool) {
	if o == nil || o.DimensionExhausted == nil {
		return nil, false
	}
	return o.DimensionExhausted, true
}

// HasDimensionExhausted returns a boolean if a field has been set.
func (o *AllocationMetric) HasDimensionExhausted() bool {
	if o != nil && o.DimensionExhausted != nil {
		return true
	}

	return false
}

// SetDimensionExhausted gets a reference to the given map[string]int32 and assigns it to the DimensionExhausted field.
func (o *AllocationMetric) SetDimensionExhausted(v map[string]int32) {
	o.DimensionExhausted = &v
}

// GetNodesAvailable returns the NodesAvailable field value if set, zero value otherwise.
func (o *AllocationMetric) GetNodesAvailable() map[string]int32 {
	if o == nil || o.NodesAvailable == nil {
		var ret map[string]int32
		return ret
	}
	return *o.NodesAvailable
}

// GetNodesAvailableOk returns a tuple with the NodesAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetNodesAvailableOk() (*map[string]int32, bool) {
	if o == nil || o.NodesAvailable == nil {
		return nil, false
	}
	return o.NodesAvailable, true
}

// HasNodesAvailable returns a boolean if a field has been set.
func (o *AllocationMetric) HasNodesAvailable() bool {
	if o != nil && o.NodesAvailable != nil {
		return true
	}

	return false
}

// SetNodesAvailable gets a reference to the given map[string]int32 and assigns it to the NodesAvailable field.
func (o *AllocationMetric) SetNodesAvailable(v map[string]int32) {
	o.NodesAvailable = &v
}

// GetNodesEvaluated returns the NodesEvaluated field value if set, zero value otherwise.
func (o *AllocationMetric) GetNodesEvaluated() int32 {
	if o == nil || o.NodesEvaluated == nil {
		var ret int32
		return ret
	}
	return *o.NodesEvaluated
}

// GetNodesEvaluatedOk returns a tuple with the NodesEvaluated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetNodesEvaluatedOk() (*int32, bool) {
	if o == nil || o.NodesEvaluated == nil {
		return nil, false
	}
	return o.NodesEvaluated, true
}

// HasNodesEvaluated returns a boolean if a field has been set.
func (o *AllocationMetric) HasNodesEvaluated() bool {
	if o != nil && o.NodesEvaluated != nil {
		return true
	}

	return false
}

// SetNodesEvaluated gets a reference to the given int32 and assigns it to the NodesEvaluated field.
func (o *AllocationMetric) SetNodesEvaluated(v int32) {
	o.NodesEvaluated = &v
}

// GetNodesExhausted returns the NodesExhausted field value if set, zero value otherwise.
func (o *AllocationMetric) GetNodesExhausted() int32 {
	if o == nil || o.NodesExhausted == nil {
		var ret int32
		return ret
	}
	return *o.NodesExhausted
}

// GetNodesExhaustedOk returns a tuple with the NodesExhausted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetNodesExhaustedOk() (*int32, bool) {
	if o == nil || o.NodesExhausted == nil {
		return nil, false
	}
	return o.NodesExhausted, true
}

// HasNodesExhausted returns a boolean if a field has been set.
func (o *AllocationMetric) HasNodesExhausted() bool {
	if o != nil && o.NodesExhausted != nil {
		return true
	}

	return false
}

// SetNodesExhausted gets a reference to the given int32 and assigns it to the NodesExhausted field.
func (o *AllocationMetric) SetNodesExhausted(v int32) {
	o.NodesExhausted = &v
}

// GetNodesFiltered returns the NodesFiltered field value if set, zero value otherwise.
func (o *AllocationMetric) GetNodesFiltered() int32 {
	if o == nil || o.NodesFiltered == nil {
		var ret int32
		return ret
	}
	return *o.NodesFiltered
}

// GetNodesFilteredOk returns a tuple with the NodesFiltered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetNodesFilteredOk() (*int32, bool) {
	if o == nil || o.NodesFiltered == nil {
		return nil, false
	}
	return o.NodesFiltered, true
}

// HasNodesFiltered returns a boolean if a field has been set.
func (o *AllocationMetric) HasNodesFiltered() bool {
	if o != nil && o.NodesFiltered != nil {
		return true
	}

	return false
}

// SetNodesFiltered gets a reference to the given int32 and assigns it to the NodesFiltered field.
func (o *AllocationMetric) SetNodesFiltered(v int32) {
	o.NodesFiltered = &v
}

// GetQuotaExhausted returns the QuotaExhausted field value if set, zero value otherwise.
func (o *AllocationMetric) GetQuotaExhausted() []string {
	if o == nil || o.QuotaExhausted == nil {
		var ret []string
		return ret
	}
	return *o.QuotaExhausted
}

// GetQuotaExhaustedOk returns a tuple with the QuotaExhausted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetQuotaExhaustedOk() (*[]string, bool) {
	if o == nil || o.QuotaExhausted == nil {
		return nil, false
	}
	return o.QuotaExhausted, true
}

// HasQuotaExhausted returns a boolean if a field has been set.
func (o *AllocationMetric) HasQuotaExhausted() bool {
	if o != nil && o.QuotaExhausted != nil {
		return true
	}

	return false
}

// SetQuotaExhausted gets a reference to the given []string and assigns it to the QuotaExhausted field.
func (o *AllocationMetric) SetQuotaExhausted(v []string) {
	o.QuotaExhausted = &v
}

// GetResourcesExhausted returns the ResourcesExhausted field value if set, zero value otherwise.
func (o *AllocationMetric) GetResourcesExhausted() map[string]Resources {
	if o == nil || o.ResourcesExhausted == nil {
		var ret map[string]Resources
		return ret
	}
	return *o.ResourcesExhausted
}

// GetResourcesExhaustedOk returns a tuple with the ResourcesExhausted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetResourcesExhaustedOk() (*map[string]Resources, bool) {
	if o == nil || o.ResourcesExhausted == nil {
		return nil, false
	}
	return o.ResourcesExhausted, true
}

// HasResourcesExhausted returns a boolean if a field has been set.
func (o *AllocationMetric) HasResourcesExhausted() bool {
	if o != nil && o.ResourcesExhausted != nil {
		return true
	}

	return false
}

// SetResourcesExhausted gets a reference to the given map[string]Resources and assigns it to the ResourcesExhausted field.
func (o *AllocationMetric) SetResourcesExhausted(v map[string]Resources) {
	o.ResourcesExhausted = &v
}

// GetScoreMetaData returns the ScoreMetaData field value if set, zero value otherwise.
func (o *AllocationMetric) GetScoreMetaData() []NodeScoreMeta {
	if o == nil || o.ScoreMetaData == nil {
		var ret []NodeScoreMeta
		return ret
	}
	return *o.ScoreMetaData
}

// GetScoreMetaDataOk returns a tuple with the ScoreMetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetScoreMetaDataOk() (*[]NodeScoreMeta, bool) {
	if o == nil || o.ScoreMetaData == nil {
		return nil, false
	}
	return o.ScoreMetaData, true
}

// HasScoreMetaData returns a boolean if a field has been set.
func (o *AllocationMetric) HasScoreMetaData() bool {
	if o != nil && o.ScoreMetaData != nil {
		return true
	}

	return false
}

// SetScoreMetaData gets a reference to the given []NodeScoreMeta and assigns it to the ScoreMetaData field.
func (o *AllocationMetric) SetScoreMetaData(v []NodeScoreMeta) {
	o.ScoreMetaData = &v
}

// GetScores returns the Scores field value if set, zero value otherwise.
func (o *AllocationMetric) GetScores() map[string]float64 {
	if o == nil || o.Scores == nil {
		var ret map[string]float64
		return ret
	}
	return *o.Scores
}

// GetScoresOk returns a tuple with the Scores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationMetric) GetScoresOk() (*map[string]float64, bool) {
	if o == nil || o.Scores == nil {
		return nil, false
	}
	return o.Scores, true
}

// HasScores returns a boolean if a field has been set.
func (o *AllocationMetric) HasScores() bool {
	if o != nil && o.Scores != nil {
		return true
	}

	return false
}

// SetScores gets a reference to the given map[string]float64 and assigns it to the Scores field.
func (o *AllocationMetric) SetScores(v map[string]float64) {
	o.Scores = &v
}

func (o AllocationMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllocationTime != nil {
		toSerialize["AllocationTime"] = o.AllocationTime
	}
	if o.ClassExhausted != nil {
		toSerialize["ClassExhausted"] = o.ClassExhausted
	}
	if o.ClassFiltered != nil {
		toSerialize["ClassFiltered"] = o.ClassFiltered
	}
	if o.CoalescedFailures != nil {
		toSerialize["CoalescedFailures"] = o.CoalescedFailures
	}
	if o.ConstraintFiltered != nil {
		toSerialize["ConstraintFiltered"] = o.ConstraintFiltered
	}
	if o.DimensionExhausted != nil {
		toSerialize["DimensionExhausted"] = o.DimensionExhausted
	}
	if o.NodesAvailable != nil {
		toSerialize["NodesAvailable"] = o.NodesAvailable
	}
	if o.NodesEvaluated != nil {
		toSerialize["NodesEvaluated"] = o.NodesEvaluated
	}
	if o.NodesExhausted != nil {
		toSerialize["NodesExhausted"] = o.NodesExhausted
	}
	if o.NodesFiltered != nil {
		toSerialize["NodesFiltered"] = o.NodesFiltered
	}
	if o.QuotaExhausted != nil {
		toSerialize["QuotaExhausted"] = o.QuotaExhausted
	}
	if o.ResourcesExhausted != nil {
		toSerialize["ResourcesExhausted"] = o.ResourcesExhausted
	}
	if o.ScoreMetaData != nil {
		toSerialize["ScoreMetaData"] = o.ScoreMetaData
	}
	if o.Scores != nil {
		toSerialize["Scores"] = o.Scores
	}
	return json.Marshal(toSerialize)
}

type NullableAllocationMetric struct {
	value *AllocationMetric
	isSet bool
}

func (v NullableAllocationMetric) Get() *AllocationMetric {
	return v.value
}

func (v *NullableAllocationMetric) Set(val *AllocationMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationMetric(val *AllocationMetric) *NullableAllocationMetric {
	return &NullableAllocationMetric{value: val, isSet: true}
}

func (v NullableAllocationMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


