(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{"8s/p":function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return b}));var a=n("wx14"),s=n("Ff2n"),r=n("q1tI"),i=n.n(r),o=n("7ljp"),l=n("j1un"),c=(i.a.createElement,{}),d=Object(l.a)({layout:"docs",page_title:"Nomad Agent",sidebar_title:"Set Server & Client Nodes",description:"The Nomad agent is a long running process which can be used either in\na client or server mode.",__resourcePath:"docs/install/production/nomad-agent.mdx",__scans:{}});function b(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(o.b)(d,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{className:"g-type-display-2"},Object(o.b)("a",Object(a.a)({parentName:"h1"},{className:"__permalink-h",href:"#setting-nodes-with-nomad-agent","aria-label":"setting nodes with nomad agent permalink"}),"\xbb"),Object(o.b)("a",Object(a.a)({parentName:"h1"},{className:"__target-h",id:"setting-nodes-with-nomad-agent","aria-hidden":""})),"Setting Nodes with Nomad Agent"),Object(o.b)("p",null,"The Nomad agent is a long running process which runs on every machine that\nis part of the Nomad cluster. The behavior of the agent depends on if it is\nrunning in client or server mode. Clients are responsible for running tasks,\nwhile servers are responsible for managing the cluster."),Object(o.b)("p",null,"Client mode agents are relatively simple. They make use of fingerprinting\nto determine the capabilities and resources of the host machine, as well as\ndetermining what ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/drivers"}),"drivers")," are available. Clients\nregister with servers to provide the node information, heartbeat to provide\nliveness, and run any tasks assigned to them."),Object(o.b)("p",null,"Servers take on the responsibility of being part of the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/internals/consensus"}),"consensus protocol")," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/internals/gossip"}),"gossip protocol"),".\nThe consensus protocol, powered by Raft, allows the servers to perform\nleader election and state replication. The gossip protocol allows for simple\nclustering of servers and multi-region federation. The higher burden on the\nserver nodes means that usually they should be run on dedicated instances --\nthey are more resource intensive than a client node."),Object(o.b)("p",null,"Client nodes make up the majority of the cluster, and are very lightweight as\nthey interface with the server nodes and maintain very little state of their\nown. Each cluster has usually 3 or 5 server mode agents and potentially\nthousands of clients."),Object(o.b)("h2",{className:"g-type-display-3"},Object(o.b)("a",Object(a.a)({parentName:"h2"},{className:"__permalink-h",href:"#running-an-agent","aria-label":"running an agent permalink"}),"\xbb"),Object(o.b)("a",Object(a.a)({parentName:"h2"},{className:"__target-h",id:"running-an-agent","aria-hidden":""})),"Running an Agent"),Object(o.b)("p",null,"The agent is started with the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/commands/agent"}),Object(o.b)("inlineCode",{parentName:"a"},"nomad agent")," command"),". This\ncommand blocks, running forever or until told to quit. The agent command takes a variety\nof configuration options, but most have sane defaults."),Object(o.b)("p",null,"When running ",Object(o.b)("inlineCode",{parentName:"p"},"nomad agent"),", you should see output similar to this:"),Object(o.b)("pre",{className:"language-shell-session"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell-session"}),Object(o.b)("span",Object(a.a)({parentName:"code"},{className:"token command"}),Object(o.b)("span",Object(a.a)({parentName:"span"},{className:"token sh important"}),"$")," ",Object(o.b)("span",Object(a.a)({parentName:"span"},{className:"token bash language-bash"}),"nomad agent -dev")),"\n",Object(o.b)("span",Object(a.a)({parentName:"code"},{className:"token output"}),"==> Starting Nomad agent...\n==> Nomad agent configuration:\n\n                Client: true\n             Log Level: INFO\n                Region: global (DC: dc1)\n                Server: true\n\n==> Nomad agent started! Log data will stream in below:\n\n    [INFO] serf: EventMemberJoin: server-1.node.global 127.0.0.1\n    [INFO] nomad: starting 4 scheduling worker(s) for [service batch _core]\n...\n"))),Object(o.b)("p",null,"There are several important messages that ",Object(o.b)("inlineCode",{parentName:"p"},"nomad agent")," outputs:"),Object(o.b)("ul",null,Object(o.b)("li",Object(a.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Client"),": This indicates whether the agent has enabled client mode.\nClient nodes fingerprint their host environment, register with servers,\nand run tasks.")),Object(o.b)("li",Object(a.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Log Level"),": This indicates the configured log level. Only messages with\nan equal or higher severity will be logged. This can be tuned to increase\nverbosity for debugging, or reduced to avoid noisy logging.")),Object(o.b)("li",Object(a.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Region"),": This is the region and datacenter in which the agent is configured\nto run. Nomad has first-class support for multi-datacenter and multi-region\nconfigurations. The ",Object(o.b)("inlineCode",{parentName:"p"},"-region")," and ",Object(o.b)("inlineCode",{parentName:"p"},"-dc")," flags can be used to set the region\nand datacenter. The default is the ",Object(o.b)("inlineCode",{parentName:"p"},"global")," region in ",Object(o.b)("inlineCode",{parentName:"p"},"dc1"),".")),Object(o.b)("li",Object(a.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Server"),": This indicates whether the agent has enabled server mode.\nServer nodes have the extra burden of participating in the consensus protocol,\nstoring cluster state, and making scheduling decisions."))),Object(o.b)("h2",{className:"g-type-display-3"},Object(o.b)("a",Object(a.a)({parentName:"h2"},{className:"__permalink-h",href:"#stopping-an-agent","aria-label":"stopping an agent permalink"}),"\xbb"),Object(o.b)("a",Object(a.a)({parentName:"h2"},{className:"__target-h",id:"stopping-an-agent","aria-hidden":""})),"Stopping an Agent"),Object(o.b)("p",null,"An agent can be stopped in two ways: gracefully or forcefully. By default,\nany signal to an agent (interrupt, terminate, kill) will cause the agent\nto forcefully stop. Graceful termination can be configured by either\nsetting ",Object(o.b)("inlineCode",{parentName:"p"},"leave_on_interrupt")," or ",Object(o.b)("inlineCode",{parentName:"p"},"leave_on_terminate")," to respond to the\nrespective signals."),Object(o.b)("p",null,"When gracefully exiting, clients will update their status to terminal on\nthe servers so that tasks can be migrated to healthy agents. Servers\nwill notify their intention to leave the cluster which allows them to\nleave the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/internals/consensus"}),"consensus")," peer set."),Object(o.b)("p",null,"It is especially important that a server node be allowed to leave gracefully\nso that there will be a minimal impact on availability as the server leaves\nthe consensus peer set. If a server does not gracefully leave, and will not\nreturn into service, the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/commands/server/force-leave"}),Object(o.b)("inlineCode",{parentName:"a"},"server force-leave")," command"),"\nshould be used to eject it from the consensus peer set."),Object(o.b)("h2",{className:"g-type-display-3"},Object(o.b)("a",Object(a.a)({parentName:"h2"},{className:"__permalink-h",href:"#lifecycle","aria-label":"lifecycle permalink"}),"\xbb"),Object(o.b)("a",Object(a.a)({parentName:"h2"},{className:"__target-h",id:"lifecycle","aria-hidden":""})),"Lifecycle"),Object(o.b)("p",null,"Every agent in the Nomad cluster goes through a lifecycle. Understanding\nthis lifecycle is useful for building a mental model of an agent's interactions\nwith a cluster and how the cluster treats a node."),Object(o.b)("p",null,"When a client agent is first started, it fingerprints the host machine to\nidentify its attributes, capabilities, and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/drivers"}),"task drivers"),".\nThese are reported to the servers during an initial registration. The addresses\nof known servers are provided to the agent via configuration, potentially using\nDNS for resolution. Using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.consul.io"}),"Consul")," provides a way to avoid hard\ncoding addresses and resolving them on demand."),Object(o.b)("p",null,"While a client is running, it is performing heartbeating with servers to\nmaintain liveness. If the heartbeats fail, the servers assume the client node\nhas failed, and stop assigning new tasks while migrating existing tasks.\nIt is impossible to distinguish between a network failure and an agent crash,\nso both cases are handled the same. Once the network recovers or a crashed agent\nrestarts the node status will be updated and normal operation resumed."),Object(o.b)("p",null,"To prevent an accumulation of nodes in a terminal state, Nomad does periodic\ngarbage collection of nodes. By default, if a node is in a failed or 'down'\nstate for over 24 hours it will be garbage collected from the system."),Object(o.b)("p",null,"Servers are slightly more complex as they perform additional functions. They\nparticipate in a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/internals/gossip"}),"gossip protocol")," both to cluster\nwithin a region and to support multi-region configurations. When a server is\nfirst started, it does not know the address of other servers in the cluster.\nTo discover its peers, it must ",Object(o.b)("em",{parentName:"p"},"join")," the cluster. This is done with the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/commands/server/join"}),Object(o.b)("inlineCode",{parentName:"a"},"server join")," command")," or by providing the\nproper configuration on start. Once a node joins, this information is gossiped\nto the entire cluster, meaning all nodes will eventually be aware of each other."),Object(o.b)("p",null,"When a server ",Object(o.b)("em",{parentName:"p"},"leaves"),", it specifies its intent to do so, and the cluster marks that\nnode as having ",Object(o.b)("em",{parentName:"p"},"left"),". If the server has ",Object(o.b)("em",{parentName:"p"},"left"),", replication to it will stop and it\nis removed from the consensus peer set. If the server has ",Object(o.b)("em",{parentName:"p"},"failed"),", replication\nwill attempt to make progress to recover from a software or network failure."),Object(o.b)("h2",{className:"g-type-display-3"},Object(o.b)("a",Object(a.a)({parentName:"h2"},{className:"__permalink-h",href:"#permissions","aria-label":"permissions permalink"}),"\xbb"),Object(o.b)("a",Object(a.a)({parentName:"h2"},{className:"__target-h",id:"permissions","aria-hidden":""})),"Permissions"),Object(o.b)("p",null,"Nomad servers should be run with the lowest possible permissions. Nomad clients\nmust be run as root due to the OS isolation mechanisms that require root\nprivileges. In all cases, it is recommended you create a ",Object(o.b)("inlineCode",{parentName:"p"},"nomad")," user with the\nminimal set of required privileges."))}b.isMDXComponent=!0},S4hJ:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/install/production/nomad-agent",function(){return n("8s/p")}])}},[["S4hJ",0,1,2,4,3,5,6]]]);