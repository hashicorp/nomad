package main

import (
	"bytes"
	"testing"

	"github.com/hashicorp/nomad/helper/testlog"
	"github.com/shoenig/test/must"
)

func TestGenerate_Copy(t *testing.T) {

	logger := testlog.HCLogger(t)

	pkgs, err := loadPackages(logger, "./testdata")
	must.NoError(t, err)

	results, err := analyze(logger, pkgs[0])
	must.NoError(t, err)

	g := NewGenerator("./testdata", logger)
	g.files = pkgs[0].Files
	g.fileset = pkgs[0].FileSet

	var copyResult *Result
	for _, result := range results {
		if result.Method == "Copy" {
			copyResult = result
			break
		}
	}
	must.NotNil(t, copyResult)

	// this is g.render without writing to disk
	var buf bytes.Buffer
	err = g.execTemplate(&buf, copyTmpl, copyResult)
	must.NoError(t, err)

	formatted := g.format(buf.Bytes())
	got := string(formatted)

	must.StrContains(t, got, "xx.Multiregion = j.Multiregion.Copy()")
	must.StrContains(t, got, "xx.Meta = helper.CopyMapStringString(j.Meta)")
	must.StrContains(t, got, `
	xx.Affinities = make([]*Affinity, len(j.Affinities))
	for _, v := range j.Affinities {
		xx.Affinities = append(xx.Affinities, v.Copy())
	}
`)

}

func TestGenerate_Diff(t *testing.T) {

	logger := testlog.HCLogger(t)

	pkgs, err := loadPackages(logger, "./testdata")
	must.NoError(t, err)

	results, err := analyze(logger, pkgs[0])
	must.NoError(t, err)

	g := NewGenerator("./testdata", logger)
	g.files = pkgs[0].Files
	g.fileset = pkgs[0].FileSet

	var diffResult *Result
	for _, result := range results {
		if result.Method == "Diff" {
			diffResult = result
			break
		}
	}
	must.NotNil(t, diffResult)

	// this is g.render without writing to disk
	var buf bytes.Buffer
	err = g.execTemplate(&buf, diffTmpl, diffResult)
	must.NoError(t, err)

	formatted := g.format(buf.Bytes())
	got := string(formatted)

	must.Eq(t, `// Code generated by nomad-generate DO NOT EDIT

package types

func (a *Affinity) Diff() *ObjectDiff {
	return nil
}

func (j *Job) Diff() *ObjectDiff {
	return nil
}

func (m *Multiregion) Diff() *ObjectDiff {
	return nil
}

func (m *MultiregionRegion) Diff() *ObjectDiff {
	return nil
}

func (m *MultiregionStrategy) Diff() *ObjectDiff {
	return nil
}

func (p *ParameterizedJobConfig) Diff() *ObjectDiff {
	return nil
}

func (p *PeriodicConfig) Diff() *ObjectDiff {
	return nil
}

func (t *TaskGroupSummary) Diff() *ObjectDiff {
	return nil
}
`, got)

}
