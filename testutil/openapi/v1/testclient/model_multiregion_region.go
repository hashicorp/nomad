/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// MultiregionRegion struct for MultiregionRegion
type MultiregionRegion struct {
	Count *int32 `json:"Count,omitempty"`
	Datacenters *[]string `json:"Datacenters,omitempty"`
	Meta *map[string]string `json:"Meta,omitempty"`
	Name *string `json:"Name,omitempty"`
}

// NewMultiregionRegion instantiates a new MultiregionRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiregionRegion() *MultiregionRegion {
	this := MultiregionRegion{}
	return &this
}

// NewMultiregionRegionWithDefaults instantiates a new MultiregionRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiregionRegionWithDefaults() *MultiregionRegion {
	this := MultiregionRegion{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *MultiregionRegion) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiregionRegion) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *MultiregionRegion) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *MultiregionRegion) SetCount(v int32) {
	o.Count = &v
}

// GetDatacenters returns the Datacenters field value if set, zero value otherwise.
func (o *MultiregionRegion) GetDatacenters() []string {
	if o == nil || o.Datacenters == nil {
		var ret []string
		return ret
	}
	return *o.Datacenters
}

// GetDatacentersOk returns a tuple with the Datacenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiregionRegion) GetDatacentersOk() (*[]string, bool) {
	if o == nil || o.Datacenters == nil {
		return nil, false
	}
	return o.Datacenters, true
}

// HasDatacenters returns a boolean if a field has been set.
func (o *MultiregionRegion) HasDatacenters() bool {
	if o != nil && o.Datacenters != nil {
		return true
	}

	return false
}

// SetDatacenters gets a reference to the given []string and assigns it to the Datacenters field.
func (o *MultiregionRegion) SetDatacenters(v []string) {
	o.Datacenters = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MultiregionRegion) GetMeta() map[string]string {
	if o == nil || o.Meta == nil {
		var ret map[string]string
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiregionRegion) GetMetaOk() (*map[string]string, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MultiregionRegion) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]string and assigns it to the Meta field.
func (o *MultiregionRegion) SetMeta(v map[string]string) {
	o.Meta = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MultiregionRegion) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiregionRegion) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MultiregionRegion) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MultiregionRegion) SetName(v string) {
	o.Name = &v
}

func (o MultiregionRegion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["Count"] = o.Count
	}
	if o.Datacenters != nil {
		toSerialize["Datacenters"] = o.Datacenters
	}
	if o.Meta != nil {
		toSerialize["Meta"] = o.Meta
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableMultiregionRegion struct {
	value *MultiregionRegion
	isSet bool
}

func (v NullableMultiregionRegion) Get() *MultiregionRegion {
	return v.value
}

func (v *NullableMultiregionRegion) Set(val *MultiregionRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiregionRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiregionRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiregionRegion(val *MultiregionRegion) *NullableMultiregionRegion {
	return &NullableMultiregionRegion{value: val, isSet: true}
}

func (v NullableMultiregionRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiregionRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


