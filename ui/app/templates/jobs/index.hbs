{{!
  Copyright (c) HashiCorp, Inc.
  SPDX-License-Identifier: BUSL-1.1
~}}

{{page-title "Jobs"}}
<section class="section">
    <Hds::PageHeader as |PH|>
      {{!-- <PH.Title>
        Jobs <em>(soft J, like "yobs")</em>
      </PH.Title> --}}
      <PH.Actions>
        {{!-- <Hds::SegmentedGroup as |S|>
          <S.Dropdown data-test-state-facet as |dd|>
            <dd.ToggleButton
              @text="State"
              @color="secondary"
              @badge={{if (eq this.activeToggles.length this.allToggles.length) false this.activeToggles.length}}
            />
            <dd.Title @text="Status" />
            {{#each this.clientFilterToggles.state as |option|}}
              <dd.Checkbox
                {{on "change" (toggle option.qp this)}}
                @value={{option.label}}
                @count={{get (filter (action option.filter) this.nodes) "length"}}
                checked={{get this option.qp}}
                data-test-dropdown-option={{option.label}}
              >
                {{capitalize option.label}}
              </dd.Checkbox>
            {{/each}}
            <dd.Separator />
            <dd.Title @text="Eligibility" />
            {{#each this.clientFilterToggles.eligibility as |option|}}
              <dd.Checkbox
                {{on "change" (toggle option.qp this)}}
                @value={{option.label}}
                @count={{get (filter (action option.filter) this.nodes) "length"}}
                checked={{get this option.qp}}
                data-test-dropdown-option={{option.label}}
              >
                {{capitalize option.label}}
              </dd.Checkbox>
            {{/each}}
            <dd.Separator />
            <dd.Title @text="Drain Status" />
            {{#each this.clientFilterToggles.drainStatus as |option|}}
              <dd.Checkbox
                {{on "change" (toggle option.qp this)}}
                @value={{option.label}}
                @count={{get (filter (action option.filter) this.nodes) "length"}}
                checked={{get this option.qp}}
                data-test-dropdown-option={{option.label}}
              >
                {{capitalize option.label}}
              </dd.Checkbox>
            {{/each}}
          </S.Dropdown>

          <S.Dropdown data-test-node-pool-facet as |dd|>
            <dd.ToggleButton
              @text="Node Pool"
              @color="secondary"
              @badge={{or this.selectionNodePool.length false}}
            />
            {{#each this.optionsNodePool key="label" as |option|}}
              <dd.Checkbox
                {{on "change" (action this.handleFilterChange
                  this.selectionNodePool
                  option.label
                  "qpNodePool"
                )}}
                @value={{option.label}}
                checked={{includes option.label this.selectionNodePool}}
                @count={{get (filter-by 'nodePool' option.label this.nodes) "length"}}
                data-test-dropdown-option={{option.label}}
              >
                {{option.label}}
              </dd.Checkbox>
            {{else}}
              <dd.Generic data-test-dropdown-empty>
                No Node Pool filters
              </dd.Generic>
            {{/each}}
          </S.Dropdown>

          <S.Dropdown data-test-class-facet as |dd|>
            <dd.ToggleButton
              @text="Class"
              @color="secondary"
              @badge={{or this.selectionClass.length false}}
            />
            {{#each this.optionsClass key="label" as |option|}}
              <dd.Checkbox
                {{on "change" (action this.handleFilterChange
                  this.selectionClass
                  option.label
                  "qpClass"
                )}}
                @value={{option.label}}
                checked={{includes option.label this.selectionClass}}
                @count={{get (filter-by 'nodeClass' option.label this.nodes) "length"}}
                data-test-dropdown-option={{option.label}}
              >
                {{option.label}}
              </dd.Checkbox>
            {{else}}
              <dd.Generic data-test-dropdown-empty>
                No Class filters
              </dd.Generic>
            {{/each}}
          </S.Dropdown>

          <S.Dropdown data-test-datacenter-facet as |dd|>
            <dd.ToggleButton
              @text="Datacenter"
              @color="secondary"
              @badge={{or this.selectionDatacenter.length false}}
            />
            {{#each this.optionsDatacenter key="label" as |option|}}
              <dd.Checkbox
                {{on "change" (action this.handleFilterChange
                  this.selectionDatacenter
                  option.label
                  "qpDatacenter"
                )}}
                @value={{option.label}}
                checked={{includes option.label this.selectionDatacenter}}
                @count={{get (filter-by 'datacenter' option.label this.nodes) "length"}}
                data-test-dropdown-option={{option.label}}
              >
                {{option.label}}
              </dd.Checkbox>
            {{else}}
              <dd.Generic data-test-dropdown-empty>
                No Datacenter filters
              </dd.Generic>
            {{/each}}

          </S.Dropdown>

          <S.Dropdown data-test-version-facet as |dd|>
            <dd.ToggleButton
              @text="Version"
              @color="secondary"
              @badge={{or this.selectionVersion.length false}}
            />
            {{#each this.optionsVersion key="label" as |option|}}
              <dd.Checkbox
                {{on "change" (action this.handleFilterChange
                  this.selectionVersion
                  option.label
                  "qpVersion"
                )}}
                @value={{option.label}}
                checked={{includes option.label this.selectionVersion}}
                @count={{get (filter-by 'version' option.label this.nodes) "length"}}
                data-test-dropdown-option={{option.label}}
              >
                {{option.label}}
              </dd.Checkbox>
            {{else}}
              <dd.Generic data-test-dropdown-empty>
                No Version filters
              </dd.Generic>
            {{/each}}
          </S.Dropdown>

          <S.Dropdown data-test-volume-facet as |dd|>
            <dd.ToggleButton
              @text="Volume"
              @color="secondary"
              @badge={{or this.selectionVolume.length false}}
            />
            {{#each this.optionsVolume key="label" as |option|}}
              <dd.Checkbox
                {{on "change" (action this.handleFilterChange
                  this.selectionVolume
                  option.label
                  "qpVolume"
                )}}
                @value={{option.label}}
                checked={{includes option.label this.selectionVolume}}
                @count={{get (filter-by 'volume' option.label this.nodes) "length"}}
                data-test-dropdown-option={{option.label}}
              >
                {{option.label}}
              </dd.Checkbox>
            {{else}}
              <dd.Generic data-test-dropdown-empty>
                No Volume filters
              </dd.Generic>
            {{/each}}
          </S.Dropdown>
        </Hds::SegmentedGroup>
       --}}
      







          <Hds::ButtonSet style="white-space: nowrap;">
            {{#if this.system.shouldShowNamespaces}}
              {{!-- <SingleSelectDropdown
                data-test-namespace-facet
                @label="Namespace"
                @options={{this.optionsNamespaces}}
                @selection={{this.qpNamespace}}
                @onSelect={{action this.setFacetQueryParam "qpNamespace"}}
              /> --}}

        <Hds::Dropdown data-test-namespace-facet as |dd|>
          <dd.ToggleButton
            @text="Namespace"
            @color="secondary"
            @badge={{or this.selectionNamespace.length false}}
          />
          {{#each this.optionsNamespace key="label" as |option|}}
            <dd.Checkbox
              {{on "change" (action this.handleFilterChange
                this.selectionNamespace
                option.label
                "qpNamespace"
              )}}
              @value={{option.label}}
              checked={{includes option.label this.selectionDatacenter}}
              @count={{get (filter-by 'datacenter' option.label this.nodes) "length"}}
              data-test-dropdown-option={{option.label}}
            >
              {{option.label}}
            </dd.Checkbox>
          {{else}}
            <dd.Generic data-test-dropdown-empty>
              No Namespaces
            </dd.Generic>
          {{/each}}

        </Hds::Dropdown>

            {{/if}}

            <div
              {{keyboard-shortcut
                label="Run Job"
                pattern=(array "r" "u" "n")
                action=(action this.goToRun)
              }}
            >
              <Hds::Button
                data-test-run-job
                @text="Run Job"
                disabled={{not (can "run job")}}
                title={{if (can "run job") null "You donâ€™t have permission to run jobs"}}
                @route="jobs.run"
                @query={{hash namespace=this.qpNamespace}}
              />
            </div>

            <Hds::Form::TextInput::Base
              @type="search"
              @value=""
              aria-label="Job Search"
              placeholder="eg. Hello World"
              @icon="search"
            />

            {{#if this.pendingJobIDDiff}}
            <Hds::Button
              @size="medium"
              @text="Updates Pending"
              @color="primary"
              @icon="sync"
              {{on "click" (perform this.updateJobList)}}
            />
          {{/if}}
        </Hds::ButtonSet>
      </PH.Actions>
    </Hds::PageHeader>

    <Hds::Table
      @model={{this.jobs}}
      @columns={{this.tableColumns}}
      @valign="middle"
    >
      <:body as |B|>
      {{!-- TODO: use <JobRow> --}}
        <B.Tr
          {{keyboard-shortcut
            enumerated=true
            action=(action "gotoJob" B.data)
          }}
          class="{{if B.data.assumeGC "assume-gc"}}"
        >
          {{!-- {{#each this.tableColumns as |column|}}
            <B.Td>{{get B.data (lowercase column.label)}}</B.Td>
          {{/each}} --}}
          <B.Td>
            {{#if B.data.assumeGC}}
              {{B.data.name}}
            {{else}}
            <LinkTo
              @route="jobs.job.index"
              @model={{B.data.idWithNamespace}}
              class="is-primary"
            >
              {{B.data.name}}
              {{#if B.data.meta.structured.pack}}
                <span data-test-pack-tag class="tag is-pack">
                  {{x-icon "box" class= "test"}}
                  <span>Pack</span>
                </span>
              {{/if}}
            </LinkTo>
            {{/if}}
          </B.Td>
          {{#if this.system.shouldShowNamespaces}}
            <B.Td>{{B.data.namespace.id}}</B.Td>
          {{/if}}
          {{#if this.system.shouldShowNodepools}}
            <B.Td>{{B.data.nodepool}}</B.Td>
          {{/if}}
          <B.Td>
            {{#unless B.data.childStatuses}}
              <Hds::Badge @text="{{capitalize B.data.aggregateAllocStatus.label}}" @color={{B.data.aggregateAllocStatus.state}} @size="large" />
            {{/unless}}
          </B.Td>
          <B.Td>
            {{B.data.type}}
          </B.Td>
          <B.Td>
            {{B.data.priority}}
          </B.Td>
          <B.Td>
            {{!-- {{get (filter-by 'clientStatus' 'running' B.data.allocations) "length"}} running <br />
            {{B.data.allocations.length}} total <br />
            {{B.data.groupCountSum}} desired
            <hr /> --}}
            <div class="job-status-panel">
              {{#unless B.data.assumeGC}}
                {{#if B.data.childStatuses}}
                  {{B.data.childStatuses.length}} child jobs;<br />
                  {{#each-in B.data.childStatusBreakdown as |status count|}}
                    {{count}} {{status}}<br />
                  {{/each-in}}
                {{else}}
                  <JobStatus::AllocationStatusRow
                    @allocBlocks={{B.data.allocBlocks}}
                    @steady={{true}}
                    @compact={{true}}
                    {{!-- @runningAllocs={{B.data.runningAllocs}} --}}
                    @runningAllocs={{B.data.allocBlocks.running.healthy.nonCanary.length}}
                    @groupCountSum={{B.data.expectedRunningAllocCount}}
                  />
                {{/if}}
              {{/unless}}
            </div>
          </B.Td>
        </B.Tr>
      </:body>
    </Hds::Table>

    <Hds::Pagination::Compact
      @onPageChange={{action this.handlePageChange}}
      @isDisabledPrev={{not this.cursorAt}}
      @isDisabledNext={{not this.nextToken}}
    />

  <hr />
  {{!-- TODO: Temporary keyboard-shortcut tester buttons while I think about nixing the pagination component above --}}
  <Hds::Button
    @text="Prev"
    @color="secondary"
    @disabled={{not this.cursorAt}}
    {{on "click" (action this.handlePageChange "prev")}}
    {{keyboard-shortcut
      label="Previous Page"
      pattern=(array "[" "[")
      action=(action this.handlePageChange "prev")}}
  />
  <Hds::Button
    @text="Next"
    @color="secondary"
    @disabled={{not this.nextToken}}
    {{on "click" (action this.handlePageChange "next")}}
    {{keyboard-shortcut
      label="Next Page"
      pattern=(array "]" "]")
      action=(action this.handlePageChange "next")}}
  />
  <hr />
  Next token is {{this.nextToken}}<br />
  {{!-- Previous tokens ({{this.previousTokens.length}}) are {{this.previousTokens}}<br /> --}}
  Model.jobs length: {{this.model.jobs.length}}<br />
  Controller.jobs length: {{this.jobs.length}}<br />
  Job IDs to watch for ({{this.jobIDs.length}}): {{#each this.jobIDs as |id|}}{{id.id}} | {{/each}}<br />
  Pending Job IDs to watch for ({{this.pendingJobIDs.length}}): {{#each this.pendingJobIDs as |id|}}{{id.id}} | {{/each}}<br />
  <Hds::Form::Toggle::Field
    name="jostle"
    @id="jostle"
    checked={{this.liveUpdatesEnabled}}
    {{on "change" (action (mut this.liveUpdatesEnabled) (not this.liveUpdatesEnabled))}}
    as |F|>
    <F.Label>Live update new/removed jobs?</F.Label>
  </Hds::Form::Toggle::Field>
  {{this.liveUpdatesEnabled}}<br />
  <hr />
  Local watchlist<br />
  jobQueryIndex: {{this.jobQueryIndex}}<br />
  jobAllocsQueryIndex: {{this.jobAllocsQueryIndex}}<br />

  <hr />


</section>