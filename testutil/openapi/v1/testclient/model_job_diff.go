/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// JobDiff struct for JobDiff
type JobDiff struct {
	Fields *[]FieldDiff `json:"Fields,omitempty"`
	ID *string `json:"ID,omitempty"`
	Objects *[]ObjectDiff `json:"Objects,omitempty"`
	TaskGroups *[]TaskGroupDiff `json:"TaskGroups,omitempty"`
	Type *string `json:"Type,omitempty"`
}

// NewJobDiff instantiates a new JobDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobDiff() *JobDiff {
	this := JobDiff{}
	return &this
}

// NewJobDiffWithDefaults instantiates a new JobDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobDiffWithDefaults() *JobDiff {
	this := JobDiff{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *JobDiff) GetFields() []FieldDiff {
	if o == nil || o.Fields == nil {
		var ret []FieldDiff
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobDiff) GetFieldsOk() (*[]FieldDiff, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *JobDiff) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []FieldDiff and assigns it to the Fields field.
func (o *JobDiff) SetFields(v []FieldDiff) {
	o.Fields = &v
}

// GetID returns the ID field value if set, zero value otherwise.
func (o *JobDiff) GetID() string {
	if o == nil || o.ID == nil {
		var ret string
		return ret
	}
	return *o.ID
}

// GetIDOk returns a tuple with the ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobDiff) GetIDOk() (*string, bool) {
	if o == nil || o.ID == nil {
		return nil, false
	}
	return o.ID, true
}

// HasID returns a boolean if a field has been set.
func (o *JobDiff) HasID() bool {
	if o != nil && o.ID != nil {
		return true
	}

	return false
}

// SetID gets a reference to the given string and assigns it to the ID field.
func (o *JobDiff) SetID(v string) {
	o.ID = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *JobDiff) GetObjects() []ObjectDiff {
	if o == nil || o.Objects == nil {
		var ret []ObjectDiff
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobDiff) GetObjectsOk() (*[]ObjectDiff, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *JobDiff) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []ObjectDiff and assigns it to the Objects field.
func (o *JobDiff) SetObjects(v []ObjectDiff) {
	o.Objects = &v
}

// GetTaskGroups returns the TaskGroups field value if set, zero value otherwise.
func (o *JobDiff) GetTaskGroups() []TaskGroupDiff {
	if o == nil || o.TaskGroups == nil {
		var ret []TaskGroupDiff
		return ret
	}
	return *o.TaskGroups
}

// GetTaskGroupsOk returns a tuple with the TaskGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobDiff) GetTaskGroupsOk() (*[]TaskGroupDiff, bool) {
	if o == nil || o.TaskGroups == nil {
		return nil, false
	}
	return o.TaskGroups, true
}

// HasTaskGroups returns a boolean if a field has been set.
func (o *JobDiff) HasTaskGroups() bool {
	if o != nil && o.TaskGroups != nil {
		return true
	}

	return false
}

// SetTaskGroups gets a reference to the given []TaskGroupDiff and assigns it to the TaskGroups field.
func (o *JobDiff) SetTaskGroups(v []TaskGroupDiff) {
	o.TaskGroups = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *JobDiff) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobDiff) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *JobDiff) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *JobDiff) SetType(v string) {
	o.Type = &v
}

func (o JobDiff) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fields != nil {
		toSerialize["Fields"] = o.Fields
	}
	if o.ID != nil {
		toSerialize["ID"] = o.ID
	}
	if o.Objects != nil {
		toSerialize["Objects"] = o.Objects
	}
	if o.TaskGroups != nil {
		toSerialize["TaskGroups"] = o.TaskGroups
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableJobDiff struct {
	value *JobDiff
	isSet bool
}

func (v NullableJobDiff) Get() *JobDiff {
	return v.value
}

func (v *NullableJobDiff) Set(val *JobDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableJobDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableJobDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobDiff(val *JobDiff) *NullableJobDiff {
	return &NullableJobDiff{value: val, isSet: true}
}

func (v NullableJobDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


