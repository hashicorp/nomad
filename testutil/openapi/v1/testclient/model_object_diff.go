/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// ObjectDiff struct for ObjectDiff
type ObjectDiff struct {
	Fields *[]FieldDiff `json:"Fields,omitempty"`
	Name *string `json:"Name,omitempty"`
	Objects *[]ObjectDiff `json:"Objects,omitempty"`
	Type *string `json:"Type,omitempty"`
}

// NewObjectDiff instantiates a new ObjectDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectDiff() *ObjectDiff {
	this := ObjectDiff{}
	return &this
}

// NewObjectDiffWithDefaults instantiates a new ObjectDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectDiffWithDefaults() *ObjectDiff {
	this := ObjectDiff{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ObjectDiff) GetFields() []FieldDiff {
	if o == nil || o.Fields == nil {
		var ret []FieldDiff
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectDiff) GetFieldsOk() (*[]FieldDiff, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ObjectDiff) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []FieldDiff and assigns it to the Fields field.
func (o *ObjectDiff) SetFields(v []FieldDiff) {
	o.Fields = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObjectDiff) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectDiff) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObjectDiff) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObjectDiff) SetName(v string) {
	o.Name = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *ObjectDiff) GetObjects() []ObjectDiff {
	if o == nil || o.Objects == nil {
		var ret []ObjectDiff
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectDiff) GetObjectsOk() (*[]ObjectDiff, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *ObjectDiff) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []ObjectDiff and assigns it to the Objects field.
func (o *ObjectDiff) SetObjects(v []ObjectDiff) {
	o.Objects = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ObjectDiff) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectDiff) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ObjectDiff) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ObjectDiff) SetType(v string) {
	o.Type = &v
}

func (o ObjectDiff) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fields != nil {
		toSerialize["Fields"] = o.Fields
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Objects != nil {
		toSerialize["Objects"] = o.Objects
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableObjectDiff struct {
	value *ObjectDiff
	isSet bool
}

func (v NullableObjectDiff) Get() *ObjectDiff {
	return v.value
}

func (v *NullableObjectDiff) Set(val *ObjectDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectDiff(val *ObjectDiff) *NullableObjectDiff {
	return &NullableObjectDiff{value: val, isSet: true}
}

func (v NullableObjectDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


