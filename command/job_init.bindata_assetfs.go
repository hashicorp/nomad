// Code generated by go-bindata.
// sources:
// command/assets/example-short.nomad
// command/assets/example.nomad
// DO NOT EDIT!

package command

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commandAssetsExampleShortNomad = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\x4b\x6e\x83\x30\x10\xdd\x73\x8a\xa7\x59\xb7\x15\x49\x94\x54\xad\xc4\x49\xaa\xa8\x32\xf6\x94\xb8\xc1\xd8\xb2\x0d\x6d\x14\x71\xf7\x0a\x12\x1c\xb3\xe8\x86\x41\xef\x33\x9f\xe7\x6f\x5b\x83\xf8\x57\x18\xd7\x32\xe1\x5a\x00\x4a\x44\x21\xb9\x8b\xec\x03\x2a\x7c\x90\x92\x1b\x3a\x16\x05\xd0\x78\xdb\x3b\x90\x14\xf2\x74\x97\x02\x51\x84\x33\xc8\xb3\xd2\x61\x81\x00\xe5\xf5\xc0\x1e\x15\x48\x59\x79\x66\x4f\xc5\x9d\x90\xb6\xfb\xd2\x4d\xd2\x01\xda\x88\x86\x27\xe1\xdc\xe1\x7d\xf7\xb2\xa5\xc4\x39\xeb\xe3\xa7\x11\x2e\x93\x03\xaa\x46\x85\xc3\xee\xf5\x2d\x61\x63\xb1\xd4\xfb\x8f\xe7\x60\x7b\x2f\x39\x64\x46\xe9\xfa\xa9\x54\xd8\x97\x65\x02\x0d\x1b\xeb\x2f\xa8\xb0\xdd\x1f\x12\xd8\x71\xfc\xb1\xfe\xbc\x1a\x6a\x6a\x1d\xa7\x2c\x36\x65\x06\x4e\xeb\x81\x54\x4d\xb8\x8e\xff\x2f\x13\xd8\x0f\x5a\x72\xd6\xae\x13\xe6\x71\xf1\xf3\x2d\xcc\x44\x46\xd1\xdc\x42\x6f\x5a\x5b\x8b\x96\x9e\x96\xb8\x8f\xab\x58\xe6\x68\xeb\x87\x4d\x9e\x58\xae\x57\x9e\xa7\xdc\x4e\x26\xd1\xea\x21\x9b\x01\xc4\x8b\x4b\x64\x94\x2e\xa7\xf4\xf4\xee\x83\x68\x27\x6a\x53\x86\x95\x4b\x1b\xb6\x7d\x9c\x5d\xdb\x8c\x79\xdc\xbc\x7c\xc7\x62\x2c\xfe\x02\x00\x00\xff\xff\x5b\xb2\x0b\x06\x58\x02\x00\x00")

func commandAssetsExampleShortNomadBytes() ([]byte, error) {
	return bindataRead(
		_commandAssetsExampleShortNomad,
		"command/assets/example-short.nomad",
	)
}

func commandAssetsExampleShortNomad() (*asset, error) {
	bytes, err := commandAssetsExampleShortNomadBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "command/assets/example-short.nomad", size: 600, mode: os.FileMode(420), modTime: time.Unix(1565791109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commandAssetsExampleNomad = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5b\x5f\x6f\x24\x37\x72\x7f\xd7\xa7\x28\xb4\x02\x5c\x02\x48\xb3\x92\xd6\xb2\xe3\x05\xe6\xc1\xf6\xe5\xe2\x4d\xe2\x4b\x10\x3b\x39\x04\xf1\x41\x60\x77\xd7\x4c\x73\xc5\x26\xdb\x24\x7b\x66\x67\x17\xfa\xee\x41\x15\xff\x34\xbb\x35\xb3\x2b\x6b\x91\x93\x1f\x76\xd7\x43\xb2\x58\xac\xfa\xd5\x5f\xb2\xcf\xe1\x97\x0e\x2d\x42\x23\x34\x18\xad\x0e\x50\x23\x08\x70\x52\x6f\x15\xc2\x3b\x53\x43\x8b\x1b\xa9\xa5\x97\x46\xc3\x80\x16\x36\x52\xe1\x0a\x7e\xe9\xa4\xe3\x51\xe9\x40\x8b\x1e\xdb\xb3\x73\xa8\xf0\xbd\xe8\x07\x85\x15\x38\x03\xd2\xc3\x5e\x2a\x05\x8d\x45\xe1\x89\x22\x4d\xde\x4b\xdf\x81\xef\x10\xde\xfe\x11\x84\x6e\xe1\xcf\xa2\xc7\x69\xd9\xea\xec\x8c\x99\x81\xea\x9d\xa9\x2b\x70\x5e\xe8\x0f\x82\x36\xa0\x15\xde\x0c\x97\xbd\x71\x1e\x1a\xa3\x37\x72\x3b\x5a\xc1\x1c\x99\x81\xff\x92\x9a\x27\xbd\x33\xf5\xd9\x39\xb8\x01\x1b\xb9\x91\x0d\xcf\x58\xc1\x77\x89\x4f\x01\x2d\x36\x4a\xd0\xca\x1d\xce\x67\x81\xd9\x80\x17\xee\x9e\xf6\x12\x1e\xfe\x6c\x7a\x41\x27\x72\x9d\x19\x55\x0b\x76\xd4\x2b\xf8\x17\x53\x3b\xe8\xc4\x8e\xce\xb2\x55\xa6\x16\x4a\x1d\x60\xd4\xf2\xb7\x11\x59\x02\x17\x60\x34\x82\xb1\xd0\x0b\x7d\x60\x62\xb0\xb5\x66\x1c\xdc\x05\xec\x3b\xd9\x74\x67\xe7\x20\x2c\x12\x9b\xbd\x43\xb5\x43\x07\x8d\x51\x0a\x1b\xda\xde\xd1\xfe\xcb\xe5\x6e\x75\x76\x7e\x76\x0e\x7f\xa2\xdf\x8c\x45\x90\x7a\x63\x6c\x1f\xd8\x25\xe1\x45\xb1\x39\x30\xe1\xf0\xa5\xd4\x2e\x60\x50\x28\x1c\x82\x43\x3c\x3b\xe7\x61\xa3\x95\xd4\x08\xad\x69\xc6\x1e\xb5\x8f\x74\xfc\x1b\xde\x84\xfe\xeb\xbc\x1f\xdc\x9b\x57\xaf\xf6\xfb\xfd\x4a\x93\x00\x06\x6b\xde\x61\xe3\x57\xd2\xbc\x6a\x4d\xe3\x5e\xbd\x33\xf5\xe5\x4c\x6a\xf4\xcb\xaa\xf3\xbd\x3a\x3b\x3f\x23\x19\x4f\x00\xf8\x78\x06\x10\x75\x69\x71\x2b\x8d\xae\x60\x10\x56\xf4\xe8\xd1\x26\xc9\x63\x50\x6c\x18\x27\x0d\xb2\x98\xc0\x1b\xc0\xf7\xd8\x8c\x1e\x93\x4a\x57\xf0\x76\xc3\xf4\x4c\x2f\xbd\xc7\xf6\x02\x3c\xa1\x4f\xea\x0e\xad\xf4\x81\x4a\x8b\x1b\x31\x2a\x9f\xa8\x91\x42\x48\xa6\x55\xd0\x54\xb5\xe2\xf5\x71\x70\x9d\x7f\x3e\x9b\xd8\x6c\x85\x17\x0d\x6a\x8f\xd6\x9d\xe6\x55\x49\xe7\x89\x6c\x31\x39\x72\x1d\x90\xc2\xe4\x6a\x24\x8c\x3a\xd9\xa2\xc5\x16\xf6\x1d\x6a\x18\x94\x68\xa4\xde\x06\xbe\x49\xb7\xd1\x80\xfa\xd1\x79\x9a\x3f\x58\xb3\x93\x2d\xb6\xc4\x66\x49\x7b\x0d\xff\x5b\xb5\xcd\x75\xf5\xd7\x82\x51\x7f\x18\xb0\xe4\xb0\x31\xda\x5b\xa3\xa2\x95\x1c\x06\x3e\xf7\x3b\x53\x47\xd8\x81\xec\x07\xd1\x44\x29\xb9\xa6\xc3\x76\x54\x68\xff\xe0\x98\x60\x8b\x8d\x74\x0c\xff\xc0\x23\x12\x32\x22\x6f\x73\x3b\x93\x2e\x9a\x9a\x50\x0c\xbe\x28\x6f\x07\xde\x30\xa5\xca\xa1\xdd\xc9\x06\xab\x15\x03\x56\xc0\x66\x54\x2a\xcb\x8b\xc0\x41\xac\x39\x5e\xeb\x3b\x94\x16\x5a\xb9\xd9\xa0\x45\xdd\xa0\x9b\xa1\x95\xa8\x9d\xc2\x2b\xab\x91\x67\x1c\xb3\x8a\x92\xcc\xa7\x21\x9f\xa8\x3c\x15\xf6\x84\x82\x57\x59\x78\x2e\x60\x3e\x10\x61\x89\xaf\xa7\xf3\x17\x9a\x22\x14\x78\x2b\xa4\xf6\xd9\x99\xb1\x2f\x25\x31\xb4\xad\x8c\xd2\x9c\x66\x39\xd8\x18\x3b\xc7\x0a\xe9\x91\x09\x4a\x9d\xd7\x90\x85\x90\x8f\xb0\xe8\xcc\x68\x1b\x76\x1a\xad\x95\xbb\x80\x85\x44\x2b\x6a\x31\xee\xdb\x0b\xf6\xeb\xac\xe3\x80\x52\xe1\x27\xa7\x71\x01\x15\xbb\xaa\xea\x82\x68\x55\x04\xd0\x0a\x14\xee\x50\x5d\xb0\xc2\xdc\x38\x0c\xc6\x7a\x07\x3b\x61\xa5\xa8\x15\x49\xdd\xa3\x1d\x8c\x7a\x82\x56\x8e\xfb\xaa\xc7\xb2\x79\x32\x08\x9e\xa5\xc1\x85\xe3\x9a\xb6\x2f\x75\x79\x5e\x08\x30\xba\x30\x00\xe1\xbd\x95\x35\xb9\xa3\x35\x54\x7f\xf7\x91\xfe\x77\x75\x8f\x56\xa3\x5a\x91\x97\x79\xa8\xe2\xbc\x9d\x50\x23\x32\x3f\x6b\xa8\x94\xd4\xe3\xfb\x30\xf2\x50\x20\x62\x1c\x5a\xe1\x31\xa3\x61\xee\x5c\xc2\x20\xd0\xfe\x1e\xb7\x87\x14\x92\x62\x14\x59\x31\x85\x30\x87\x09\xe6\x79\xd2\xc1\xe8\xb0\x25\x58\x44\x5f\x40\xd8\xd1\x5b\x07\x4a\xde\x23\x58\xa3\x14\xe1\x69\x1c\xb6\x56\xb4\x64\x6c\x8d\xd0\xc2\x4a\xfa\x97\xd0\xd1\x65\xa9\x11\x5f\x6d\x2d\xa2\x86\x16\x07\x65\x0e\x24\x6c\x47\x7e\x77\xf2\xb9\xda\x3c\xe2\x50\x3a\x40\x52\x74\x83\x2d\xb3\x17\x3c\xc1\xe2\x90\x33\xe8\x25\xd8\x91\x43\x30\xb6\x38\xdf\x0a\xfe\x92\x1c\x65\x9e\xc5\xe4\xd8\x93\x49\x0f\x62\x18\x14\x4b\xca\x80\x50\x2a\x0a\x85\x13\x8a\x29\xf6\x3f\x22\x52\x9b\x98\x6f\xd0\x7e\xe9\xb0\xbc\x34\xc1\x9b\xbd\x22\x33\xea\x38\x3c\xf7\x68\xb7\xe4\xb5\x53\xa2\xc2\x93\xff\x40\x4e\xfb\x9e\x84\x38\x58\x6c\xb0\x25\xa7\xf5\x1c\xd0\xcf\x25\xf3\x37\x05\x7c\xd8\xba\x04\x7b\x54\x26\xc1\x3c\xe3\xb3\x17\xef\xef\x28\xb2\x28\x85\xea\x74\x14\xec\xc5\x7b\xd9\x8f\x3d\xe8\xb1\xaf\xd1\x12\x4e\x03\xad\x18\x0c\x88\xda\x80\x96\x64\x41\x6e\x2b\xd1\x5b\xc1\x5b\x1d\x9c\x5a\x23\x1c\xc6\x18\x5e\x10\xce\xf0\xca\xc9\x27\xa1\x23\xd2\x13\x1e\x04\x78\xd9\xb3\xd8\x01\x4a\x3e\x61\x0d\xd7\x67\xb3\x43\x48\x7d\xd7\xa1\x50\xbe\x3b\xdc\xd1\x92\x4f\x1c\x44\x6a\x3e\x08\xcd\xe2\x1f\x84\x52\x26\x08\x2c\x12\x4c\x01\x3a\x62\x2c\x92\x25\x05\x7a\x84\x1a\x37\xac\x76\x4f\x86\xd0\x0b\x7b\x4f\xa0\x73\x79\x12\x41\x60\xd4\xb5\x32\xcd\xbd\x8b\xe4\x36\xa3\xf5\x1d\xda\x62\x1f\x07\x1b\x6b\x7a\xa8\x31\x98\x28\x09\xa0\x8d\x67\x5c\x1c\x83\xdc\xca\xf5\x95\xab\x66\x67\x4d\x13\x5a\x14\x2d\x01\xe7\xf4\x59\xd3\x8c\x22\xd1\x62\x0b\x63\xe9\x66\x76\xf2\x81\x8f\x1c\x67\x43\x44\xf3\xd2\x72\x91\x4c\xe7\x13\xa3\x37\x64\x00\x0d\x27\xc7\xde\x0a\xed\x38\x64\x05\xef\x34\xea\x48\x6b\x05\xbf\xe4\x21\x0e\x75\xc5\x18\x57\x0d\x49\x5c\x42\xaa\xc8\x7c\x72\x4a\x2c\xd5\xc1\x78\xd4\x5e\xf2\x26\xe4\xde\xa0\x16\xcd\x7d\xb6\x73\xb9\x81\x8a\x18\xb9\xb3\xb8\x43\xeb\xab\x89\x3d\x87\x9e\xf6\xf2\x76\x8c\x38\x5a\x8a\x8f\x64\xfc\xba\x9f\x8b\x78\xb0\x66\x6b\xd1\xb9\x67\xc9\x58\xe8\xdf\x21\xe2\xe0\xe2\x33\x91\x1a\xb7\x52\xbb\x90\x40\x12\xf5\x8d\xb4\xce\x3f\x26\x47\x39\xc3\x42\x46\x64\x63\x5c\x76\xb5\x2c\x2e\xe9\x28\x57\x40\xcf\xa4\x48\x26\x20\xf4\x63\xa8\x0b\x47\xe7\xe2\x74\x6d\x41\x6e\xd2\x63\x70\xbf\x73\x33\xe0\x28\xa1\xcd\x63\x82\x8b\x65\x27\xed\x87\x06\x92\x90\xf3\xe9\x2f\x0a\x78\xce\x4f\x36\x89\x8d\xe0\x91\xac\xe5\x91\x96\x82\xb9\x2c\x74\x39\x83\xc5\x31\x2d\xca\x4d\x86\x51\xac\xfd\x68\xc9\x65\x58\x12\x4f\x11\x09\x2a\xe1\x3c\x1d\xa4\x8e\x65\xb2\x29\x63\x27\xf3\x36\x5a\x2c\xaa\xcf\x89\xef\xb8\x48\x6e\x38\x92\x1d\x33\x43\x57\x6a\x83\x4a\x9c\x82\xf2\x9e\x8a\xf5\x48\x2c\x01\x87\x09\x14\x87\x83\x35\x6c\x84\x72\x38\x3b\x3c\x87\xfd\xc3\x29\xf4\x0a\x0f\x4d\x27\xf4\x16\xb3\xb2\x38\x69\xa7\xdf\xf7\xa1\x08\x46\x37\xaa\x84\x3f\x49\x87\x75\xde\x8e\x0d\xd7\xd2\xc9\xff\x47\x99\xc5\x9a\x9f\x63\x6b\xdc\xa2\x2d\xa2\x45\xca\x3f\x22\x2d\x8a\xb5\x66\x24\x59\x9a\x61\x20\x77\x40\xc9\xed\x60\x71\x27\xcd\xe8\x4a\xa1\xac\xe0\xdf\x75\x13\x33\xfb\x01\xad\xf0\x94\xf8\xd2\x41\x7a\xce\xa9\x27\x41\xa6\x0d\x38\xa2\x47\x19\x31\xa0\x0e\xdc\xe5\x08\x05\x57\x6f\x3c\x97\x67\x64\xa6\xc9\x4d\x83\x28\xd2\xa5\x98\x69\x71\xe1\xb9\x89\xa5\x6a\x2f\x24\x7b\xac\x99\xaa\x28\x36\x51\x46\xc4\x05\xe7\x2c\x84\x06\xc5\x9c\x47\x2a\x7f\x0a\xde\xff\x82\xfc\x90\x27\x2a\x59\x25\xf8\xdb\x28\x54\x92\x7b\x63\x46\x9d\xcd\x70\xca\x90\x78\xcf\x7d\x12\xda\xa9\x8c\xed\x2f\xc9\x5b\x44\xd4\xc5\x90\x72\x91\x2a\x32\x72\x03\x91\xb4\xc6\x7d\x24\xb6\x43\xeb\x62\x91\x17\x88\x45\xc7\x31\x0e\x54\x17\xb2\xa8\x64\xcc\x61\x8c\x6a\xcb\xe9\xac\xb3\x64\x83\xe1\x34\xb0\x86\xab\x33\x28\xd3\xde\x5e\x6e\x6d\xc8\x1b\x8f\x64\xbd\x29\xc1\xca\x49\x25\xf9\xb3\xb0\x82\x44\x64\x36\x1b\x30\xa1\xfa\x6f\x6d\x14\xbe\x36\x2d\x2e\x92\x53\x91\x1b\x00\x71\xa9\xd1\xb3\x34\x35\x64\x8f\xed\x67\x92\xb6\x94\xa7\x45\x86\x5f\x24\x51\x8b\x7b\x97\x99\x5a\x92\x5f\x4a\xd5\x7e\x9e\x09\x70\xb2\xab\xa2\x5a\x88\x06\x1d\xc0\x1e\xd7\xe7\xe4\xdb\x89\x3e\x01\x9b\x53\xaa\x50\x29\x46\x3a\x29\x3a\x29\xf2\xc6\xbe\x13\x3a\x76\xdf\x3c\x97\xaa\x84\xcc\x14\x70\x22\x2a\x13\x22\xff\x3e\x8c\x5e\xce\x92\xb3\x7f\x08\x4d\x40\xa6\xb7\xf1\x60\x47\xcd\x1a\x6c\x47\x4b\x7f\x65\x5d\xb9\x4f\xa7\x75\xf3\x03\xf7\x48\x8e\x4a\xba\xbe\x08\xb3\x85\x39\x06\x7b\x0f\x58\x8e\xbe\x21\x57\x27\x9c\x9a\xa6\xe4\x21\x54\x6c\xc1\x49\x54\x4d\x87\xcd\xbd\xab\x72\xfd\x7b\xc7\x21\xca\x55\x65\x9e\x70\xc7\x93\x28\xb0\xc4\xd9\x27\xf8\x3b\x9d\x55\x7e\x32\x9f\x4c\x96\xfd\xf4\xac\xf2\x33\xf9\x64\xca\x61\xa3\xfa\xa3\x9e\x8b\xac\xbb\x85\xd1\xb1\x37\x03\x25\x6a\x54\xe0\xc6\xcd\x46\xbe\x0f\x65\x63\xf5\xfa\x2a\x8a\xe3\xfa\xb6\xaf\x9e\x96\x92\xfe\xfc\xf9\x8c\xf3\x49\x89\x50\x8a\x87\x9f\xca\x38\x7f\x47\xae\xd9\xe5\x04\xf0\xa9\x67\xbf\xe9\xe3\xd1\xbb\xea\x74\xa2\x78\xdb\x57\x73\x3f\x17\x9b\x28\x8f\x7a\x3d\xe0\x90\xa3\xd1\xbc\xc7\x1c\x63\x25\x77\x0b\x2f\xf9\x60\xd8\x02\x27\x4f\xe7\xd9\x4a\x43\x23\x1a\x1a\x25\xb9\x2f\xf7\x5d\x6a\x2c\xc7\xb2\x57\x44\x1b\x4c\x36\x16\x0b\xdf\xe8\xc6\xa2\x99\x9f\xa7\xe5\xcf\x28\x58\x67\x07\xfa\x9b\xba\xc1\xd0\x14\x28\x9c\x60\x38\x69\xd5\x88\xa6\x8b\xfd\xe5\xa2\xcf\x36\xea\x13\xf9\xdc\xc2\x41\xce\x02\xea\x4c\x0f\xd9\xf8\xb2\x8f\x1a\x75\x8b\x36\x54\xa9\xb1\x43\xc1\xe6\x13\xda\x3c\x09\xba\xda\xe8\x4b\x8d\xdb\x70\xa3\x50\xf6\x45\x93\x7f\x35\x70\x1d\x83\x23\x7b\xc7\x65\xad\x6a\xd1\x79\x61\xa7\xfe\x60\x6a\xba\x32\x6c\x52\x68\xac\xb1\x13\x3b\x69\x2c\xab\x85\xd8\xcf\xc9\x25\xf7\xc5\x39\x19\x25\xef\x3a\xea\x0c\xee\x32\x22\xc6\x3d\x60\x30\x4a\x36\x53\xbb\xa8\x16\x6e\xc2\x4a\x6a\xd0\x2e\x12\x96\x27\x03\x65\x71\x8e\x05\x54\x9e\x00\x96\x69\xd3\x67\x02\x26\x72\x90\x20\x93\xe8\xa5\xc3\x07\xc0\x24\xb9\x4f\x90\x10\xde\x63\x3f\x70\x1f\x9b\x34\x9f\x85\x51\x34\x96\x26\x8f\xc1\x5d\xcf\x9d\x50\xab\x48\x2c\x2f\x5e\xc3\x4d\xfc\x29\x4d\xe1\x4a\x32\x97\x1f\xd3\x2d\x03\x2a\x71\x32\x05\x47\x8a\x8b\x22\xb5\x78\xf7\x42\xfa\x14\x0c\xe2\x29\x92\x4f\x67\xe7\x18\xa0\x10\x7c\xa4\xf4\xd0\x2d\x0a\x22\x00\xde\x8b\x5d\xf4\x6d\x72\xd1\xb9\x45\x62\xda\xe3\x77\x08\x7b\xb2\x88\x4e\x0c\x03\xa6\xca\x33\xee\x43\xe4\x23\x17\xd8\x26\x5a\x55\x12\x40\xc5\xc1\x6e\xd6\x8e\xcb\xb2\xca\x87\xa6\x4d\x03\x53\xd1\x2e\xf1\xbd\x4f\x94\x92\x9a\x46\xed\x63\xc9\x4f\xa3\x25\x11\x3a\x5b\xa2\x61\xd0\x81\x36\x13\xb2\x93\x5d\x27\x6a\xdc\x01\xc8\xac\x11\xeb\x35\x25\xca\x1d\xdf\x49\x3e\xe6\x30\xca\x8b\x69\xaf\xe3\x4e\xfc\xdb\xc3\xcc\x56\x71\xe8\xb0\x47\x2b\xd4\x5d\x2b\xdd\xfd\x74\x3f\xa9\x43\x1d\xe4\xa2\xb3\xa6\xe0\xe3\xa5\x92\x1f\xc8\x21\x40\x5e\x04\xb4\x28\x57\x4f\xce\xa3\x68\x19\x7f\xd0\x09\xdb\xf2\x20\x58\xfc\x6d\x94\x36\xde\xc1\xfc\xc0\x4e\xdb\xc5\x28\xe5\x8b\x5e\xfe\xcc\x61\x91\x18\x02\x86\x0e\x8f\x88\xb8\x94\x66\xa4\x9b\x82\x4c\xa2\xf0\x85\x2b\xf8\x2e\xf7\x5b\x42\x74\x92\xba\xf0\x7a\x21\xb6\xb8\x2e\x5e\x5d\x86\xa8\x34\x3f\xd4\x73\x7d\xc6\x71\x79\x26\xd7\x91\x5b\x36\x9f\xbd\xca\xf9\x62\xd7\x31\x67\x64\xe9\x41\xe6\xa3\x85\x23\xe1\x52\xcb\x79\xd9\xdc\xb3\x53\xf5\x76\xc4\x74\xbd\x55\x96\x6d\x65\x11\x36\xbb\x83\xcb\x84\x58\xc4\x83\xc5\x0d\xc5\x1b\x13\xa2\x78\x71\x23\xd0\x96\x89\x4f\x11\xdb\xb9\x0e\x8a\x5d\xed\x82\x50\xaa\x16\xd8\x9f\x08\x2f\xa6\xb4\x6f\x74\xb8\x19\x55\xc8\xdf\x8b\x3c\xc4\x93\xb6\x68\x66\xa6\x53\xe6\x27\x03\x15\x7b\xce\x83\x68\xac\x71\x65\x39\x9e\x8a\xfe\x55\x5e\x16\x65\xb1\x66\x51\xa4\x5f\xf3\xe8\xcf\xb1\xe8\xcd\xfc\x85\x46\x5c\xec\x2b\x64\xac\x16\x1b\xb4\xd2\x62\xe3\x8d\xe5\xab\x10\xb1\xdc\xe6\xe8\x44\x6f\xca\x82\x67\x62\x2d\x6d\x1a\x79\x9b\x3b\x65\x27\x3f\x7c\xa2\xa9\x47\xa3\xc4\xdc\x4f\xdf\x13\x1b\x6c\x09\xed\x31\xb3\x0e\xe9\x83\xdf\x93\xa7\x29\x0c\x29\xd6\x49\x89\x15\xa6\xb6\x86\xd7\x57\x57\xc9\xc3\xcc\xfa\x53\x1b\x7e\x6a\x71\xc8\xce\x05\xb5\xa8\xd9\x66\x62\xbf\xc3\x85\xeb\xf1\x81\x7b\x65\xf9\xc6\x36\x82\x87\xef\x52\x53\x22\x93\xa2\x7b\x00\x49\xba\xc3\x72\xfc\xc2\x00\xbd\x60\x64\x3c\xd3\x70\x97\x5c\xbe\x80\xc9\x26\x16\x96\xc6\x4a\x45\x43\x18\xc9\x86\xca\xb7\x07\xe9\x0a\x6f\x91\x19\xc6\x57\x02\x62\x21\xa5\x52\x48\xc7\xa8\xf0\x45\x20\x2d\x59\x4d\x97\xf5\x0f\x39\xd4\xc3\x79\x4c\x12\x97\xcd\x61\x27\x2d\x17\xe1\x89\x0c\xcf\x9a\xae\x45\xa2\x9c\xe3\xe3\x13\x38\xe6\x1d\x26\x8d\xcb\x74\xa5\xe4\x2e\xf7\xe8\xfc\x75\x55\xbc\x1b\x58\x2d\x19\x21\x86\xf3\xc4\x82\xcd\x3d\xca\x6d\x97\xdb\x04\xe9\x12\x51\xea\x96\xc4\x4c\x96\xa9\x42\x62\x3b\xc1\xab\x58\x5b\x36\x9a\x28\xc4\xf6\xa1\x97\xcb\xaf\x88\x30\xab\x61\x05\x6f\x7d\xf9\x58\x00\x6e\xaf\x28\x3c\x73\xd8\x42\xbf\x7a\xc4\xcb\x1a\xae\xa3\x69\x9c\x2f\xe3\xaf\x1b\x2c\x8a\x36\x9b\x46\x68\x87\xcd\x2d\x43\xea\xc6\x72\xde\xc9\xfd\xf2\x90\x25\x83\x37\x0a\xad\xd0\x0d\x86\x46\x52\x4c\x46\xa5\x0d\x4d\xa1\x54\x36\xd7\x87\x14\x47\x43\x55\xb8\x40\x04\xbb\xc4\xa2\xcc\x4e\x58\xcf\x45\x5c\xe0\x0e\xcc\x2e\xc9\xff\xf7\xdb\xd5\xfc\x80\x2f\x60\x55\x81\x81\xc7\x36\x15\xcf\xf6\x92\x16\xe5\x85\xdd\xa2\x77\x4b\xac\x86\x1a\x3b\xdb\xd6\x80\x96\xd6\x8a\x6d\xa8\xb6\x97\xfa\x0a\x97\x4a\xc6\x02\x8a\xa6\x8b\x24\x8f\x58\x64\x9e\x3b\x2d\x82\x38\x9b\xed\x08\x05\x1b\xdc\xc7\x72\x18\xd2\xde\xb0\x86\xaf\xaf\xca\x91\x87\x13\x54\xa2\xd9\x9e\xa4\xf2\xd5\x11\x2a\x8f\x6c\x22\x3c\xd5\x48\xc5\x23\xb7\xdd\x1d\xa5\x9d\x64\xc3\x3b\xd9\x8e\x42\xc1\xa8\x25\xb7\x7c\xf7\xc6\xde\x5f\x80\x1b\x9b\x0e\x04\x55\x97\x7f\x34\xcd\x7d\x4c\x42\xf8\xdd\x83\x17\x52\xa3\xbd\x80\x3d\xd6\xa5\x65\xf0\x93\x90\x5a\xf8\xa6\x83\xc1\x9a\x06\x1d\xe5\xa3\xcf\x45\x78\xc9\xee\x0b\xd4\x88\x9c\xef\x2e\xd0\xcd\x99\x5a\x65\xb1\x95\xae\x5a\x54\x89\x55\x78\x55\x73\x3a\x35\xe0\xb5\xf1\xe9\xcd\xa2\xa7\x13\x01\x9a\xe9\xa5\xda\x92\x59\x48\x05\x5a\x58\xb9\x86\xaa\x65\x5d\x2c\x8b\xc5\xd0\x0c\x38\xf1\x5a\x64\x7a\xf1\x33\xbd\xd2\xca\x4f\xbe\x1c\x0c\xc2\x39\x9c\x32\xc3\x90\x21\xa9\x43\xba\x63\x48\x4c\x1b\x98\x57\x50\xe9\x0a\xd2\x0b\xa9\xd8\x84\x66\xf4\xdd\x54\x7d\xda\xe9\x01\x25\xa7\x24\x64\x50\x81\xe8\x05\x38\x53\x3e\xc4\xca\xd3\xc2\xf0\xc4\xd2\x4c\xc3\x9b\x23\x18\x4a\x72\x0a\x3c\x4c\x96\x02\xb2\x17\x5b\xf6\x19\xac\xb6\x37\xaf\x57\x37\x55\x1e\x1b\x8c\xf5\x77\xbd\x18\x8a\xe9\x00\x6d\x4d\x66\xf9\xfa\x9b\x6f\xf3\x6f\xc9\x2a\x1f\x16\x32\xa7\x2a\x7b\x23\x1a\xff\xa9\xf2\xae\x35\x7b\xad\x8c\x68\xf9\x1a\x35\xce\x0f\x6d\xd7\x29\x49\xb5\xd8\x1b\xf2\x8e\xe1\x85\xd6\x60\xa5\x99\xa4\x1d\x0a\x3a\x2c\x1f\x02\xc6\x07\x80\x64\x97\x8d\xd1\x3b\xd4\x54\xfc\x4d\xd9\x6b\xee\x78\x93\x98\xd2\xf6\x44\x66\xfe\x48\x6f\x23\x55\xc8\xf0\xc8\x89\x82\x46\x6c\x83\x97\x8c\xe0\x9b\xf2\x7b\xde\xf8\x2d\x77\x98\x07\xe3\x9c\xac\x15\xe7\xe3\xa9\x90\xf4\x47\x25\xd1\x8f\xca\x4b\x4a\x50\x42\xad\x5f\x80\x3b\x0b\x24\x4f\x49\x8b\xa7\xea\x20\x4f\xfe\x1d\x79\xe6\x82\x83\x47\x1e\xe3\x49\x3e\xa3\xdc\xfb\x99\x7e\x23\x31\x32\xf9\x8e\x92\x68\x86\xc0\xc7\x62\x9f\xa8\xf8\x35\x54\xb4\xdf\x9b\x57\xaf\x36\xc6\xac\x1a\xd3\x4f\xb4\xbc\xb0\xab\xed\x87\xaa\x58\x13\x1e\x58\xba\x19\x1d\x80\x70\xd7\x30\xf6\x44\xab\x6f\x6f\xdf\x34\x5f\x09\xf1\x8f\xb7\xaf\x45\x7b\x73\x73\x7d\xfb\xd5\xcd\xd7\x58\x7f\xd3\x7e\x73\x25\x6e\xae\xbf\xbd\xb9\xc1\x6f\xbe\xfd\xaa\xa4\xf8\x90\xff\xbd\xc4\xb9\x32\x5b\x77\x04\xe3\x24\xcd\xb2\xe7\x4c\xba\xe8\xcc\x3e\x3c\x4a\x56\x66\x1b\x21\x56\x16\x9d\xe5\x8b\x20\xae\x6e\xb8\xb9\x60\x1c\xd2\x7c\x17\x17\x10\x08\xc9\xa9\xe8\x15\xfc\x9b\xd9\x6e\x09\xba\xfc\x78\x8c\xaa\x9b\x16\xea\xc3\x04\xa5\x90\x2a\x5e\x40\x3d\xc6\x07\x8a\x33\x4e\x63\xd2\x47\x66\x40\x81\xdf\x5e\x6e\x2d\x85\xad\x36\xbf\x7c\x33\xa5\x8b\xe1\x27\xbb\x66\x0b\xd6\xf8\x09\x66\x54\xef\x92\xfb\x98\x99\xce\x97\xc0\xb4\x64\xf0\xc5\x20\x4a\x4c\x1c\x87\x27\x6b\xa1\x84\x54\x2f\xde\xdf\x05\xad\x00\x3f\x56\xbc\xbe\x3a\x32\x78\x17\x0b\xd5\xeb\xdb\x93\x10\xca\x5d\xa5\xe2\xc6\xc3\x35\x56\xd6\xf9\x61\x77\xd1\x89\x8a\x6d\x44\xf2\x49\x33\xd7\x11\x9f\x7a\xaf\xe0\x3f\xd3\x6b\xd6\x45\x03\xab\x51\x63\x8b\xd0\x63\x6f\xec\xe1\x02\x34\xfa\x90\xc7\x34\xc3\x18\xde\xa6\x92\x8e\x56\x05\x63\x0c\x2b\xc7\x1d\xf4\x1c\xa2\xb9\x84\x4a\x8f\xca\x49\xee\xd0\x8b\xa6\x23\x7d\x84\x6b\xd2\x90\xfc\xd0\x42\x33\x6e\xbb\xc2\x87\x47\x96\x1a\x31\x88\x86\x8a\x99\x2f\x40\xc9\x23\x69\xbd\x18\x54\x32\x27\xc7\xf0\x32\xb5\x0a\xa7\xf8\xd9\x0c\x63\x40\xca\xed\xd5\x15\x9c\xf3\x9f\x3f\xfd\xf8\x21\x0f\x07\xdd\xc0\x1a\x6e\x6e\xbf\x86\x73\xfa\xf3\xa7\xef\xf3\x60\x54\xd8\x2c\x1a\xf7\xb5\xe4\x9e\x79\x06\x1e\xc4\xb8\x0d\x55\x5b\x57\xf0\xf1\xe1\xb3\x51\x3a\x3d\xb6\xfe\x44\x90\xb6\xb8\x95\xce\xa7\x1b\x9c\xd0\x2b\x8f\x77\x71\xb4\x34\xd3\x4b\x4d\xfe\xf0\x33\xb4\xd2\x35\xe4\x43\x0e\x80\x7a\xcb\xef\x90\x72\x4a\xd5\x8c\xd6\xa2\xa6\x24\xea\x07\xa3\xdd\xa8\x62\xe8\xce\xef\xd5\x38\x52\x8b\x7b\x9c\xd1\x13\x6d\x6b\xd1\x39\x7e\xf0\x13\x7a\xf5\x81\x43\xaa\x98\xe3\x75\x9d\xf4\x01\x93\x9d\x71\x7e\xe6\x59\x49\x24\x5f\x02\xb9\x85\x94\x5e\x0c\x70\x91\x8f\x63\x70\x4b\x62\x9a\xe0\xc1\x15\x64\x4a\xed\x2e\xc3\x75\x5f\x1e\xf4\x62\x1b\x3e\x8a\x88\xdf\x6f\x5c\xa4\x0b\xc1\xbf\xce\xf2\x3f\x4e\xa9\xeb\x69\x59\xb8\xb7\x2f\x21\xc8\xbb\x04\x50\x57\x42\xc9\x5d\xb1\x47\x7c\xd2\x1f\x07\x7d\x33\x94\x43\xe5\xf5\x0e\xdf\x7c\x17\xab\x64\x8f\x66\xf4\xbc\xea\xa6\x18\x39\x85\x61\x8f\xfd\xa0\xca\x87\xd2\x47\x40\xdc\x0b\x4d\xa1\x4a\x40\x9a\x9c\x0b\xb8\x29\xfb\x38\x92\x03\x52\x0a\x48\x9e\x78\x48\xdf\x72\xa4\xe5\xe1\x23\xaf\xf8\x1d\x87\x3a\xc0\x30\x2a\x35\x6f\xfd\x72\x1a\x1b\xf0\x4d\x54\xfe\x9b\x6f\x10\xbd\x81\xc1\x0c\x23\x53\xb0\xa3\xe6\xab\xff\xf9\xae\x53\x3b\xf1\x79\x50\x5d\x0a\xe3\xc5\xb0\x9a\x18\x39\x1e\x4b\xb3\x1c\xcb\x78\xca\xc9\x76\xfe\x6f\x0d\xd5\xe5\xe5\xe5\xaf\xfa\x1e\x0f\x6f\xe0\xe3\x47\xb8\xc7\x03\xfc\x9a\x4c\xf1\x55\x7f\xb8\xbc\xc7\xc3\xaf\x15\x3c\x3c\x94\x79\x5a\x8b\xce\x4b\x1d\x0e\x13\xbe\x1f\x30\x8d\x50\xaf\xf8\x53\xbb\x43\xaf\xca\xa9\xe1\x91\xde\x1d\x5f\x56\xf1\x54\x27\xb7\x5a\x1c\x9b\x12\x06\x68\xca\xcf\x6f\xff\xf9\xc7\xff\xfa\x8f\xea\x64\x24\x7f\x04\xc5\x86\x1f\x88\x3a\x53\xb6\x5a\xe2\xa3\x3e\xd4\x3b\x69\x8d\xe6\x26\x64\xfa\x1c\x64\x42\xe3\xe2\x6e\x21\x5d\x6a\x70\x3a\x18\xbe\x4f\xa0\x4a\x8e\xb3\x8f\x50\x6a\x4e\xf1\xb9\xc6\xe5\x05\x63\xea\x32\xb2\x80\x09\xaa\xd8\x1e\xc7\x67\x7c\xb8\xf8\x18\x80\x9f\xd5\xd7\x1a\xaa\x7f\xfd\xa7\xff\x59\x3f\x47\x4f\x73\x2d\xa1\xde\x95\x13\x51\xef\x0a\x44\x94\xf7\x21\x8f\x84\xbf\xa3\x23\x3c\x25\x15\xf7\x06\x44\xc3\xb9\x11\x39\x04\x73\x8f\x9a\xa5\x51\x78\x82\x1f\x85\xeb\xe4\x0f\xc6\x0e\x51\x2e\x74\x1a\xb4\x41\xd0\x81\x54\xf8\x65\xfa\xf0\x2c\xbf\x37\x68\x67\x91\x47\x8c\xbe\x33\x56\x7e\x48\x5f\x95\xf4\xfd\xa8\x43\x4f\x98\x3f\x8c\x60\xea\x2b\xf8\xfe\x30\xa5\xeb\x81\x3c\x2b\x52\x6a\xb2\xb1\xd9\x21\x03\xb7\x52\x17\x2f\x4b\x77\x52\xf0\xfd\xe8\x11\x38\x85\xbc\x2e\x45\x52\x5e\x3b\x71\xb6\x13\x52\x89\x58\xaf\x1e\x75\x1d\xe5\x71\xa3\xe4\x3a\xa1\x5b\x95\xb3\x52\x8d\x7b\x31\x45\x6c\xda\xcb\xe2\xce\x14\xdf\x81\x76\x98\xfd\xde\x3d\x7e\x51\x69\x30\xd3\xed\x8b\xf9\x34\xe6\xe2\xb8\x43\xe3\xa1\x99\x75\xf0\x2b\x11\x19\x8b\x03\x8e\xb5\x4d\xab\x29\xd0\x6e\xac\xd1\x1e\x75\x9b\x63\xed\xff\x83\x37\xfa\x61\xf6\x2d\x63\x0c\xa8\xe9\x52\x2d\x50\x50\xa1\x3d\xcf\x7e\x23\x7d\x63\x5c\x23\xdc\x4b\x72\x0f\x33\xad\xd2\x4f\xf3\x56\xcb\xdb\x7c\xf1\x50\x3c\x8f\x89\xef\x61\xa6\x1a\x82\xd6\xdd\xa5\xcd\x29\x98\xa7\x38\xff\xc0\xcf\xbd\x1e\xce\xfe\x2f\x00\x00\xff\xff\x81\x2c\xac\x37\x32\x3d\x00\x00")

func commandAssetsExampleNomadBytes() ([]byte, error) {
	return bindataRead(
		_commandAssetsExampleNomad,
		"command/assets/example.nomad",
	)
}

func commandAssetsExampleNomad() (*asset, error) {
	bytes, err := commandAssetsExampleNomadBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "command/assets/example.nomad", size: 15666, mode: os.FileMode(420), modTime: time.Unix(1565791153, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"command/assets/example-short.nomad": commandAssetsExampleShortNomad,
	"command/assets/example.nomad": commandAssetsExampleNomad,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"command": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"example-short.nomad": &bintree{commandAssetsExampleShortNomad, map[string]*bintree{}},
			"example.nomad": &bintree{commandAssetsExampleNomad, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
