/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// CSIMountOptions struct for CSIMountOptions
type CSIMountOptions struct {
	FSType *string `json:"FSType,omitempty"`
	MountFlags *[]string `json:"MountFlags,omitempty"`
}

// NewCSIMountOptions instantiates a new CSIMountOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSIMountOptions() *CSIMountOptions {
	this := CSIMountOptions{}
	return &this
}

// NewCSIMountOptionsWithDefaults instantiates a new CSIMountOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSIMountOptionsWithDefaults() *CSIMountOptions {
	this := CSIMountOptions{}
	return &this
}

// GetFSType returns the FSType field value if set, zero value otherwise.
func (o *CSIMountOptions) GetFSType() string {
	if o == nil || o.FSType == nil {
		var ret string
		return ret
	}
	return *o.FSType
}

// GetFSTypeOk returns a tuple with the FSType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSIMountOptions) GetFSTypeOk() (*string, bool) {
	if o == nil || o.FSType == nil {
		return nil, false
	}
	return o.FSType, true
}

// HasFSType returns a boolean if a field has been set.
func (o *CSIMountOptions) HasFSType() bool {
	if o != nil && o.FSType != nil {
		return true
	}

	return false
}

// SetFSType gets a reference to the given string and assigns it to the FSType field.
func (o *CSIMountOptions) SetFSType(v string) {
	o.FSType = &v
}

// GetMountFlags returns the MountFlags field value if set, zero value otherwise.
func (o *CSIMountOptions) GetMountFlags() []string {
	if o == nil || o.MountFlags == nil {
		var ret []string
		return ret
	}
	return *o.MountFlags
}

// GetMountFlagsOk returns a tuple with the MountFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSIMountOptions) GetMountFlagsOk() (*[]string, bool) {
	if o == nil || o.MountFlags == nil {
		return nil, false
	}
	return o.MountFlags, true
}

// HasMountFlags returns a boolean if a field has been set.
func (o *CSIMountOptions) HasMountFlags() bool {
	if o != nil && o.MountFlags != nil {
		return true
	}

	return false
}

// SetMountFlags gets a reference to the given []string and assigns it to the MountFlags field.
func (o *CSIMountOptions) SetMountFlags(v []string) {
	o.MountFlags = &v
}

func (o CSIMountOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FSType != nil {
		toSerialize["FSType"] = o.FSType
	}
	if o.MountFlags != nil {
		toSerialize["MountFlags"] = o.MountFlags
	}
	return json.Marshal(toSerialize)
}

type NullableCSIMountOptions struct {
	value *CSIMountOptions
	isSet bool
}

func (v NullableCSIMountOptions) Get() *CSIMountOptions {
	return v.value
}

func (v *NullableCSIMountOptions) Set(val *CSIMountOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCSIMountOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCSIMountOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSIMountOptions(val *CSIMountOptions) *NullableCSIMountOptions {
	return &NullableCSIMountOptions{value: val, isSet: true}
}

func (v NullableCSIMountOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSIMountOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


