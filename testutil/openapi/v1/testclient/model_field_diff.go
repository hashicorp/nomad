/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// FieldDiff struct for FieldDiff
type FieldDiff struct {
	Annotations *[]string `json:"Annotations,omitempty"`
	Name *string `json:"Name,omitempty"`
	New *string `json:"New,omitempty"`
	Old *string `json:"Old,omitempty"`
	Type *string `json:"Type,omitempty"`
}

// NewFieldDiff instantiates a new FieldDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldDiff() *FieldDiff {
	this := FieldDiff{}
	return &this
}

// NewFieldDiffWithDefaults instantiates a new FieldDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldDiffWithDefaults() *FieldDiff {
	this := FieldDiff{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *FieldDiff) GetAnnotations() []string {
	if o == nil || o.Annotations == nil {
		var ret []string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDiff) GetAnnotationsOk() (*[]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *FieldDiff) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []string and assigns it to the Annotations field.
func (o *FieldDiff) SetAnnotations(v []string) {
	o.Annotations = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FieldDiff) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDiff) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FieldDiff) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FieldDiff) SetName(v string) {
	o.Name = &v
}

// GetNew returns the New field value if set, zero value otherwise.
func (o *FieldDiff) GetNew() string {
	if o == nil || o.New == nil {
		var ret string
		return ret
	}
	return *o.New
}

// GetNewOk returns a tuple with the New field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDiff) GetNewOk() (*string, bool) {
	if o == nil || o.New == nil {
		return nil, false
	}
	return o.New, true
}

// HasNew returns a boolean if a field has been set.
func (o *FieldDiff) HasNew() bool {
	if o != nil && o.New != nil {
		return true
	}

	return false
}

// SetNew gets a reference to the given string and assigns it to the New field.
func (o *FieldDiff) SetNew(v string) {
	o.New = &v
}

// GetOld returns the Old field value if set, zero value otherwise.
func (o *FieldDiff) GetOld() string {
	if o == nil || o.Old == nil {
		var ret string
		return ret
	}
	return *o.Old
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDiff) GetOldOk() (*string, bool) {
	if o == nil || o.Old == nil {
		return nil, false
	}
	return o.Old, true
}

// HasOld returns a boolean if a field has been set.
func (o *FieldDiff) HasOld() bool {
	if o != nil && o.Old != nil {
		return true
	}

	return false
}

// SetOld gets a reference to the given string and assigns it to the Old field.
func (o *FieldDiff) SetOld(v string) {
	o.Old = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FieldDiff) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDiff) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FieldDiff) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FieldDiff) SetType(v string) {
	o.Type = &v
}

func (o FieldDiff) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Annotations != nil {
		toSerialize["Annotations"] = o.Annotations
	}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.New != nil {
		toSerialize["New"] = o.New
	}
	if o.Old != nil {
		toSerialize["Old"] = o.Old
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFieldDiff struct {
	value *FieldDiff
	isSet bool
}

func (v NullableFieldDiff) Get() *FieldDiff {
	return v.value
}

func (v *NullableFieldDiff) Set(val *FieldDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldDiff(val *FieldDiff) *NullableFieldDiff {
	return &NullableFieldDiff{value: val, isSet: true}
}

func (v NullableFieldDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


