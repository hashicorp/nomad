(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{KnBP:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/commands/volume/deregister",function(){return t("QLtM")}])},QLtM:function(e,a,t){"use strict";t.r(a),t.d(a,"default",(function(){return o}));var n=t("wx14"),i=t("Ff2n"),r=t("q1tI"),l=t.n(r),c=t("7ljp"),b=t("j1un"),s=(l.a.createElement,{}),m=Object(b.a)({layout:"docs",page_title:"Commands: volume deregister",sidebar_title:"deregister",description:"Deregister volumes with CSI plugins.\n",__resourcePath:"docs/commands/volume/deregister.mdx",__scans:{}});function o(e){var{components:a}=e,t=Object(i.a)(e,["components"]);return Object(c.b)(m,Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("h1",{className:"g-type-display-2"},Object(c.b)("a",Object(n.a)({parentName:"h1"},{className:"__permalink-h",href:"#command-volume-deregister","aria-label":"command volume deregister permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h1"},{className:"__target-h",id:"command-volume-deregister","aria-hidden":""})),"Command: volume deregister"),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"volume deregister")," command deregisters external storage volumes with\nNomad's ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/container-storage-interface/spec"}),"Container Storage Interface (CSI)")," support. The volume\nmust exist on the remote storage provider before it can be deregistered\nand used by a task."),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#usage","aria-label":"usage permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"usage","aria-hidden":""})),"Usage"),Object(c.b)("pre",{className:"language-plaintext"},Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-plaintext"}),"nomad volume deregister [options] [volume]\n")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"volume deregister")," command requires a single argument, specifying\nthe ID of volume to be deregistered. Deregistration will fail if the\nvolume is still in use by an allocation or in the process of being\nunpublished."),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#general-options","aria-label":"general options permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"general-options","aria-hidden":""})),"General Options"),Object(c.b)("ul",null,Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"address",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#address","aria-label":"address permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-address=<addr>")),": The address of the Nomad server. Overrides the ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_ADDR"),"\nenvironment variable if set. Defaults to ",Object(c.b)("inlineCode",{parentName:"p"},"http://127.0.0.1:4646"),".")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"region",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#region","aria-label":"region permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-region=<region>")),": The region of the Nomad server to forward commands to.\nOverrides the ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_REGION")," environment variable if set. Defaults to the\nAgent's local region.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"namespace",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#namespace","aria-label":"namespace permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-namespace=<namespace>")),": The target namespace for queries and actions bound\nto a namespace. Overrides the NOMAD_NAMESPACE environment variable if set.\nIf set to '*', job and alloc subcommands query all namespacecs authorized to\nuser. Defaults to the \"default\" namespace.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"no-color",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#no-color","aria-label":"no color permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-no-color")),": Disables colored command output. Alternatively,\n",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_CLI_NO_COLOR")," may be set.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"ca-cert",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#ca-cert","aria-label":"ca cert permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-ca-cert=<path>")),": Path to a PEM encoded CA cert file to use to verify the\nNomad server SSL certificate. Overrides the ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_CACERT")," environment\nvariable if set.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"ca-path",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#ca-path","aria-label":"ca path permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-ca-path=<path>")),": Path to a directory of PEM encoded CA cert files to verify\nthe Nomad server SSL certificate. If both ",Object(c.b)("inlineCode",{parentName:"p"},"-ca-cert")," and ",Object(c.b)("inlineCode",{parentName:"p"},"-ca-path")," are\nspecified, ",Object(c.b)("inlineCode",{parentName:"p"},"-ca-cert")," is used. Overrides the ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_CAPATH")," environment\nvariable if set.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"client-cert",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#client-cert","aria-label":"client cert permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-client-cert=<path>")),": Path to a PEM encoded client certificate for TLS\nauthentication to the Nomad server. Must also specify ",Object(c.b)("inlineCode",{parentName:"p"},"-client-key"),". Overrides\nthe ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_CLIENT_CERT")," environment variable if set.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"client-key",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#client-key","aria-label":"client key permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-client-key=<path>")),": Path to an unencrypted PEM encoded private key matching\nthe client certificate from ",Object(c.b)("inlineCode",{parentName:"p"},"-client-cert"),". Overrides the ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_CLIENT_KEY"),"\nenvironment variable if set.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"tls-server-name",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#tls-server-name","aria-label":"tls server name permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-tls-server-name=<value>")),": The server name to use as the SNI host when connecting\nvia TLS. Overrides the ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_TLS_SERVER_NAME")," environment variable if set.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"tls-skip-verify",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#tls-skip-verify","aria-label":"tls skip verify permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-tls-skip-verify")),": Do not verify TLS certificate. This is highly not\nrecommended. Verification will also be skipped if ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_SKIP_VERIFY")," is set.")),Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"token",className:"__target-lic","aria-hidden":""})),Object(c.b)("p",{parentName:"li"},Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#token","aria-label":"token permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-token")),": The SecretID of an ACL token to use to authenticate API requests with.\nOverrides the ",Object(c.b)("inlineCode",{parentName:"p"},"NOMAD_TOKEN")," environment variable if set."))),Object(c.b)("h2",{className:"g-type-display-3"},Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__permalink-h",href:"#deregister-options","aria-label":"deregister options permalink"}),"\xbb"),Object(c.b)("a",Object(n.a)({parentName:"h2"},{className:"__target-h",id:"deregister-options","aria-hidden":""})),"Deregister Options"),Object(c.b)("ul",null,Object(c.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(c.b)("a",Object(n.a)({parentName:"li"},{id:"force",className:"__target-lic","aria-hidden":""})),Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#force","aria-label":"force permalink",className:"__permalink-lic"}),Object(c.b)("inlineCode",{parentName:"a"},"-force")),": Force deregistration of the volume and immediately drop claims for\nterminal allocations. Returns an error if the volume has running\nallocations. This does not detach the volume from client nodes.")))}o.isMDXComponent=!0}},[["KnBP",0,1,2,4,3,5,6]]]);