/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// Port struct for Port
type Port struct {
	HostNetwork *string `json:"HostNetwork,omitempty"`
	Label *string `json:"Label,omitempty"`
	To *int32 `json:"To,omitempty"`
	Value *int32 `json:"Value,omitempty"`
}

// NewPort instantiates a new Port object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPort() *Port {
	this := Port{}
	return &this
}

// NewPortWithDefaults instantiates a new Port object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortWithDefaults() *Port {
	this := Port{}
	return &this
}

// GetHostNetwork returns the HostNetwork field value if set, zero value otherwise.
func (o *Port) GetHostNetwork() string {
	if o == nil || o.HostNetwork == nil {
		var ret string
		return ret
	}
	return *o.HostNetwork
}

// GetHostNetworkOk returns a tuple with the HostNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetHostNetworkOk() (*string, bool) {
	if o == nil || o.HostNetwork == nil {
		return nil, false
	}
	return o.HostNetwork, true
}

// HasHostNetwork returns a boolean if a field has been set.
func (o *Port) HasHostNetwork() bool {
	if o != nil && o.HostNetwork != nil {
		return true
	}

	return false
}

// SetHostNetwork gets a reference to the given string and assigns it to the HostNetwork field.
func (o *Port) SetHostNetwork(v string) {
	o.HostNetwork = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Port) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Port) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Port) SetLabel(v string) {
	o.Label = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *Port) GetTo() int32 {
	if o == nil || o.To == nil {
		var ret int32
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetToOk() (*int32, bool) {
	if o == nil || o.To == nil {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *Port) HasTo() bool {
	if o != nil && o.To != nil {
		return true
	}

	return false
}

// SetTo gets a reference to the given int32 and assigns it to the To field.
func (o *Port) SetTo(v int32) {
	o.To = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Port) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Port) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *Port) SetValue(v int32) {
	o.Value = &v
}

func (o Port) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostNetwork != nil {
		toSerialize["HostNetwork"] = o.HostNetwork
	}
	if o.Label != nil {
		toSerialize["Label"] = o.Label
	}
	if o.To != nil {
		toSerialize["To"] = o.To
	}
	if o.Value != nil {
		toSerialize["Value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullablePort struct {
	value *Port
	isSet bool
}

func (v NullablePort) Get() *Port {
	return v.value
}

func (v *NullablePort) Set(val *Port) {
	v.value = val
	v.isSet = true
}

func (v NullablePort) IsSet() bool {
	return v.isSet
}

func (v *NullablePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePort(val *Port) *NullablePort {
	return &NullablePort{value: val, isSet: true}
}

func (v NullablePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


