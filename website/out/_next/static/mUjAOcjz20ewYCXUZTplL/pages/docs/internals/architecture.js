(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{DsMD:function(e,a,t){"use strict";t.r(a),t.d(a,"default",(function(){return h}));var n=t("wx14"),s=t("Ff2n"),r=t("q1tI"),i=t.n(r),o=t("7ljp"),c=t("j1un"),l=(i.a.createElement,{}),b=Object(c.a)({layout:"docs",page_title:"Architecture",sidebar_title:"Architecture",description:"Learn about the internal architecture of Nomad.",__resourcePath:"docs/internals/architecture.mdx",__scans:{}});function h(e){var a=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)(b,Object(n.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(o.b)("h1",{className:"g-type-display-2"},Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__permalink-h",href:"#architecture","aria-label":"architecture permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__target-h",id:"architecture","aria-hidden":""})),"Architecture"),Object(o.b)("p",null,"Nomad is a complex system that has many different pieces. To help both users and developers of Nomad\nbuild a mental model of how it works, this page documents the system architecture."),Object(o.b)("div",{className:"alert alert-warning g-type-body",role:"alert"},Object(o.b)("p",{parentName:"div"},"",Object(o.b)("strong",{parentName:"p"},"Advanced Topic!")," This page covers technical details\nof Nomad. You do not need to understand these details to\neffectively use Nomad. The details are documented here for\nthose who wish to learn about them without having to go\nspelunking through the source code.")),Object(o.b)("h1",{className:"g-type-display-2"},Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__permalink-h",href:"#glossary","aria-label":"glossary permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__target-h",id:"glossary","aria-hidden":""})),"Glossary"),Object(o.b)("p",null,"Before describing the architecture, we provide a glossary of terms to help\nclarify what is being discussed:"),Object(o.b)("ul",null,Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Job")," - A Job is a specification provided by users that declares a workload for\nNomad. A Job is a form of ",Object(o.b)("em",{parentName:"p"},"desired state"),"; the user is expressing that the job should\nbe running, but not where it should be run. The responsibility of Nomad is to make sure\nthe ",Object(o.b)("em",{parentName:"p"},"actual state")," matches the user desired state. A Job is composed of one or more\ntask groups.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Task Group")," - A Task Group is a set of tasks that must be run together. For example, a\nweb server may require that a log shipping co-process is always running as well. A task\ngroup is the unit of scheduling, meaning the entire group must run on the same client node and\ncannot be split.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Driver")," \u2013 A Driver represents the basic means of executing your ",Object(o.b)("strong",{parentName:"p"},"Tasks"),".\nExample Drivers include Docker, Qemu, Java, and static binaries.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Task")," - A Task is the smallest unit of work in Nomad. Tasks are executed by drivers,\nwhich allow Nomad to be flexible in the types of tasks it supports. Tasks\nspecify their driver, configuration for the driver, constraints, and resources required.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Client")," - A Client of Nomad is a machine that tasks can be run on. All clients run the\nNomad agent. The agent is responsible for registering with the servers, watching for any\nwork to be assigned and executing tasks. The Nomad agent is a long lived process which\ninterfaces with the servers.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Allocation")," - An Allocation is a mapping between a task group in a job and a client\nnode. A single job may have hundreds or thousands of task groups, meaning an equivalent\nnumber of allocations must exist to map the work to client machines. Allocations are created\nby the Nomad servers as part of scheduling decisions made during an evaluation.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Evaluation")," - Evaluations are the mechanism by which Nomad makes scheduling decisions.\nWhen either the ",Object(o.b)("em",{parentName:"p"},"desired state")," (jobs) or ",Object(o.b)("em",{parentName:"p"},"actual state")," (clients) changes, Nomad creates\na new evaluation to determine if any actions must be taken. An evaluation may result\nin changes to allocations if necessary.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Server")," - Nomad servers are the brains of the cluster. There is a cluster of servers\nper region and they manage all jobs and clients, run evaluations, and create task allocations.\nThe servers replicate data between each other and perform leader election to ensure high\navailability. Servers federate across regions to make Nomad globally aware.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Regions and Datacenters")," - Nomad models infrastructure as regions and\ndatacenters. Regions may contain multiple datacenters. Servers are assigned to\na specific region, managing state and making scheduling decisions within that\nregion. Multiple regions can be federated together. For example, you may\nhave a ",Object(o.b)("inlineCode",{parentName:"p"},"US")," region with the ",Object(o.b)("inlineCode",{parentName:"p"},"us-east-1")," and ",Object(o.b)("inlineCode",{parentName:"p"},"us-west-1")," datacenters,\nconnected to the ",Object(o.b)("inlineCode",{parentName:"p"},"EU")," region with the ",Object(o.b)("inlineCode",{parentName:"p"},"eu-fr-1")," and ",Object(o.b)("inlineCode",{parentName:"p"},"eu-uk-1")," datacenters.\nRequests that are made between regions are forwarded to the appropriate servers.\nData is ",Object(o.b)("em",{parentName:"p"},"not")," replicated between regions.")),Object(o.b)("li",Object(n.a)({parentName:"ul"},{className:"g-type-long-body"}),Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Bin Packing"),' - Bin Packing is the process of filling bins with items in a way that\nmaximizes the utilization of bins. This extends to Nomad, where the clients are "bins"\nand the items are task groups. Nomad optimizes resources by efficiently bin packing\ntasks onto client machines.'))),Object(o.b)("h1",{className:"g-type-display-2"},Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__permalink-h",href:"#high-level-overview","aria-label":"high level overview permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__target-h",id:"high-level-overview","aria-hidden":""})),"High-Level Overview"),Object(o.b)("p",null,"Looking at only a single region, at a high level Nomad looks like this:"),Object(o.b)("p",null,Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/img/nomad-architecture-region.png"}),Object(o.b)("img",Object(n.a)({parentName:"a"},{src:"/img/nomad-architecture-region.png",alt:"Regional Architecture"})))),Object(o.b)("p",null,"Within each region, we have both clients and servers. Servers are responsible for\naccepting jobs from users, managing clients, and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/internals/scheduling/scheduling"}),"computing task placements"),".\nEach region may have clients from multiple datacenters, allowing a small number of servers\nto handle very large clusters."),Object(o.b)("p",null,"In some cases, for either availability or scalability, you may need to run multiple\nregions. Nomad supports federating multiple regions together into a single cluster.\nAt a high level, this setup looks like this:"),Object(o.b)("p",null,Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/img/nomad-architecture-global.png"}),Object(o.b)("img",Object(n.a)({parentName:"a"},{src:"/img/nomad-architecture-global.png",alt:"Global Architecture"})))),Object(o.b)("p",null,"Regions are fully independent from each other, and do not share jobs, clients, or\nstate. They are loosely-coupled using a gossip protocol, which allows users to\nsubmit jobs to any region or query the state of any region transparently. Requests\nare forwarded to the appropriate server to be processed and the results returned.\nData is ",Object(o.b)("em",{parentName:"p"},"not")," replicated between regions."),Object(o.b)("p",null,"The servers in each region are all part of a single consensus group. This means\nthat they work together to elect a single leader which has extra duties. The leader\nis responsible for processing all queries and transactions. Nomad is optimistically\nconcurrent, meaning all servers participate in making scheduling decisions in parallel.\nThe leader provides the additional coordination necessary to do this safely and\nto ensure clients are not oversubscribed."),Object(o.b)("p",null,"Each region is expected to have either three or five servers. This strikes a balance\nbetween availability in the case of failure and performance, as consensus gets\nprogressively slower as more servers are added. However, there is no limit to the number\nof clients per region."),Object(o.b)("p",null,"Clients are configured to communicate with their regional servers and communicate\nusing remote procedure calls (RPC) to register themselves, send heartbeats for liveness,\nwait for new allocations, and update the status of allocations. A client registers\nwith the servers to provide the resources available, attributes, and installed drivers.\nServers use this information for scheduling decisions and create allocations to assign\nwork to clients."),Object(o.b)("p",null,"Users make use of the Nomad CLI or API to submit jobs to the servers. A job represents\na desired state and provides the set of tasks that should be run. The servers are\nresponsible for scheduling the tasks, which is done by finding an optimal placement for\neach task such that resource utilization is maximized while satisfying all constraints\nspecified by the job. Resource utilization is maximized by bin packing, in which\nthe scheduling tries to make use of all the resources of a machine without\nexhausting any dimension. Job constraints can be used to ensure an application is\nrunning in an appropriate environment. Constraints can be technical requirements based\non hardware features such as architecture and availability of GPUs, or software features\nlike operating system and kernel version, or they can be business constraints like\nensuring PCI compliant workloads run on appropriate servers."),Object(o.b)("h1",{className:"g-type-display-2"},Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__permalink-h",href:"#getting-in-depth","aria-label":"getting in depth permalink"}),"\xbb"),Object(o.b)("a",Object(n.a)({parentName:"h1"},{className:"__target-h",id:"getting-in-depth","aria-hidden":""})),"Getting in Depth"),Object(o.b)("p",null,"This has been a brief high-level overview of the architecture of Nomad. There\nare more details available for each of the sub-systems. The ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/internals/consensus"}),"consensus protocol"),",\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/internals/gossip"}),"gossip protocol"),", and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/internals/scheduling/scheduling"}),"scheduler design"),"\nare all documented in more detail."),Object(o.b)("p",null,"For other details, either consult the code, ask in IRC or reach out to the mailing list."))}h.isMDXComponent=!0},kASi:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/internals/architecture",function(){return t("DsMD")}])}},[["kASi",0,1,2,4,3,5,6]]]);