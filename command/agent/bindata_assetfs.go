// Code generated by go-bindata.
// sources:
// ui/dist/assets/nomad-ui-ad7b09549502674646af03f41d1d62f1.css
// ui/dist/assets/nomad-ui-d4e693a82d9bb50c3b64289ff72827ee.js
// ui/dist/assets/vendor-ba9b921906f8503d3378ceb83aece15b.js
// ui/dist/assets/vendor-d41d8cd98f00b204e9800998ecf8427e.css
// ui/dist/crossdomain.xml
// ui/dist/ember-fetch/fastboot-fetch-805e176077930c98aec5834ae48bd0f2.js
// ui/dist/favicon-1c2527a7a07d130ecbafce75e4615a69.png
// ui/dist/images/icons/clock.svg
// ui/dist/images/icons/history.svg
// ui/dist/images/icons/media-pause.svg
// ui/dist/images/icons/media-play.svg
// ui/dist/images/icons/warning.svg
// ui/dist/images/nomad-logo.svg
// ui/dist/index.html
// ui/dist/robots.txt
// DO NOT EDIT!

// +build ui

package agent

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}
