/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.3
 * Contact: support@hashicorp.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testclient

import (
	"encoding/json"
)

// NodeScoreMeta struct for NodeScoreMeta
type NodeScoreMeta struct {
	NodeID *string `json:"NodeID,omitempty"`
	NormScore *float64 `json:"NormScore,omitempty"`
	Scores *map[string]float64 `json:"Scores,omitempty"`
}

// NewNodeScoreMeta instantiates a new NodeScoreMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeScoreMeta() *NodeScoreMeta {
	this := NodeScoreMeta{}
	return &this
}

// NewNodeScoreMetaWithDefaults instantiates a new NodeScoreMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeScoreMetaWithDefaults() *NodeScoreMeta {
	this := NodeScoreMeta{}
	return &this
}

// GetNodeID returns the NodeID field value if set, zero value otherwise.
func (o *NodeScoreMeta) GetNodeID() string {
	if o == nil || o.NodeID == nil {
		var ret string
		return ret
	}
	return *o.NodeID
}

// GetNodeIDOk returns a tuple with the NodeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeScoreMeta) GetNodeIDOk() (*string, bool) {
	if o == nil || o.NodeID == nil {
		return nil, false
	}
	return o.NodeID, true
}

// HasNodeID returns a boolean if a field has been set.
func (o *NodeScoreMeta) HasNodeID() bool {
	if o != nil && o.NodeID != nil {
		return true
	}

	return false
}

// SetNodeID gets a reference to the given string and assigns it to the NodeID field.
func (o *NodeScoreMeta) SetNodeID(v string) {
	o.NodeID = &v
}

// GetNormScore returns the NormScore field value if set, zero value otherwise.
func (o *NodeScoreMeta) GetNormScore() float64 {
	if o == nil || o.NormScore == nil {
		var ret float64
		return ret
	}
	return *o.NormScore
}

// GetNormScoreOk returns a tuple with the NormScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeScoreMeta) GetNormScoreOk() (*float64, bool) {
	if o == nil || o.NormScore == nil {
		return nil, false
	}
	return o.NormScore, true
}

// HasNormScore returns a boolean if a field has been set.
func (o *NodeScoreMeta) HasNormScore() bool {
	if o != nil && o.NormScore != nil {
		return true
	}

	return false
}

// SetNormScore gets a reference to the given float64 and assigns it to the NormScore field.
func (o *NodeScoreMeta) SetNormScore(v float64) {
	o.NormScore = &v
}

// GetScores returns the Scores field value if set, zero value otherwise.
func (o *NodeScoreMeta) GetScores() map[string]float64 {
	if o == nil || o.Scores == nil {
		var ret map[string]float64
		return ret
	}
	return *o.Scores
}

// GetScoresOk returns a tuple with the Scores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeScoreMeta) GetScoresOk() (*map[string]float64, bool) {
	if o == nil || o.Scores == nil {
		return nil, false
	}
	return o.Scores, true
}

// HasScores returns a boolean if a field has been set.
func (o *NodeScoreMeta) HasScores() bool {
	if o != nil && o.Scores != nil {
		return true
	}

	return false
}

// SetScores gets a reference to the given map[string]float64 and assigns it to the Scores field.
func (o *NodeScoreMeta) SetScores(v map[string]float64) {
	o.Scores = &v
}

func (o NodeScoreMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeID != nil {
		toSerialize["NodeID"] = o.NodeID
	}
	if o.NormScore != nil {
		toSerialize["NormScore"] = o.NormScore
	}
	if o.Scores != nil {
		toSerialize["Scores"] = o.Scores
	}
	return json.Marshal(toSerialize)
}

type NullableNodeScoreMeta struct {
	value *NodeScoreMeta
	isSet bool
}

func (v NullableNodeScoreMeta) Get() *NodeScoreMeta {
	return v.value
}

func (v *NullableNodeScoreMeta) Set(val *NodeScoreMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeScoreMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeScoreMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeScoreMeta(val *NodeScoreMeta) *NullableNodeScoreMeta {
	return &NullableNodeScoreMeta{value: val, isSet: true}
}

func (v NullableNodeScoreMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeScoreMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


